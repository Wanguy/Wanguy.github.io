<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gavin&#39;s Blog</title>
  
  <subtitle>愿你继续成长</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://marara.xin/"/>
  <updated>2019-04-22T01:41:28.161Z</updated>
  <id>https://marara.xin/</id>
  
  <author>
    <name>Gavin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>支持向量机（SVM）</title>
    <link href="https://marara.xin/2019/04/21/SVM/"/>
    <id>https://marara.xin/2019/04/21/SVM/</id>
    <published>2019-04-21T08:39:10.000Z</published>
    <updated>2019-04-22T01:41:28.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>支持向量机与上世纪90年代正式由Vapnik和Cortes正式发表，在文本分类任务中显示 出卓越性能，很快成为机器学习主流技术，直接掀起了2000年前后统计学习的高潮。</li><li>支持向量机思想直观，但细节复杂，涵盖凸优化，核函数，拉格朗日算子等理论</li><li>支持向量机 （support vector machine）： <ul><li>二分类模型，也可用于回归分析</li><li>学习策略： 最大间隔化 </li><li>凸优化，对偶，KKT条件</li></ul></li></ul><a id="more"></a><h2 id="机器学习算法分类"><a href="#机器学习算法分类" class="headerlink" title="机器学习算法分类"></a>机器学习算法分类</h2><ul><li><p>回归（监督学习）：</p><ul><li>线性回归 （linear regression） </li><li>决策树回归 （decision tree regression）</li><li><span style="color:red">支持向量回归 （support vector regression）<span></span></span></li><li>神经网络 （neural network）</li></ul></li><li>分类 （监督学习）：<ul><li>逻辑回归 （logistic regression）</li><li>决策树分类（decision tree classification） </li><li><span style="color:red">支持向量机 （support vector machine）<span></span></span></li><li>朴素贝叶斯 （naive Bayes） </li></ul></li><li>聚类（半监督学习）： <ul><li>K 均值 （K-means）</li></ul></li></ul><h2 id="线性分类"><a href="#线性分类" class="headerlink" title="线性分类"></a>线性分类</h2><p>分类算法的起源： 逻辑回归</p><script type="math/tex; mode=display">h_{\theta}(x)=\frac{1}{1+e^{-f(x)}}</script><script type="math/tex; mode=display">P(y=1 | x ; \theta)=h_{\theta}(x)</script><script type="math/tex; mode=display">P(y=0 | x ; \theta)=1-h_{\theta}(x)</script><p><img src="https://i.loli.net/2019/04/21/5cbc35afcaf15.png" width="500"></p><script type="math/tex; mode=display">f(x)=w^{T} x+b</script><p>$𝑤$: 权重 </p><p>$𝑏$: 截距（位移）</p><h3 id="如何决定最好的参数：-𝑤-amp-𝑏"><a href="#如何决定最好的参数：-𝑤-amp-𝑏" class="headerlink" title="如何决定最好的参数：$𝑤$ &amp; $𝑏$"></a>如何决定最好的参数：$𝑤$ &amp; $𝑏$</h3><p><img src="https://i.loli.net/2019/04/21/5cbc35bd761f4.png" width="300"></p><blockquote><p>支持向量机的核心思想： 最大间隔化， 最不受到噪声的干扰</p></blockquote><ul><li><p>SVM划分的超平面：</p><script type="math/tex; mode=display">w^{T} x+b=0</script><p>$\boldsymbol{w}=\left(w_{1}, w_{2}, \dots, w_{d}\right)$为法向量，决定超平面方向</p></li><li><p>假设超平面将样本正确划分</p></li><li><script type="math/tex; mode=display">\left\{\begin{array}{l}{w^{T} x+b \geq 1, y=+1} \\ {w^{T} x+b \leq-1, y=-1}\end{array}\right.</script></li></ul><ul><li>距离超平面最近的几个点叫做支持向量</li><li>间隔（margin）：$r=\frac{2}{| | w| |}$</li></ul><p><img src="https://i.loli.net/2019/04/21/5cbc35afd510f.png" width="500"></p><ul><li>支持向量机： 最大间隔化</li><li>约束条件:</li></ul><script type="math/tex; mode=display">\begin{array}{c}{\max _{w, b} \frac{2}{\|w\|}} \\ {\text { s.t. } y_{i}\left(w^{T} x_{i}+b\right) \geq 1}\end{array}\\\left(x_{i}, y_{i}\right) \in D 属于样本空间</script><p>​    等价于</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{w, b} \frac{1}{2}\|w\|^{2}} \\ {\text { s.t. } y_{i}\left(w^{T} x_{i}+b\right) \geq 1}\end{array}\\\left(x_{i}, y_{i}\right) \in D 属于样本空间</script><p>支持向量机的最基本表达形式， 是一个线性约束的凸二次规划问题， 有最优解</p><script type="math/tex; mode=display">D=\left\{\left(x_{1}, y_{1}\right),\left(x_{2}, y_{2}\right), \ldots,\left(x_{n}, y_{n}\right)\right\}, y_{i} \in\{-1,+1\}</script><h3 id="凸函数"><a href="#凸函数" class="headerlink" title="凸函数"></a>凸函数</h3><p>凸函数：设$ f(x)$ 为定义在$n$维欧式空间中某个凸集 $S$ 上的函数，若对于任</p><p>何实数$𝛼 0 &lt; 𝛼 &lt; 1 $以及 $S$ 中的不同两点 $x$ , $y$ , 均有：</p><script type="math/tex; mode=display">f\left((1-\alpha) x_{0}+\alpha x_{1}\right) \leq(1-\alpha) f\left(x_{0}\right)+\alpha f\left(x_{1}\right)</script><p>那么， $𝑓(𝑥)$ 为定义在凸集 $S$ 上的凸函数</p><p><img src="https://i.loli.net/2019/04/21/5cbc35bdb1598.png" width="500"></p><p><img src="https://i.loli.net/2019/04/21/5cbc35afb6756.png" width="500"></p><blockquote><p>左边为凸函数，右边为非凸函数</p></blockquote><h3 id="凸优化"><a href="#凸优化" class="headerlink" title="凸优化"></a>凸优化</h3><p>常见的凸函数：</p><ul><li>仿射函数（affine function）：$w^{T} x+b$</li><li>二次函数（quadratic function）：$x^{T} A x+b x+c$（$A$ 为半正定矩阵）</li><li>最小平方差函数（least square）：$| | y-A x| |_{2}^{2}$（$A ^T A$ 总是半正定矩阵）</li><li>max 函数：$\max \left(x_{1}, x_{2}, \ldots, x_{n}\right)$</li></ul><p>有约束条件的凸优化问题：</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{x} f(x)} \\ {\text { s.t. } g_{i}(x) \leq 0, i=1,2, \ldots, m} \\ {h_{j}(x)=0, j=1,2, \dots, n}\end{array}</script><p>如果 $f(x)$, $g(x)$ 为凸函数，$h(x)$ 为仿射函数时， 这是一个凸优化的问题。</p><p>对于支持向量机：</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{w, b} \frac{1}{2}| | w| |^{2}} \\ {\text {s.t.} y_{i}\left(w^{T} x_{i}+b\right) \geq 1}\end{array}</script><p>SVM 是一个凸二次规划问题， 有最优解</p><h2 id="拉格朗日对偶"><a href="#拉格朗日对偶" class="headerlink" title="拉格朗日对偶"></a>拉格朗日对偶</h2><p>拉格朗日乘子法（Lagrange multipliers）</p><ul><li>一种寻找多元函数在一组约束条件下的极值的方法。通过引入拉格朗日乘子，可将有 $d$ 个变量和 $k$ 个约束条件的最优化问题转化为 $d+k$ 个变量的无约束优化问题求解。</li><li>将原问题的约束规划问题转化为对偶问题，易于求解</li></ul><h3 id="拉格朗日乘子：等式约束"><a href="#拉格朗日乘子：等式约束" class="headerlink" title="拉格朗日乘子：等式约束"></a>拉格朗日乘子：等式约束</h3><p><img src="https://i.loli.net/2019/04/21/5cbc35afcbb05.png" width="300"></p><p>对于等式约束问题：</p><script type="math/tex; mode=display">\begin{array}{c}{\min f(x)} \\ {\text {s.t.} g_{i}(x)=0}\end{array}</script><p>那么必然有：</p><ol><li>约束曲面上的任一点 $x$, 该点的梯度$\nabla𝑔( 𝑥)$ 正交于约束曲面</li><li>在最优点$𝑥 ^∗$ ,$\nabla𝑓 (𝑥)^ ∗$ 也正交于曲面</li></ol><p>则存在$\lambda \neq 0$ :</p><script type="math/tex; mode=display">\nabla f\left(x^{*}\right)+\lambda \nabla g\left(x^{*}\right)=0</script><p>可定义拉格朗日函数, 𝜆 为拉格朗日乘子：</p><script type="math/tex; mode=display">L(x, \lambda)=f(x)+\lambda g(x)</script><p>同时：</p><script type="math/tex; mode=display">\nabla_{x} L(x, \lambda)=0 ; \quad \nabla_{\lambda} L(x, \lambda)=0</script><h3 id="拉格朗日乘子：不等式约束"><a href="#拉格朗日乘子：不等式约束" class="headerlink" title="拉格朗日乘子：不等式约束"></a>拉格朗日乘子：不等式约束</h3><p><img src="https://i.loli.net/2019/04/21/5cbc35bd8e91c.png" width="300"></p><p>对于不等式约束问题：</p><script type="math/tex; mode=display">\begin{array}{c}{\min f(x)} \\ {\text { s.t. } g_{i}(x) \leq 0}\end{array}</script><ol><li>$g(x)&lt;0$，约束不起作用，直接求解 $\nabla f(x)=0, \lambda=0$</li><li>$g(x)=0, \nabla f\left(x^{<em>}\right)+\lambda \nabla g\left(x^{</em>}\right)=0, \lambda&gt;0$<br>那么拉格朗日函数为：<script type="math/tex; mode=display">L(x, \lambda)=f(x)+\lambda g(x)</script>同时需要满足的条件为：<script type="math/tex; mode=display">\begin{array}{c}{\nabla_{x} L(x, \lambda)=0} \\ {\nabla_{\lambda} L(x, \lambda)=0} \\ {\lambda g(x)=0} \\ {\lambda \geq 0}\end{array}\\g(x) \leq 0</script></li></ol><p>即Karush-Kuhn-Tucker (KKT) 条件</p><h3 id="拉格朗日对偶-1"><a href="#拉格朗日对偶-1" class="headerlink" title="拉格朗日对偶"></a>拉格朗日对偶</h3><p>广义拉格朗日函数：</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{x} f(x)} \\ {\text { s.t. } g_{i}(x) \leq 0, i=1,2, \ldots, n} \\ {h_{j}(x)=0, j=1,2, \ldots, m}\end{array}</script><script type="math/tex; mode=display">L(x, u, \lambda)=f(x)+\sum_{i=1}^{n} \mu_{i} g_{i}(x)+\sum_{i=1}^{m} \lambda_{j} h_{j}(x)</script><p>满足 KKT 条件：</p><script type="math/tex; mode=display">\left\{\begin{array}{c}{\nabla_{x, \mu, \lambda} L(x, \mu, \lambda)=0} \\ {g_{i}(x) \leq 0} \\ {\mu_{i} \geq 0} \\ {\mu_{i} g_{i}(x)=0}\end{array}\right.</script><p>构造拉格朗日乘子：</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{x} f(x)} \\ {\text { s.t. } g_{i}(x) \leq 0, i=1,2, \ldots, n} \\ {h_{j}(x)=0, j=1,2, \ldots, m}\end{array}</script><script type="math/tex; mode=display">L(x, u, \lambda)=f(x)+\sum_{i=1}^{n} \mu_{i} g_{i}(x)+\sum_{i=1}^{m} \lambda_{j} h_{j}(x)\left(\mu_{i} \geq 0\right)</script><p>主问题（primal problem）：$p^{*}=\min _{x} \max _{\mu, \lambda} L(x, \mu, \lambda)$</p><p>其对偶问题（dual problem）：$d^{*}=\max _{\mu, \lambda} \min _{x} L(x, \mu, \lambda)$</p><p>通常：$d^{<em>} \leq p^{</em>}$ 即对偶问题的最优解是原始主问题最优解的下限（弱对偶性）</p><p>但若满足KKT 条件的方程组的解：</p><script type="math/tex; mode=display">\begin{array}{l}{\nabla_{x, \mu, \lambda} L(x, \mu, \lambda)=0} \\ {g_{i}(x) \leq 0} \\ {\mu_{i} \geq 0} \\ {\mu_{i} g_{i}(x)=0}\end{array}</script><p>此时 $𝑑 ^∗ = 𝑝 ^∗$ 强对偶性，原始问题和对偶问题最优解严格相等</p><blockquote><p>支持向量机：利用拉格朗日对偶和KKT条件求解的经典对偶问题</p></blockquote><h3 id="支持向量机的对偶问题"><a href="#支持向量机的对偶问题" class="headerlink" title="支持向量机的对偶问题"></a>支持向量机的对偶问题</h3><p>支持向量机最大间隔化下的损失函数：</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{w, b} \frac{1}{2}| | w| |^{2}} \\ {\text { s.t. } y_{i}\left(\boldsymbol{w}^{T} \boldsymbol{x}_{i}+b\right) \geq 1, i=1,2,3, \ldots, m}\end{array}</script><p>那么约束可以写为：</p><script type="math/tex; mode=display">g_{i}(\boldsymbol{w})=1-y_{i}\left(\boldsymbol{w}^{T} x_{i}+b\right) \leq 0</script><p>构造拉格朗日函数：</p><script type="math/tex; mode=display">L(\boldsymbol{w}, b, \boldsymbol{\lambda})=\frac{1}{2}| | \boldsymbol{w}| |^{2}+\sum_{i=1}^{m} \lambda_{i}\left(1-y_{i}\left(\boldsymbol{w}^{T} \boldsymbol{x}_{\boldsymbol{i}}+b\right)\right)</script><p>找到对偶问题的形式：</p><script type="math/tex; mode=display">\nabla_{w} L(\boldsymbol{w}, b, \boldsymbol{\lambda})=0 \Rightarrow \boldsymbol{w}=\sum_{i=1}^{m} \lambda_{i} y_{i} \boldsymbol{x}_{i}</script><script type="math/tex; mode=display">\nabla_{b} L(\boldsymbol{w}, b, \lambda)=0 \Rightarrow 0=\sum_{i=1}^{m} \lambda_{i} y_{i}</script><p><img src="https://i.loli.net/2019/04/21/5cbc35bd8e91c.png" width="500"></p><p>那么代入拉格朗日函数可以得到其对偶问题：</p><script type="math/tex; mode=display">\max _{\lambda} W(\lambda)=\max _{\lambda} \min _{w, b} L(w, b, \lambda)=\sum_{i=1}^{m} \lambda_{i}-\frac{1}{2} \sum_{i=1}^{m} y_{i} y_{j} \lambda_{i} \lambda_{j} x_{i}^{T} x_{j}\\\begin{array}{c}{\text { s.t. } \sum_{i=1}^{m} \lambda_{i} y_{i}=0} \\ {\lambda_{i} \geq 0, i=1,2, \ldots, m}\end{array}</script><p>上述过程满足KKT条件：</p><script type="math/tex; mode=display">\begin{array}{c}{\lambda_{i} \geq 0} \\ {1-y_{i} f\left(x_{i}\right) \leq 0} \\ {\lambda_{i}\left(1-y_{i} f\left(x_{i}\right)\right)=0}\end{array}</script><script type="math/tex; mode=display">f(\boldsymbol{x})=\boldsymbol{w}^{T} \boldsymbol{x}+b=\sum_{i=1}^{m} \lambda_{i} y_{i} \boldsymbol{x}_{\boldsymbol{i}}^{T} \boldsymbol{x}+b</script><script type="math/tex; mode=display">\begin{array}{c}{\lambda_{i} \geq 0} \\ {1-y_{i} f\left(x_{i}\right) \leq 0} \\ {\lambda_{i}\left(1-y_{i} f\left(x_{i}\right)\right)=0}\end{array}</script><p>如果$ y_{i} f\left(x_{i}\right)&gt;1$, 那么$𝜆 _i = 0$, 对于$𝑓(𝑥)$ 没有贡献</p><h2 id="核函数（Kernel）"><a href="#核函数（Kernel）" class="headerlink" title="核函数（Kernel）"></a>核函数（Kernel）</h2><p>假设有个映射函数从二维空间映射到三维空间：</p><script type="math/tex; mode=display">\Phi : \left( \begin{array}{l}{x_{1}} \\ {x_{2}}\end{array}\right) \rightarrow \left( \begin{array}{c}{x_{1}^{2}} \\ {x_{2}^{2}} \\ {\sqrt{2} x_{1} x_{2}}\end{array}\right) \quad \mathbb{R}^{2} \rightarrow \mathbb{R}^{3}</script><p><img src="https://i.loli.net/2019/04/21/5cbc35afdc5c1.png" width="800"></p><p>优化问题变为：</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{w, b} \frac{1}{2}\|w\|^{2}} \\ {\text {s.t.} y_{i}\left(w^{T} \phi\left(x_{i}\right)+b\right) \geq 1}\end{array}</script><p>对偶问题为：</p><script type="math/tex; mode=display">\max _{\lambda} W(\lambda)=\sum_{i=1}^{m} \lambda_{i}-\frac{1}{2} \sum_{i=1}^{m} y_{i} y_{j} \lambda_{i} \lambda_{j} \phi\left(x_{i}\right)^{T} \phi\left(x_{j}\right)\\\begin{array}{c}{\text { s.t. } \sum_{i=1}^{m} \lambda_{i} y_{i}=0} \\ {\lambda_{i} \geq 0, i=1,2, \dots, m}\end{array}</script><p><img src="https://i.loli.net/2019/04/21/5cbc35afb67ad.png" width="800"></p><p>单独计算映射函数$\phi(x)$以及$\phi\left(x_{i}\right)^{T} \phi\left(x_{j}\right)$十分困难，现设想构造核函数</p><p>比如：</p><script type="math/tex; mode=display">\Phi : \left( \begin{array}{l}{x_{1}} \\ {x_{2}}\end{array}\right) \rightarrow \left( \begin{array}{c}{x_{1}^{2}} \\ {x_{2}^{2}} \\ {\sqrt{2} x_{1} x_{2}}\end{array}\right) \mathbb{R}^{2} \rightarrow \mathbb{R}^{3}</script><script type="math/tex; mode=display">\begin{align}\Phi(x)^{T} \Phi(z)&=\left(x_{1}^{2}, x_{2}^{2}, \sqrt{2} x_{1} x_{2}\right) \left( \begin{array}{c}{z_{1}^{2}} \\ {z_{2}^{2}} \\ {\sqrt{2} z_{1} z_{2}}\end{array}\right)\\&=x_{1}^{2} z_{1}^{2}+x_{1}^{2} z_{1}^{2}+2 x_{1} z_{1} x_{1} z_{1}\\&=\left(x_{1} z_{1}+x_{2} z_{2}\right)^{2}\\ &=\left(\boldsymbol{x}^{T} \boldsymbol{z}\right)^{2}\end{align}</script><script type="math/tex; mode=display">k\left(x_{i}, x_{j}\right)=\phi\left(x_{i}\right)^{T} \phi\left(x_{j}\right)</script><ul><li>训练器不用学习和计算映射函数的显性表达式</li><li>寻找到核函数，然后在原始样本空间做内积，比如 $k(x, z)=\left(x^{T} z\right)^{2}$</li></ul><h3 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h3><p>线性核函数：$k\left(x_{i}, x_{j}\right)=x_{i}^{T} x_{j}$</p><p>多项式核函数：$k\left(x_{i}, x_{j}\right)=\left(x_{i}^{T} x_{j}\right)^{d}\quad d&gt;0$</p><p>高斯核函数：$k\left(x_{i}, x_{j}\right)=e^{\left(-\frac{\left|x_{i}-x_{i}\right|^{2}}{2 \sigma^{2}}\right)} \quad \sigma&gt;0$</p><p>拉普拉斯核函数：$k\left(x_{i}, x_{j}\right)=e^{\left(-\frac{\left|x_{i}-x_{j}\right|}{2 \sigma^{2}}\right)} \quad \sigma&gt;0$</p><p>Sigmoid 核函数：$k\left(x_{i}, x_{j}\right)=\tanh \left(\beta x_{i}^{T} x_{j}+\theta\right) \quad \beta&gt;0, \theta&lt;0$</p><h3 id="正则化与软间隔"><a href="#正则化与软间隔" class="headerlink" title="正则化与软间隔"></a>正则化与软间隔</h3><p>针对情况： 如果样本不是完全能够划分开</p><p>解决方法： 允许支持向量机在一些样本出错，定义软间隔</p><p>引入正则化强度参数$C$，损失函数重新定义为：</p><script type="math/tex; mode=display">\min _{w, b} \frac{1}{2}\|w\|^{2}+C \sum_{i=1}^{m} \max \left(0,1-y_{i} f\left(x_{i}\right)\right)</script><p>引入松弛变量（slack variables）$\xi_{i} \geq 0$：</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{w, b, \xi} \frac{1}{2}| | w| |^{2}+C \sum_{i=1}^{m} \xi_{i}} \\ {\text {s.t.} y_{i} f\left(x_{i}\right) \geq 1-\xi_{i}} \\ {\xi_{i} \geq 0, i=1,2,3 \ldots m}\end{array}</script><p><img src="https://i.loli.net/2019/04/21/5cbc35afe1cf9.png" width="300"></p><h3 id="软间隔支持向量机"><a href="#软间隔支持向量机" class="headerlink" title="软间隔支持向量机"></a>软间隔支持向量机</h3><p>拉格朗日函数：</p><script type="math/tex; mode=display">L(\boldsymbol{w}, b, \boldsymbol{\xi}, \boldsymbol{\lambda}, \boldsymbol{r})=\frac{1}{2}\|\boldsymbol{w}\|^{2}+C \sum_{i=1}^{m} \xi_{i}+\sum_{i=1}^{m} \lambda_{i}\left(1-\xi_{i}-y_{i}\left(\boldsymbol{w}^{T} \boldsymbol{x}_{i}+b\right)\right)-\sum_{i=1}^{m} r_{i} \xi_{i}\left(\lambda_{i} \geq 0, r_{i} \geq 0\right)</script><p>对$𝑤, 𝑏, \xi$求偏导可得：</p><script type="math/tex; mode=display">0=\sum_{i=1}^{m} \lambda_{i} y_{i} \quad w=\sum_{i=1}^{m} \lambda_{i} y_{i} x_{i} \quad C=\lambda_{i}+r_{i}</script><p>相应的对偶问题为：</p><script type="math/tex; mode=display">\begin{aligned} \max _{\lambda} W(\lambda)=& \sum_{i=1}^{m} \lambda_{i}-\frac{1}{2} \sum_{i=1}^{m} y_{i} y_{j} \lambda_{i} \lambda_{j} x_{i}^{T} x_{j} \\ & \text { s.t. } \sum_{i=1}^{m} \lambda_{i} y_{i}=0 \\ C \geq \lambda_{i} & \geq 0, i=1,2, \ldots, m \end{aligned}</script><p>软间隔的KKT条件为：</p><script type="math/tex; mode=display">\begin{array}{c}{\lambda_{i} \geq 0, r_{i} \geq 0} \\ {1-y_{i} f\left(x_{i}\right)-\xi_{i} \leq 0}\end{array}\\\begin{array}{c}{\lambda_{i}\left(1-y_{i} f\left(x_{i}\right)-\xi_{i}\right)=0} \\ {\xi_{i} \geq 0, r_{i} \xi_{i}=0}\end{array}</script><p>支持向量：</p><script type="math/tex; mode=display">\begin{array}{llll}{\lambda_{i}=0} & {\Rightarrow y_{i} f\left(x_{i}\right) \geq 1}\quad样本落在间隔外，不影响模型 \\{0<\lambda_{i}<C} & {\Rightarrow y_{i} f\left(x_{i}\right)=1}\quad样本落在最大间隔边界上，为支持向量\\{\lambda_{i}=C, \xi_{i} \leq 1}& {\Rightarrow y_{i} f\left(x_{i}\right)=1-\xi_{i} \leq 1}\quad样本落在间隔内部为支持向量\\{\lambda_{i}=C, \xi_{i}>1}& {\Rightarrow y_{i} f\left(x_{i}\right)=1-\xi_{i}<0}\quad样本被错误分类，为支持向量\end{array}</script><h2 id="支持向量机分类与回归"><a href="#支持向量机分类与回归" class="headerlink" title="支持向量机分类与回归"></a>支持向量机分类与回归</h2><p><img src="https://i.loli.net/2019/04/21/5cbc35afe1cf9.png" width="300"></p><p>对于SVM分类，容忍一定数目的错分类</p><p><img src="https://i.loli.net/2019/04/21/5cbc35afdce29.png" width="300"></p><p>对于SVM回归，容忍 $\varepsilon$ 以内的偏差，margin以外的计算损失</p><h3 id="支持向量机回归分析（SVR）"><a href="#支持向量机回归分析（SVR）" class="headerlink" title="支持向量机回归分析（SVR）"></a>支持向量机回归分析（SVR）</h3><p>SVR的主凸优化问题：</p><script type="math/tex; mode=display">\begin{array}{c}{\min _{w} \frac{1}{2}| | w| |^{2}} \\ {\text { s.t. } y_{i}-w^{T} x_{i}-b \leq \epsilon} \\ {w^{T} x_{i}+b-y_{i} \leq \epsilon}\end{array}</script><p><img src="https://i.loli.net/2019/04/21/5cbc35afb8ef6.png" width="300"></p><p>软间隔，对于落在margin以外的点计入损失：</p><script type="math/tex; mode=display">\min _{w} \frac{1}{2}| | w| |^{2}+C \sum_{i=1}^{m}\left(\xi_{i}+\xi_{i}^{\prime}\right)\\\begin{array}{c}{\text {s.t.w}^{T} x_{i}+b-y_{i} \leq \epsilon+\xi_{i}} \\ {y_{i}-w^{T} x_{i}-b \leq \epsilon+\xi_{i}^{\prime}} \\ {\xi_{i} \geq 0, \xi_{i}^{\prime} \geq 0, i=1,2,3 \dots m}\end{array}</script><h3 id="SVR-对偶问题"><a href="#SVR-对偶问题" class="headerlink" title="SVR 对偶问题"></a>SVR 对偶问题</h3><p>构造拉格朗日函数, 引入拉格朗日乘子 $\lambda_{i} \geq 0, \lambda_{i}^{\prime} \geq 0, r_{i} \geq 0, r_{i}^{\prime} \geq 0$</p><script type="math/tex; mode=display">L\left(\boldsymbol{w}, b, \boldsymbol{\lambda}, \boldsymbol{\lambda}^{\prime}, \boldsymbol{\xi}, \boldsymbol{\xi}^{\prime}, \boldsymbol{r}, \boldsymbol{r}^{\prime}\right)=\frac{1}{2}\|\boldsymbol{w}\|^{2}+C \sum_{i=1}^{m}\left(\xi_{i}+\xi_{i}^{\prime}\right)+\sum_{i=1}^{m} \lambda_{i}\left(f\left(x_{i}\right)-y_{i}-\epsilon-\xi_{i}\right)\\+\sum_{i=1}^{m} \lambda_{i}^{\prime}\left(y_{i}-f\left(x_{i}\right)-\epsilon-\xi_{i}^{\prime}\right)-\sum_{i=1}^{m} r_{i} \xi_{i}-\sum_{i=1}^{m} r_{i}^{\prime} \xi_{i}^{\prime}</script><p>对 $w, b, \xi, \xi$ 求偏导则有：</p><script type="math/tex; mode=display">w=\sum_{i=1}^{m}\left(\lambda_{i}^{\prime}-\lambda_{i}\right) x_{i} \quad 0=\sum_{i=1}^{m}\left(\lambda_{i}-\lambda_{i}^{\prime}\right) \quad C=\lambda_{i}+r_{i} \quad C=\lambda_{i}^{\prime}+r_{i}^{\prime}</script><p>SVR 对偶形式为：</p><script type="math/tex; mode=display">\max _{\lambda, \lambda^{\prime}} W\left(\lambda, \lambda^{\prime}\right)=\sum_{i=1}^{m}\left[y_{i}\left(\lambda_{i}^{\prime}-\lambda_{i}\right)-\epsilon\left(\lambda_{i}^{\prime}+\lambda_{i}\right)\right]-\frac{1}{2} \sum_{i=1}^{m} \sum_{j=1}^{m}\left(\lambda_{i}^{\prime}-\lambda_{i}\right)\left(\lambda_{j}^{\prime}-\lambda_{j}\right) x_{i}^{T} x_{j}\\\begin{array}{c}{\text { s.t. } \sum_{i=1}^{m}\left(\lambda_{i}^{\prime}-\lambda_{i}\right)=0} \\ {C \geq \lambda_{i}, \lambda_{i}^{\prime} \geq 0, i=1,2, \ldots, m}\end{array}</script><p>满足KKT条件，则要求：</p><script type="math/tex; mode=display">\lambda_{i} \lambda_{i}^{\prime}=0, \xi_{i} \xi_{i}^{\prime}=0\\\begin{aligned} \lambda_{i}\left(f\left(x_{i}\right)-y_{i}-\epsilon-\xi_{i}\right) &=0 \\ \lambda_{i}^{\prime}\left(y_{i}-f\left(x_{i}\right)-\epsilon-\xi_{i}^{\prime}\right) &=0 \end{aligned}\\\left(C-\lambda_{i}\right) \xi_{i}=0,\left(C-\lambda_{i}^{\prime}\right) \xi_{i}^{\prime}=0</script><p>当且仅当：</p><script type="math/tex; mode=display">Where \quad f\left(x_{i}\right)-y_{i}-\epsilon-\xi_{i}=0 \mathrm, \quad \lambda_{i} \neq 0\\Where  \quad y_{i}-f\left(x_{i}\right)-\epsilon-\xi_{i}^{\prime}=0 \mathrm, \quad \lambda_{i}^{\prime} \neq 0</script><p>也就是当样本落在 $\epsilon$ −间隔带以外，为支持向量，相应的 $\lambda_{i}$，$\lambda_{i}^{\prime}$ 取非零值</p><script type="math/tex; mode=display">f(\boldsymbol{x})=\sum_{i=1}^{m}\left(\lambda_{i}^{\prime}-\lambda_{i}\right) \boldsymbol{x}_{\boldsymbol{i}}^{\boldsymbol{T}} \boldsymbol{x}+\boldsymbol{b}</script><p>对于 $0&lt;\lambda_{i}&lt;C, \xi_{i}=0$ ，取 $b=y_{i}+\epsilon-\sum_{i=1}^{m}\left(\lambda_{i}^{\prime}-\lambda_{i}\right) x_{i}^{T} x$ 的平均值</p><h2 id="支持向量机算法总结"><a href="#支持向量机算法总结" class="headerlink" title="支持向量机算法总结"></a>支持向量机算法总结</h2><ul><li>优点：<ul><li>解决高维特征的分类问题和回归问题很有效，在特征维度大于样本数时依然有很好的效果  </li><li>稀疏性：仅仅使用支持向量来做超平面的决策，无需依赖全部数据 </li><li>核函数可以很灵活的来解决各种非线性的分类回归问题 </li><li>样本量不是海量数据的时候，分类准确率高，泛化能力强</li></ul></li><li>缺点：<ul><li>如果特征维度远远大于样本数，则SVM表现一般 </li><li>SVM在样本量非常大，核函数映射维度非常高时，计算量过大，不太适合使用 </li><li>SVM对缺失数据敏感</li></ul></li></ul><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><p><code>In[1]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn <span class="keyword">as</span> sk</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line">%config InlineBackend.figure_format = <span class="string">'retina'</span></span><br></pre></td></tr></table></figure><h3 id="SVC-Support-Vector-Classificaiton-支持向量分类"><a href="#SVC-Support-Vector-Classificaiton-支持向量分类" class="headerlink" title="SVC: Support Vector Classificaiton 支持向量分类"></a>SVC: Support Vector Classificaiton 支持向量分类</h3><p><code>In[2]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC, LinearSVC</span><br></pre></td></tr></table></figure><ul><li>在libsvm的基础上实现</li><li>时间复杂度： more than $O(n^2)$</li><li>对于大的样本量（比如多于10000个样本），难以很好的scale</li><li>多类分类问题，是基于 OVO（one vs one）的算法</li><li>可以实现不同的kernel函数</li></ul><p><code>In[3]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#linear_svc = LinearSVC()</span></span><br><span class="line">linear_svc = SVC(kernel = <span class="string">"linear"</span>)</span><br><span class="line">print(linear_svc)</span><br></pre></td></tr></table></figure><p><code>Out[3]</code></p><pre><code>SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,  decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto_deprecated&#39;,  kernel=&#39;linear&#39;, max_iter=-1, probability=False, random_state=None,  shrinking=True, tol=0.001, verbose=False)</code></pre><p><code>In[4]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svc = SVC()</span><br><span class="line">print(svc)</span><br></pre></td></tr></table></figure><p><code>Out[4]</code></p><pre><code>SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,  decision_function_shape=&#39;ovr&#39;, degree=3, gamma=&#39;auto_deprecated&#39;,  kernel=&#39;rbf&#39;, max_iter=-1, probability=False, random_state=None,  shrinking=True, tol=0.001, verbose=False)</code></pre><ul><li>C : 浮点（float），默认值为1.0<script type="math/tex; mode=display">\begin{align}& J(\boldsymbol{w}) = \sum_{i=1}^m{\max(1-y_i{\boldsymbol{w}^T\boldsymbol{x}_i, 0)}}+\lambda \|\boldsymbol{w} \|^2 \\\Rightarrow \ \ & J(\boldsymbol{w}) = C\sum_{i=1}^m{\max(1-y_i{\boldsymbol{w}^T\boldsymbol{x}_i, 0)}}+ \|\boldsymbol{w} \|^2 \\\end{align}</script></li><li><p><strong>C是其他算法里正则化强度 $\lambda$ 的倒数，C越大，正则化强度越小， 容易过拟合</strong></p></li><li><p>kernel : 和函数，输入值是string,  默认值是 “rbf”（高斯），亦或是</p><ol><li><p>“linear”： 线性$\ \ k(x_1,x_2) = x_1^Tx_2$  </p></li><li><p>“poly”： 多项式 $\ k(x_1,x_2) = (x_1^Tx_2 + r)^d $  </p></li><li><p>“rbf”: 高斯$\ \ \ k(x_1,x_2) = e^{-\frac{|x_1-x_2|^2}{2\sigma^2}} = e^{-\gamma (x_1-x_2)^2}$  </p></li><li><p>”sigmoid“$\ \ \ \ k(x_1,x_2) = tanh(\beta x_1^Tx_2 + \theta), \beta &gt;0, \theta &lt;0$</p></li></ol></li></ul><ul><li><p>decision function: “ovr“（one vs rest） or ”ovo“（one vs one） 针对于多类分类：</p><ul><li><strong>ovr： 会有n_labels个分类器</strong></li><li><strong>ovo： 会有n_labels(n_labels-1)/2个分类器</strong></li></ul></li></ul><p><code>In[5]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_moons, make_circles, make_classification, make_blobs</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn.gaussian_process.kernels <span class="keyword">import</span> RBF</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> ListedColormap</span><br></pre></td></tr></table></figure><p><code>In[6]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X, y = make_classification(n_features = <span class="number">2</span>, n_redundant = <span class="number">0</span>, n_informative = <span class="number">2</span>, n_samples= <span class="number">200</span>,</span><br><span class="line">                           random_state = <span class="number">1</span>, n_clusters_per_class = <span class="number">1</span>)</span><br><span class="line">rng = np.random.RandomState(<span class="number">2</span>)</span><br><span class="line">X += <span class="number">2</span> * rng.uniform(size=X.shape)</span><br></pre></td></tr></table></figure><p><code>In[7]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(np.unique(y))</span><br></pre></td></tr></table></figure><pre><code>[0 1]</code></pre><p><code>In[8]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(X.shape)</span><br><span class="line">print(y.shape)</span><br></pre></td></tr></table></figure><pre><code>(200, 2)(200,)</code></pre><p><code>In[9]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cm = plt.cm.RdBu</span><br><span class="line">cm_bright = ListedColormap([<span class="string">'#FF0000'</span>, <span class="string">'#0000FF'</span>])</span><br></pre></td></tr></table></figure><p><code>In[10]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X[:,<span class="number">0</span>], X[:, <span class="number">1</span>], c = y)</span><br><span class="line">plt.xlabel(<span class="string">"x1"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"x2"</span>)</span><br></pre></td></tr></table></figure><pre><code>Text(0, 0.5, &#39;x2&#39;)</code></pre><p><img src="https://i.loli.net/2019/04/21/5cbc310c18910.png" alt="png"></p><h4 id="Linear-SVM"><a href="#Linear-SVM" class="headerlink" title="Linear SVM"></a>Linear SVM</h4><p><code>In[11]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线性核函数的支持向量机去训练样本</span></span><br><span class="line">C = <span class="number">0.1</span></span><br><span class="line">clf = SVC(kernel = <span class="string">"linear"</span>, C = C)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在训练之前对数据进行normalization</span></span><br><span class="line">X = StandardScaler().fit_transform(X)</span><br><span class="line"></span><br><span class="line">print(X.shape, y.shape)</span><br></pre></td></tr></table></figure><pre><code>(200, 2) (200,)</code></pre><p><code>In[12]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> precision_score, recall_score, f1_score, confusion_matrix</span><br><span class="line"><span class="keyword">from</span> mlxtend.plotting <span class="keyword">import</span> plot_decision_regions</span><br></pre></td></tr></table></figure><p><code>In[13]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%%time </span><br><span class="line">clf.fit(X, y)</span><br><span class="line">y_pred = clf.predict(X)</span><br></pre></td></tr></table></figure><pre><code>CPU times: user 2.32 ms, sys: 1.58 ms, total: 3.9 msWall time: 4.46 ms</code></pre><p><code>In[14]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">prec = precision_score(y_true = y, y_pred = y_pred, pos_label = <span class="number">1</span>)</span><br><span class="line">rec = recall_score(y_true = y, y_pred = y_pred, pos_label = <span class="number">1</span>)</span><br><span class="line">f1 = f1_score(y_true = y, y_pred = y_pred, pos_label = <span class="number">1</span>)</span><br><span class="line">print(<span class="string">"Precision score is : &#123;:.2f&#125;"</span>.format(prec))</span><br><span class="line">print(<span class="string">"Recall score is : &#123;:.2f&#125;"</span>.format(rec))</span><br><span class="line">print(<span class="string">"f1 score is : &#123;:.2f&#125;"</span>.format(f1))</span><br><span class="line">print(<span class="string">"Confusion matrix is :"</span>) </span><br><span class="line">print(confusion_matrix(y_pred = y_pred, y_true = y))</span><br></pre></td></tr></table></figure><pre><code>Precision score is : 0.88Recall score is : 0.85f1 score is : 0.87Confusion matrix is :[[90 11] [15 84]]</code></pre><p><code>In[15]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plot_decision_regions(X, y, clf = clf, colors = <span class="string">'orange,navy'</span>)</span><br><span class="line">plt.title(<span class="string">"SVM with linear kernel"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/21/5cbc310bf2d06.png" alt="png"></p><h4 id="SVM-with-rbf-kernel"><a href="#SVM-with-rbf-kernel" class="headerlink" title="SVM with rbf kernel"></a>SVM with rbf kernel</h4><p><code>In[16]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">C = <span class="number">0.1</span></span><br><span class="line"><span class="comment">#clf = SVC(kernel = "rbf", gamma = 2., C = C)</span></span><br><span class="line">clf = SVC(gamma = <span class="number">2.</span>, C = C)</span><br><span class="line"></span><br><span class="line">clf.fit(X, y)</span><br><span class="line">y_pred = clf.predict(X)</span><br><span class="line"></span><br><span class="line">prec = precision_score(y_true = y, y_pred = y_pred, pos_label = <span class="number">1</span>)</span><br><span class="line">rec = recall_score(y_true = y, y_pred = y_pred, pos_label = <span class="number">1</span>)</span><br><span class="line">f1 = f1_score(y_true = y, y_pred = y_pred, pos_label = <span class="number">1</span>)</span><br><span class="line">print(<span class="string">"Precision score is : &#123;:.2f&#125;"</span>.format(prec))</span><br><span class="line">print(<span class="string">"Recall score is : &#123;:.2f&#125;"</span>.format(rec))</span><br><span class="line">print(<span class="string">"f1 score is : &#123;:.2f&#125;"</span>.format(f1))</span><br><span class="line">print(<span class="string">"Confusion matrix is :"</span>) </span><br><span class="line">print(confusion_matrix(y_pred = y_pred, y_true = y))</span><br><span class="line"></span><br><span class="line">plot_decision_regions(X, y, clf = clf, colors = <span class="string">'orange,navy'</span>)</span><br><span class="line">plt.title(<span class="string">"SVM with rbf kernel"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>Precision score is : 0.85Recall score is : 0.86f1 score is : 0.85Confusion matrix is :[[86 15] [14 85]]</code></pre><p><img src="https://i.loli.net/2019/04/21/5cbc310bf38ed.png" alt="png"></p><p>接下来定义不同参数，对比不同的结果</p><p><code>In[17]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C_list = [<span class="number">0.1</span>, <span class="number">1.</span>, <span class="number">10.</span>]</span><br><span class="line">gamma_list = [<span class="number">0.2</span>, <span class="number">2.</span>, <span class="number">20.</span>]</span><br></pre></td></tr></table></figure><h5 id="SVM-高斯核函数参数1-C"><a href="#SVM-高斯核函数参数1-C" class="headerlink" title="SVM 高斯核函数参数1: C"></a>SVM 高斯核函数参数1: C</h5><ul><li>其中 C是惩罚系数，即对误差的宽容度</li><li>C 越小， 正则化强度越大，容易欠拟合</li><li>C 越大， 说明越不能容忍出现误差,容易过拟合</li></ul><p><code>In[18]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, C <span class="keyword">in</span> enumerate(C_list):</span><br><span class="line">    clf = SVC(C = C)</span><br><span class="line">    clf.fit(X, y)</span><br><span class="line">    <span class="comment">#y_pred = clf.predict(X)</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>, len(C_list), i + <span class="number">1</span>)</span><br><span class="line">    plot_decision_regions(X, y, clf = clf)</span><br><span class="line">    plt.title(<span class="string">"SVM with rbf kernel, C = &#123;:.4f&#125;"</span>.format(C))</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/21/5cbc310c26621.png" alt="png"></p><h5 id="SVM-高斯核函数参数2-gamma"><a href="#SVM-高斯核函数参数2-gamma" class="headerlink" title="SVM 高斯核函数参数2: gamma"></a>SVM 高斯核函数参数2: gamma</h5><ul><li>gamma是选择RBF函数作为kernel后，该函数自带的一个参数</li><li>隐含地决定了数据映射到新的特征空间后的分布</li><li>gamma越大，单个样本对整个分类超平面的影响比较大，整个模型的支持向量也会多， 过拟合</li><li>gamma值越小，单个样本对整个分类超平面的影响比较小，不容易被选择为支持向量，容易欠拟合<script type="math/tex; mode=display">k(x_1,x_2) = e^{-\frac{|x_1-x_2|^2}{2\sigma^2}} = e^{-\gamma (x_1-x_2)^2}</script></li></ul><p><code>In[19]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gamma_list = [<span class="number">0.05</span>, <span class="number">2.</span>, <span class="number">20.</span>]</span><br><span class="line">plt.figure(figsize = (<span class="number">15</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> i, gamma <span class="keyword">in</span> enumerate(gamma_list):</span><br><span class="line">    clf = SVC(gamma = gamma, C = <span class="number">1.0</span>)</span><br><span class="line">    clf.fit(X, y)</span><br><span class="line">    <span class="comment">#y_pred = clf.predict(X)</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>, len(C_list), i + <span class="number">1</span>)</span><br><span class="line">    plot_decision_regions(X, y, clf = clf)</span><br><span class="line">    plt.title(<span class="string">"SVM with rbf kernel, gamma = &#123;:.2f&#125;"</span>.format(gamma))</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/21/5cbc310c26fd3.png" alt="png"></p><h4 id="不同SVM核函数对比"><a href="#不同SVM核函数对比" class="headerlink" title="不同SVM核函数对比"></a>不同SVM核函数对比</h4><p><code>In[20]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">names = [ <span class="string">"Linear SVM"</span>, <span class="string">"rbf SVM"</span>, <span class="string">"Poly SVM"</span>, <span class="string">"Sigmoid SVM"</span>]</span><br><span class="line"></span><br><span class="line">models = [</span><br><span class="line">            SVC(kernel = <span class="string">"linear"</span>, C = C), </span><br><span class="line">            SVC(kernel = <span class="string">"rbf"</span>, gamma = <span class="number">2</span>, C = C), <span class="comment"># or SVC(gamma = 2, C = 1)</span></span><br><span class="line">            SVC(kernel = <span class="string">"poly"</span>, degree = <span class="number">5</span>, C = C),</span><br><span class="line">            SVC(kernel = <span class="string">"sigmoid"</span>, C = C)</span><br><span class="line">         ]</span><br><span class="line"></span><br><span class="line">figure = plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"><span class="keyword">assert</span> len(names) == len(models)</span><br><span class="line"><span class="keyword">for</span> i, (clf_name, clf) <span class="keyword">in</span> enumerate(zip(names, models)):</span><br><span class="line">    plt.subplot((len(models)+<span class="number">1</span>)/<span class="number">2</span>, <span class="number">2</span>, i + <span class="number">1</span>)</span><br><span class="line">    clf.fit(X, y)</span><br><span class="line">    plot_decision_regions(X, y, clf)</span><br><span class="line">    plt.title(clf_name, fontsize = <span class="number">12</span>)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/21/5cbc310c31cb7.png" alt="png"></p><h4 id="多类分类：multiclass-classficiation"><a href="#多类分类：multiclass-classficiation" class="headerlink" title="多类分类：multiclass classficiation"></a>多类分类：multiclass classficiation</h4><ul><li>OVO</li><li>OVR</li></ul><p><code>In[21]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.multiclass <span class="keyword">import</span> OneVsOneClassifier, OneVsRestClassifier</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X2, Y2 = make_blobs(n_samples=<span class="number">200</span>, n_features = <span class="number">2</span>, centers = <span class="number">5</span>, random_state=<span class="number">1</span>,cluster_std = <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><code>In[22]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(np.unique(Y2))</span><br></pre></td></tr></table></figure><pre><code>[0 1 2 3 4]</code></pre><p><code>In[23]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X2[:,<span class="number">0</span>], X2[:,<span class="number">1</span>], c = Y2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/21/5cbc310c1a556.png" alt="png"></p><p><code>In[24]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rbf_ovr = SVC(kernel = <span class="string">'rbf'</span>, decision_function_shape = <span class="string">"ovr"</span>, gamma=<span class="string">'auto'</span>)</span><br><span class="line"><span class="comment">#rbf_ovo = SVC(kernel = 'rbf', decision_function_shape = "ovo")</span></span><br><span class="line">rbf_ovo = OneVsOneClassifier(SVC(kernel = <span class="string">"rbf"</span>, gamma=<span class="string">'auto'</span>))</span><br><span class="line">linear_ovr = SVC(kernel = <span class="string">'linear'</span>, decision_function_shape = <span class="string">"ovr"</span>, gamma=<span class="string">'auto'</span>)</span><br><span class="line"><span class="comment">#linear_ovo = SVC(kernel = 'linear', decision_function_shape = "ovo")</span></span><br><span class="line">linear_ovo = OneVsOneClassifier(SVC(kernel = <span class="string">"linear"</span>))</span><br></pre></td></tr></table></figure><p><code>In[25]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gs = gridspec.GridSpec(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">clfs = [rbf_ovr, rbf_ovo, linear_ovr, linear_ovo]</span><br><span class="line">names = [<span class="string">"RBF SVM OVR"</span>, <span class="string">"RBF SVM OVO"</span>, <span class="string">"Linear SVM OVR"</span>, <span class="string">"Linear SVM OVO"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> clf, lab, grd <span class="keyword">in</span> zip(clfs, names, itertools.product([<span class="number">0</span>, <span class="number">1</span>], repeat=<span class="number">2</span>)):</span><br><span class="line">    ax = plt.subplot(gs[grd[<span class="number">0</span>], grd[<span class="number">1</span>]])</span><br><span class="line">    clf.fit(X2, Y2)</span><br><span class="line">    fig = plot_decision_regions(X=X2, y=Y2, clf=clf, legend=<span class="number">2</span>)</span><br><span class="line">    plt.title(lab)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/21/5cbc310c41c4c.png" alt="png"></p><h3 id="SVR-Support-Vector-Regression-支持向量回归"><a href="#SVR-Support-Vector-Regression-支持向量回归" class="headerlink" title="SVR: Support Vector Regression 支持向量回归"></a>SVR: Support Vector Regression 支持向量回归</h3><p><code>In[26]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br></pre></td></tr></table></figure><p><code>In[27]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据</span></span><br><span class="line">X = np.sort(<span class="number">5</span> * np.random.rand(<span class="number">40</span>, <span class="number">1</span>), axis=<span class="number">0</span>)</span><br><span class="line">y = np.sin(X).ravel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人为增加一些噪声</span></span><br><span class="line">y[::<span class="number">5</span>] += <span class="number">3</span> * (<span class="number">0.5</span> - np.random.rand(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.xlabel(<span class="string">"X"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/21/5cbc310bd8e38.png" alt="png"></p><p><code>In[28]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SVR 拟合数据</span></span><br><span class="line">C = <span class="number">1e3</span></span><br><span class="line">svr_rbf = SVR(kernel=<span class="string">'rbf'</span>, C = C, gamma = <span class="number">0.1</span>)</span><br><span class="line">svr_lin = SVR(kernel=<span class="string">'linear'</span>, C = C)</span><br><span class="line">svr_poly = SVR(kernel=<span class="string">'poly'</span>, C = C, degree = <span class="number">2</span>, gamma=<span class="string">'auto'</span>)</span><br><span class="line">y_rbf = svr_rbf.fit(X, y).predict(X)</span><br><span class="line">y_lin = svr_lin.fit(X, y).predict(X)</span><br><span class="line">y_poly = svr_poly.fit(X, y).predict(X)</span><br><span class="line"></span><br><span class="line">lw = <span class="number">4</span></span><br><span class="line">plt.figure(figsize = (<span class="number">10</span>,<span class="number">5</span>))</span><br><span class="line">plt.scatter(X, y, color=<span class="string">'darkorange'</span>, label=<span class="string">'data'</span>)</span><br><span class="line">plt.plot(X, y_rbf, color=<span class="string">'navy'</span>, lw = lw, label=<span class="string">'RBF model'</span>)</span><br><span class="line">plt.plot(X, y_lin, color=<span class="string">'c'</span>, lw = lw, label=<span class="string">'Linear model'</span>)</span><br><span class="line">plt.plot(X, y_poly, color=<span class="string">'cornflowerblue'</span>, lw=lw, label=<span class="string">'Polynomial model'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'data'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'target'</span>)</span><br><span class="line">plt.title(<span class="string">'Support Vector Regression'</span>)</span><br><span class="line">plt.legend(loc = <span class="string">'lower left'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/21/5cbc310c1e34e.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持向量机与上世纪90年代正式由Vapnik和Cortes正式发表，在文本分类任务中显示 出卓越性能，很快成为机器学习主流技术，直接掀起了2000年前后统计学习的高潮。&lt;/li&gt;
&lt;li&gt;支持向量机思想直观，但细节复杂，涵盖凸优化，核函数，拉格朗日算子等理论&lt;/li&gt;
&lt;li&gt;支持向量机 （support vector machine）： &lt;ul&gt;
&lt;li&gt;二分类模型，也可用于回归分析&lt;/li&gt;
&lt;li&gt;学习策略： 最大间隔化 &lt;/li&gt;
&lt;li&gt;凸优化，对偶，KKT条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Statistics" scheme="https://marara.xin/tags/Statistics/"/>
    
      <category term="Machine Learning" scheme="https://marara.xin/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统中的NDCG</title>
    <link href="https://marara.xin/2019/04/20/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84NDCG/"/>
    <id>https://marara.xin/2019/04/20/推荐系统中的NDCG/</id>
    <published>2019-04-20T11:02:51.318Z</published>
    <updated>2020-03-11T06:31:46.906Z</updated>
    
    <content type="html"><![CDATA[<p>NDCG则是考虑到评分的排序，说到NDCG就需要从CG开始说起。</p><p>CG（cumulative gain，累计增益）可以用于评价基于打分/评分的个性推荐系统。假设我们推荐 $k$ 个物品，这个推荐列表的 $CG_k$ 计算公式如下：</p><script type="math/tex; mode=display">C G_{k}=\sum_{i=1}^{k} \mathrm{rel}_{i}</script><a id="more"></a><p>$rel_i$ 表示第 $k$ 个物品的相关性或者评分。假设我们共推荐 $k$ 个电影，$rel_i$ 可以是用户对第 $i$ 部电影的评分。</p><p>比如豆瓣给用户推荐了五部电影，</p><script type="math/tex; mode=display">M_{1},\ M_{2},\ M_{3},\ M_{4}, \ M_{5}</script><p>该用户对这五部电影的评分分别是 5, 3, 2, 1, 2</p><p>那么这个推荐列表的CG等于：</p><script type="math/tex; mode=display">C G_{5}=5+3+2+1+2=13</script><p>CG没有考虑推荐的次序，在此基础之后我们引入对物品顺序的考虑，就有了DCG(discounted CG)，折扣累积增益。公式如下：</p><script type="math/tex; mode=display">D C G_{k}=\sum_{i=1}^{k} \frac{2^{\mathrm{rel}_{i}}-1}{\log _{2}(i+1)}</script><p>比如豆瓣给用户推荐了五部电影，</p><script type="math/tex; mode=display">M_{1},\ M_{2},\ M_{3},\ M_{4}, \ M_{5}</script><p>该用户对这五部电影的评分分别是 5, 3, 2, 1, 2</p><p>那么这个推荐列表的DCG等于：</p><script type="math/tex; mode=display">\begin{align}DCG_5&=\frac{2^5-1}{\log_2 2}+\frac{2^3-1}{\log_2 3}+\frac{2^2-1}{\log_2 4}+\frac{2^1-1}{\log_2 5}+\frac{2^2-1}{\log_2 6}\\&=31+4.4+1.5+0.4+1.2\\&=38.5\end{align}</script><p>DCG没有考虑到推荐列表和每个检索中真正有效结果个数，所以最后我们引入NDCG(normalized discounted CG)，顾名思义就是标准化之后的DCG。</p><script type="math/tex; mode=display">NDCG_k=\frac{DCG_k}{IDCG_k}</script><p>其中 $IDCG$ 是指 ideal DCG，也就是完美结果下的 DCG。</p><p>继续上面的例子，如果相关电影一共有7部</p><script type="math/tex; mode=display">M_{1},\ M_{2},\ M_{3},\ M_{4}, \ M_{5}, \ M_{6}, \ M_{7}</script><p>该用户对这七部电影的评分分别是</p><p>5, 3, 2, 1, 2 , 4, 0</p><p>把这7部电影按评分排序</p><p>5, 4, 3, 2, 2, 1, 0</p><p>这个情况下的完美DCG是</p><script type="math/tex; mode=display">\begin{align}IDCG_5&=\frac{2^5-1}{\log_2 2}+\frac{2^4-1}{\log_2 3}+\frac{2^3-1}{\log_2 4}+\frac{2^2-1}{\log_2 5}+\frac{2^2-1}{\log_2 6}\\&=31+9.5+3.5+1.3+1.2\\&=46.5\end{align}</script><p>所以</p><script type="math/tex; mode=display">NDCG_5 = \frac{DCG_5}{IDCG_5}=\frac{38.5}{46.5}=0.827</script><p>NDCG是0到1的数，越接近1说明推荐越准确。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NDCG则是考虑到评分的排序，说到NDCG就需要从CG开始说起。&lt;/p&gt;
&lt;p&gt;CG（cumulative gain，累计增益）可以用于评价基于打分/评分的个性推荐系统。假设我们推荐 $k$ 个物品，这个推荐列表的 $CG_k$ 计算公式如下：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
C G_{k}=\sum_{i=1}^{k} \mathrm{rel}_{i}&lt;/script&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Statistics" scheme="https://marara.xin/tags/Statistics/"/>
    
      <category term="Machine Learning" scheme="https://marara.xin/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>拟合的力道</title>
    <link href="https://marara.xin/2019/02/18/Overfitting_and_Underfitting_With_Machine_Learning_Algorithms/"/>
    <id>https://marara.xin/2019/02/18/Overfitting_and_Underfitting_With_Machine_Learning_Algorithms/</id>
    <published>2019-02-18T07:02:57.124Z</published>
    <updated>2019-02-20T10:18:48.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模型的拟合"><a href="#模型的拟合" class="headerlink" title="模型的拟合"></a>模型的拟合</h2><ol><li>拟合与过拟合</li><li>对抗过拟合：<ul><li>交叉检验</li><li>正则化L1,L2</li></ul></li><li>python实现</li><li>pipeline</li><li>方差的分解：<ul><li>离差平方总和 = 回归平方和+残差平方和 （ SST = SSR + SSE ）</li></ul></li><li>bias and variance分解（这里的bias和variance跟过拟合的bias和variance不一样）</li></ol><a id="more"></a><h2 id="1-拟合与过拟合"><a href="#1-拟合与过拟合" class="headerlink" title="1. 拟合与过拟合"></a>1. 拟合与过拟合</h2><ul><li>在训练模型时，涉及到选择与比较不同的模型在训练集和测试集的预测结果</li><li>这里有Bias与Variance</li></ul><h3 id="1-1-拟合："><a href="#1-1-拟合：" class="headerlink" title="1.1 拟合："></a>1.1 拟合：</h3><ul><li>抓住主要特征，主要规律，主要趋势，可用于同一总体的其他采样样本的结果预测</li></ul><p><img src="https://i.loli.net/2019/02/18/5c6a57658396b.gif" width="400"></p><h3 id="1-2-欠拟合："><a href="#1-2-欠拟合：" class="headerlink" title="1.2. 欠拟合："></a>1.2. 欠拟合：</h3><ul><li>模型不够复杂，漏掉了部分数据规律</li><li>high bias</li><li>增加模型复杂度<br><img src="https://i.loli.net/2019/02/18/5c6a5798326cc.png" width="800"></li></ul><h3 id="1-3-过拟合："><a href="#1-3-过拟合：" class="headerlink" title="1.3. 过拟合："></a>1.3. 过拟合：</h3><ul><li>模型过于复杂，把样本的部分随机误差当作了总体的数据规律，并用模型进行解释。这部分解释并不能推广到总体分布的其他样本中。</li><li>减少不必要的模型复杂度<br><img src="https://i.loli.net/2019/02/18/5c6a57984c129.png" width="800"></li></ul><h2 id="2-对抗过拟合"><a href="#2-对抗过拟合" class="headerlink" title="2. 对抗过拟合"></a>2. 对抗过拟合</h2><ul><li>交叉检验</li><li><p>正则化（regularization）</p><ul><li>L1</li><li>L2</li></ul></li><li><p>从验证训练结果入手：cross-validation<br><img src="https://i.loli.net/2019/02/18/5c6a5766146cb.png" width="700"></p></li><li><p>从限制模型复杂度入手：正则化（regularization）</p></li><li>以线性回归为例：<script type="math/tex; mode=display">Loss = \sum_{i=1}^N (y_i - \beta_0 - \sum_{j=1}{p}x_{ij}\beta_j)^2 \\</script>如果 $\beta_j$ 被限制在一个较小的范围，那么所对应的 $x_{ij}$ 对模型复杂度对影响就会减弱</li></ul><ul><li><p>L2 norm: $Ridge\ Method$</p><script type="math/tex; mode=display">\hat{\beta}^{Ridge} = argmin_{\beta}\sum_{i=1}^N (y_i - \beta_0 - \sum_{j=1}^{p}x_{ij}\beta_j)^2, \\subject \ to \ \sum_{j=1}^N \beta_j^2 \leqslant t,</script></li><li><p>L1 norm: $Lasso\ Method$</p><script type="math/tex; mode=display">\hat{\beta}^{Lasso} = argmin_{\beta}\sum_{i=1}^N (y_i - \beta_0 - \sum_{j=1}^{p}x_{ij}\beta_j)^2, \\subject \ to \ \sum_{j=1}^N \left \|{\beta_j}\right \| \leqslant t,</script></li></ul><p><img src="https://i.loli.net/2019/02/18/5c6a57661bb3c.png" width="600"></p><ul><li>$Lasso$ 的结果容易将系数减至0</li></ul><p><img src="https://i.loli.net/2019/02/18/5c6a579858cea.png" width="500"></p><ul><li>$Ridge$ 则是减小至非0值</li></ul><p><img src="https://i.loli.net/2019/02/18/5c6a57985ee73.png" width="500"></p><h2 id="3-python实现"><a href="#3-python实现" class="headerlink" title="3. python实现"></a>3. python实现</h2><ul><li>Cross Validation 交叉检验</li><li>L1, L2 正则化</li></ul><p><code>In[1]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br></pre></td></tr></table></figure><p><code>In[2]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">datasets.load_wine</span><br><span class="line">wine_data = datasets.load_wine()</span><br><span class="line">print((wine_data.feature_names))</span><br></pre></td></tr></table></figure><pre><code>[&#39;alcohol&#39;, &#39;malic_acid&#39;, &#39;ash&#39;, &#39;alcalinity_of_ash&#39;, &#39;magnesium&#39;, &#39;total_phenols&#39;, &#39;flavanoids&#39;, &#39;nonflavanoid_phenols&#39;, &#39;proanthocyanins&#39;, &#39;color_intensity&#39;, &#39;hue&#39;, &#39;od280/od315_of_diluted_wines&#39;, &#39;proline&#39;]</code></pre><p><code>In[3]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data_input = wine_data.data</span><br><span class="line">data_output = wine_data.target</span><br></pre></td></tr></table></figure><p><code>In[4]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score, log_loss, classification_report</span><br><span class="line">kf = KFold(<span class="number">4</span>, shuffle=<span class="keyword">True</span>)</span><br><span class="line">kf.get_n_splits(data_input)</span><br><span class="line">lr = LogisticRegression()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> train_index, test_index <span class="keyword">in</span> kf.split(data_input, data_output):</span><br><span class="line">    <span class="comment">#print(train_index, test_index)</span></span><br><span class="line">    lr.fit(data_input[train_index], data_output[train_index])</span><br><span class="line">    y_pre_lr = lr.predict(data_input[test_index])</span><br><span class="line">    y = data_output[test_index]</span><br><span class="line">    print((f1_score(y, y_pre_lr, average=<span class="keyword">None</span>)))</span><br></pre></td></tr></table></figure><pre><code>[0.97142857 0.96296296 1.        ][1.         0.95       0.92307692][0.96296296 0.93023256 0.88888889][0.96774194 0.96774194 1.        ]</code></pre><h3 id="3-1-对比不同模型的cross-validation结果"><a href="#3-1-对比不同模型的cross-validation结果" class="headerlink" title="3.1. 对比不同模型的cross-validation结果"></a>3.1. 对比不同模型的cross-validation结果</h3><p><code>In[5]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line">rf_class = RandomForestClassifier(n_estimators=<span class="number">10</span>)</span><br><span class="line">log_class = LogisticRegression()</span><br><span class="line">svm_class = svm.LinearSVC()</span><br></pre></td></tr></table></figure><p><code>In[6]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print((cross_val_score(</span><br><span class="line">    rf_class, data_input, data_output, scoring=<span class="string">'accuracy'</span>, cv=<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><pre><code>[0.8        0.95555556 1.         1.        ]</code></pre><p><code>In[7]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">accuracy = cross_val_score(</span><br><span class="line">    rf_class, data_input, data_output, scoring=<span class="string">'accuracy'</span>, cv=<span class="number">4</span>).mean() * <span class="number">100</span></span><br><span class="line">print((<span class="string">"Accuracy of Random Forests is: "</span>, accuracy))</span><br></pre></td></tr></table></figure><pre><code>(&#39;Accuracy of Random Forests is: &#39;, 95.0)</code></pre><p><code>In[8]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">accuracy = cross_val_score(</span><br><span class="line">    log_class, data_input, data_output, scoring=<span class="string">'accuracy'</span>, cv=<span class="number">4</span>).mean() * <span class="number">100</span></span><br><span class="line">print((<span class="string">"Accuracy of logistic is: "</span>, accuracy))</span><br></pre></td></tr></table></figure><pre><code>(&#39;Accuracy of logistic is: &#39;, 96.11111111111111)</code></pre><p><code>In[9]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">accuracy = cross_val_score(</span><br><span class="line">    svm_class, data_input, data_output, scoring=<span class="string">'accuracy'</span>, cv=<span class="number">4</span>).mean() * <span class="number">100</span></span><br><span class="line">print((<span class="string">"Accuracy of SVM is: "</span>, accuracy))</span><br></pre></td></tr></table></figure><pre><code>(&#39;Accuracy of SVM is: &#39;, 89.44444444444444)</code></pre><h3 id="3-2-正则化regularization"><a href="#3-2-正则化regularization" class="headerlink" title="3.2. 正则化regularization"></a>3.2. 正则化regularization</h3><p><code>In[10]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">%config InlineBackend.figure_format = <span class="string">'retina'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib.pylab <span class="keyword">import</span> rcParams</span><br><span class="line">rcParams[<span class="string">'figure.figsize'</span>] = <span class="number">10</span>, <span class="number">8</span></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1.4</span> * i * np.pi / <span class="number">180</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">300</span>, <span class="number">4</span>)])</span><br><span class="line">np.random.seed(<span class="number">20</span>)  <span class="comment">#随机数</span></span><br><span class="line">y = np.sin(x) + np.random.normal(<span class="number">0</span>, <span class="number">0.2</span>, len(x))</span><br><span class="line">data = pd.DataFrame(np.column_stack([x, y]), columns=[<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line">plt.plot(data[<span class="string">'x'</span>], data[<span class="string">'y'</span>], <span class="string">'.'</span>)</span><br></pre></td></tr></table></figure><p><code>Out[10]</code></p><p><img src="https://i.loli.net/2019/02/18/5c6a5765942b1.png" width="500"></p><p><code>In[11]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">16</span>):  <span class="comment">#power of 1 is already there</span></span><br><span class="line">    colname = <span class="string">'x_%d'</span> % i  <span class="comment">#new var will be x_power</span></span><br><span class="line">    data[colname] = data[<span class="string">'x'</span>]**i</span><br><span class="line">print((data.head()))</span><br></pre></td></tr></table></figure><pre><code>          x         y       x_2       x_3       x_4       x_5           x_6  \0  0.000000  0.176779  0.000000  0.000000  0.000000  0.000000  0.000000e+00   1  0.097738  0.136756  0.009553  0.000934  0.000091  0.000009  8.717508e-07   2  0.195477  0.265742  0.038211  0.007469  0.001460  0.000285  5.579205e-05   3  0.293215 -0.179621  0.085975  0.025209  0.007392  0.002167  6.355064e-04   4  0.390954  0.164104  0.152845  0.059755  0.023362  0.009133  3.570691e-03               x_7           x_8           x_9          x_10          x_11  \0  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00   1  8.520356e-08  8.327663e-09  8.139328e-10  7.955252e-11  7.775339e-12   2  1.090606e-05  2.131882e-06  4.167336e-07  8.146178e-08  1.592389e-08   3  1.863402e-04  5.463780e-05  1.602064e-05  4.697497e-06  1.377378e-06   4  1.395975e-03  5.457617e-04  2.133676e-04  8.341686e-05  3.261214e-05              x_12          x_13          x_14          x_15  0  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  1  7.599495e-13  7.427628e-14  7.259647e-15  7.095466e-16  2  3.112753e-09  6.084713e-10  1.189421e-10  2.325042e-11  3  4.038683e-07  1.184204e-07  3.472267e-08  1.018122e-08  4  1.274984e-05  4.984597e-06  1.948747e-06  7.618699e-07  </code></pre><p><code>In[12]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复杂度可变</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span><span class="params">(data, power, models_to_plot)</span>:</span></span><br><span class="line">    <span class="comment">#initialize predictors:</span></span><br><span class="line">    predictors = [<span class="string">'x'</span>]</span><br><span class="line">    <span class="keyword">if</span> power &gt;= <span class="number">2</span>:</span><br><span class="line">        predictors.extend([<span class="string">'x_%d'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, power + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Fit the model</span></span><br><span class="line">    linreg = LinearRegression(normalize=<span class="keyword">True</span>)</span><br><span class="line">    linreg.fit(data[predictors], data[<span class="string">'y'</span>])</span><br><span class="line">    y_pred = linreg.predict(data[predictors])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Check if a plot is to be made for the entered power</span></span><br><span class="line">    <span class="keyword">if</span> power <span class="keyword">in</span> models_to_plot:</span><br><span class="line">        plt.subplot(models_to_plot[power])</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.plot(data[<span class="string">'x'</span>], y_pred)</span><br><span class="line">        plt.plot(data[<span class="string">'x'</span>], data[<span class="string">'y'</span>], <span class="string">'.'</span>)</span><br><span class="line">        plt.title(<span class="string">'Plot for power: %d'</span> % power)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Return the result in pre-defined format</span></span><br><span class="line">    rss = sum((y_pred - data[<span class="string">'y'</span>])**<span class="number">2</span>)</span><br><span class="line">    ret = [rss]</span><br><span class="line">    ret.extend([linreg.intercept_])</span><br><span class="line">    ret.extend(linreg.coef_)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p><code>In[13]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">col = [<span class="string">'rss'</span>, <span class="string">'intercept'</span>] + [<span class="string">'coef_x_%d'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">16</span>)]</span><br><span class="line">ind = [<span class="string">'model_pow_%d'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">16</span>)]</span><br><span class="line">coef_matrix_simple = pd.DataFrame(index=ind, columns=col)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义作图的位置与模型的复杂度</span></span><br><span class="line">models_to_plot = &#123;<span class="number">1</span>: <span class="number">231</span>, <span class="number">3</span>: <span class="number">232</span>, <span class="number">6</span>: <span class="number">233</span>, <span class="number">8</span>: <span class="number">234</span>, <span class="number">11</span>: <span class="number">235</span>, <span class="number">14</span>: <span class="number">236</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#画出来</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">16</span>):</span><br><span class="line">    coef_matrix_simple.iloc[i - <span class="number">1</span>, <span class="number">0</span>:i + <span class="number">2</span>] = linear_regression(</span><br><span class="line">        data, power=i, models_to_plot=models_to_plot)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/18/5c6a57980ef71.png" alt="png"></p><h3 id="3-3-Ridge"><a href="#3-3-Ridge" class="headerlink" title="3.3. Ridge"></a>3.3. Ridge</h3><p><code>In[14]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ridge_regression</span><span class="params">(data, predictors, alpha, models_to_plot=&#123;&#125;)</span>:</span></span><br><span class="line">    <span class="comment">#Fit the model</span></span><br><span class="line">    ridgereg = Ridge(alpha=alpha, normalize=<span class="keyword">True</span>)</span><br><span class="line">    ridgereg.fit(data[predictors], data[<span class="string">'y'</span>])</span><br><span class="line">    y_pred = ridgereg.predict(data[predictors])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Check if a plot is to be made for the entered alpha</span></span><br><span class="line">    <span class="keyword">if</span> alpha <span class="keyword">in</span> models_to_plot:</span><br><span class="line">        plt.subplot(models_to_plot[alpha])</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.plot(data[<span class="string">'x'</span>], y_pred)</span><br><span class="line">        plt.plot(data[<span class="string">'x'</span>], data[<span class="string">'y'</span>], <span class="string">'.'</span>)</span><br><span class="line">        plt.title(<span class="string">r'Plot for $\alpha$: %.3g'</span> % alpha)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Return the result in pre-defined format</span></span><br><span class="line">    rss = sum((y_pred - data[<span class="string">'y'</span>])**<span class="number">2</span>)</span><br><span class="line">    ret = [rss]</span><br><span class="line">    ret.extend([ridgereg.intercept_])</span><br><span class="line">    ret.extend(ridgereg.coef_)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p><code>In[15]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">predictors = [<span class="string">'x'</span>]</span><br><span class="line">predictors.extend([<span class="string">'x_%d'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">16</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Set the different values of alpha to be tested</span></span><br><span class="line">alpha_ridge = [<span class="number">1e-15</span>, <span class="number">1e-10</span>, <span class="number">1e-8</span>, <span class="number">1e-4</span>, <span class="number">1e-3</span>, <span class="number">1e-2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Initialize the dataframe for storing coefficients.</span></span><br><span class="line">col = [<span class="string">'rss'</span>, <span class="string">'intercept'</span>] + [<span class="string">'coef_x_%d'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">16</span>)]</span><br><span class="line">ind = [<span class="string">'alpha_%.2g'</span> % alpha_ridge[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>)]</span><br><span class="line">coef_matrix_ridge = pd.DataFrame(index=ind, columns=col)</span><br><span class="line"></span><br><span class="line">models_to_plot = &#123;</span><br><span class="line">    <span class="number">1e-15</span>: <span class="number">231</span>,</span><br><span class="line">    <span class="number">1e-10</span>: <span class="number">232</span>,</span><br><span class="line">    <span class="number">1e-4</span>: <span class="number">233</span>,</span><br><span class="line">    <span class="number">1e-3</span>: <span class="number">234</span>,</span><br><span class="line">    <span class="number">1e-2</span>: <span class="number">235</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="number">236</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    coef_matrix_ridge.iloc[i, ] = ridge_regression(</span><br><span class="line">        data, predictors, alpha_ridge[i], models_to_plot)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/18/5c6a576623edc.png" alt="png"></p><h3 id="3-4-Lasso"><a href="#3-4-Lasso" class="headerlink" title="3.4. Lasso"></a>3.4. Lasso</h3><p><code>In[16]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line">s = <span class="string">r'$\alpha$'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lasso_regression</span><span class="params">(data, predictors, alpha, models_to_plot=&#123;&#125;)</span>:</span></span><br><span class="line">    <span class="comment">#Fit the model</span></span><br><span class="line">    lassoreg = Lasso(alpha=alpha, normalize=<span class="keyword">True</span>, max_iter=<span class="number">1e5</span>)</span><br><span class="line">    lassoreg.fit(data[predictors], data[<span class="string">'y'</span>])</span><br><span class="line">    y_pred = lassoreg.predict(data[predictors])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Check if a plot is to be made for the entered alpha</span></span><br><span class="line">    <span class="keyword">if</span> alpha <span class="keyword">in</span> models_to_plot:</span><br><span class="line">        plt.subplot(models_to_plot[alpha])</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.plot(data[<span class="string">'x'</span>], y_pred)</span><br><span class="line">        plt.plot(data[<span class="string">'x'</span>], data[<span class="string">'y'</span>], <span class="string">'.'</span>)</span><br><span class="line">        plt.title(<span class="string">r'Plot for $\alpha$: %.3g'</span> % alpha)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Return the result in pre-defined format</span></span><br><span class="line">    rss = sum((y_pred - data[<span class="string">'y'</span>])**<span class="number">2</span>)</span><br><span class="line">    ret = [rss]</span><br><span class="line">    ret.extend([lassoreg.intercept_])</span><br><span class="line">    ret.extend(lassoreg.coef_)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><p><code>In[17]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">predictors = [<span class="string">'x'</span>]</span><br><span class="line">predictors.extend([<span class="string">'x_%d'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">16</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Define the alpha values to test</span></span><br><span class="line">alpha_lasso = [<span class="number">1e-15</span>, <span class="number">1e-10</span>, <span class="number">1e-8</span>, <span class="number">1e-5</span>, <span class="number">1e-4</span>, <span class="number">1e-3</span>, <span class="number">1e-2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Initialize the dataframe to store coefficients</span></span><br><span class="line">col = [<span class="string">'rss'</span>, <span class="string">'intercept'</span>] + [<span class="string">'coef_x_%d'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">16</span>)]</span><br><span class="line">ind = [<span class="string">'alpha_%.2g'</span> % alpha_lasso[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>)]</span><br><span class="line">coef_matrix_lasso = pd.DataFrame(index=ind, columns=col)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Define the models to plot</span></span><br><span class="line">models_to_plot = &#123;</span><br><span class="line">    <span class="number">1e-10</span>: <span class="number">231</span>,</span><br><span class="line">    <span class="number">1e-5</span>: <span class="number">232</span>,</span><br><span class="line">    <span class="number">1e-4</span>: <span class="number">233</span>,</span><br><span class="line">    <span class="number">1e-3</span>: <span class="number">234</span>,</span><br><span class="line">    <span class="number">1e-2</span>: <span class="number">235</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">236</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#Iterate over the 10 alpha values:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    coef_matrix_lasso.iloc[i, ] = lasso_regression(</span><br><span class="line">        data, predictors, alpha_lasso[i], models_to_plot)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/18/5c6a57661c04a.png" alt="png"></p><p><code>In[18]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svm.LinearSVC(penalty=<span class="string">'l1'</span>)</span><br></pre></td></tr></table></figure><p><code>Out[18]</code></p><pre><code>LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,     intercept_scaling=1, loss=&#39;squared_hinge&#39;, max_iter=1000,     multi_class=&#39;ovr&#39;, penalty=&#39;l1&#39;, random_state=None, tol=0.0001,     verbose=0)</code></pre><h2 id="4-pipeline"><a href="#4-pipeline" class="headerlink" title="4. pipeline"></a>4. pipeline</h2><p><code>In[19]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline, Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br></pre></td></tr></table></figure><p><code>In[20]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iris = load_iris()</span><br></pre></td></tr></table></figure><p><code>In[21]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#classifier_pipeline = make_pipeline(preprocessing.StandardScaler(), svm.SVC(C=1))</span></span><br><span class="line">pipeline = Pipeline([(<span class="string">'scaler'</span>, preprocessing.StandardScaler()),</span><br><span class="line">                     (<span class="string">'clf'</span>, LogisticRegression())])</span><br><span class="line">scores = model_selection.cross_val_score(</span><br><span class="line">    pipeline, iris.data, iris.target, cv=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><code>In[22]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scores</span><br></pre></td></tr></table></figure><p><code>Out[22]</code></p><pre><code>array([0.88235294, 0.92156863, 0.89583333])</code></pre><p><code>In[23]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipeline.fit(iris.data, iris.target)</span><br></pre></td></tr></table></figure><p><code>Out[23]</code></p><pre><code>Pipeline(memory=None,     steps=[(&#39;scaler&#39;, StandardScaler(copy=True, with_mean=True, with_std=True)), (&#39;clf&#39;, LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,          intercept_scaling=1, max_iter=100, multi_class=&#39;warn&#39;,          n_jobs=None, penalty=&#39;l2&#39;, random_state=None, solver=&#39;warn&#39;,          tol=0.0001, verbose=0, warm_start=False))])</code></pre><h2 id="5-方差的分解"><a href="#5-方差的分解" class="headerlink" title="5. 方差的分解"></a>5. 方差的分解</h2><p><img src="https://i.loli.net/2019/02/18/5c6a579830e08.png" width="700"></p><ul><li><p>$t_i(x)$ 或者 $t(x)$ 是在 $x=x$ 时的观测点值</p></li><li><p>$y(x)$ 是在 $x=x$ 时的回归值</p></li></ul><script type="math/tex; mode=display">  \begin{align}  &\sum(t_i(x) - y(x))^2 = SSE \\  &\sum(y(x) - \bar{y})^2 = SSR \\  &\sum(t_i(x) - \bar{y})^2 = SST  \end{align}</script><p>  <img src="https://i.loli.net/2019/02/18/5c6a579831fdb.png" width="800"></p><h2 id="6-bias与variance的分解"><a href="#6-bias与variance的分解" class="headerlink" title="6. bias与variance的分解"></a>6. bias与variance的分解</h2><ul><li>专注于残差平方和，沿用经典教材的记法（Jordan, M., Kleinberg, J., &amp; Scho, B. (n.d.). Pattern Recognition and Machine Learning.）</li><li>$t_i(x)​$ 或者 $t(x)​$ 是在 $x=x​$ 时的观测点值</li><li>$y(x)$ 是在 $x=x$ 时的回归值</li></ul><script type="math/tex; mode=display">Loss = (y(x)-t_i(x))^2\\E[Loss]=\int\{y(x)-t(x)\}^2p(x,t)dtdx\\</script><ul><li>引入 $h(x) = \int t(x)p(t|x)dt$ 代表$t$在$x=x$的总体期望值，一般是未知的</li><li>代入分解<script type="math/tex; mode=display">\begin{align}E[Loss]&=\int \left[y(x)-h(x)+h(x)-t(x)\right]^2p(x,t(x))dtdx\\&=\int\left[y(x)-h(x)\right]^2p(x)dx+\int\left[h(x)-t(x)\right]^2p(x)dtdx + 2\int(y(x)-h(x))(h(x)-t(x))p(x,t(x))dtdx \\&=\int\left[y(x)-h(x)\right]^2p(x)dx+\int\left[h(x)-t(x)\right]^2p(x,t(x))dtdx \\\end{align}</script></li></ul><p><img src="https://i.loli.net/2019/02/18/5c6a5798366f1.png" width="700"></p><p><img src="https://i.loli.net/2019/02/18/5c6a579853df0.png" width="700"></p><ul><li><p>对于不同的样本集,求得的 $y(x;D)$ 会不同</p><ul><li>$y(x;D_1)$ </li><li>$y(x;D_2)$</li><li>$y(x;D_3)$</li><li>$y(x;D_4)$</li></ul></li><li><p>$h(x)​$ 是全样本在x=x的期望，不会随抽样不同而改变</p></li><li><p>取样本集 $ \{D1,D2,D3,D4\}$ 的 $y(x;D_i)$ 的期望</p><script type="math/tex; mode=display">\mathbb{E}_D[y(x;D)] = expectation \ of \ y(x) \ over \ different \ sample \ sets \{D1,D2,D3,D4\}</script></li><li><p>将 $E_D[y(x;D]​$ 引入 $\{y(x;D)-h(x)\}^2​$</p></li></ul><p><img src="https://i.loli.net/2019/02/18/5c6a5765b61ea.png" width="500"></p><ul><li><p>对不同的数据集 $ \{D1,D2,D3,D4 …\}$ 求期望<br><img src="https://i.loli.net/2019/02/18/5c6a5765b5c21.png" width="500"></p></li><li><p>代回$E[L]$<br><img src="https://i.loli.net/2019/02/18/5c6a576610347.png" width="500"></p></li><li><p>偏差：</p><ul><li><strong>偏差</strong>度量了学习算法的期望预测与真实结果的偏离程度, 刻画了<span style="color:blue">学习算法本身的拟合能力</span></li></ul></li><li>方差：<ul><li><strong>方差</strong>度量了同样大小的训练集的变动所导致的学习性能的变化, 刻画了<span style="color:blue">数据扰动所造成的影响</span></li></ul></li><li>噪音：<ul><li><strong>噪声</strong>表达了在当前任务上任何学习算法所能达到的期望泛化误差的下界, 刻画了<span style="color:blue">学习问题本身的难度</span></li></ul></li></ul><p><img src="https://i.loli.net/2019/02/18/5c6a57981b8ea.png" width="700"></p><script type="math/tex; mode=display">E(loss) = \int \{E_D[y(x;D)]-h(x)\}^2p(x)dx + \int E_D[\{y(x;D)-E_D[y(x;D)\}^2]p(x)dx + \int \{h(x)-t\}^2p(x,t)dxdt</script><p>这里的方差和偏差重点在于 <span style="color:blue">在有若干训练数据集的情况下</span> 训练出模型的预测结果的期望值和方差</p><h3 id="Bias与Variance的两难之间"><a href="#Bias与Variance的两难之间" class="headerlink" title="Bias与Variance的两难之间"></a>Bias与Variance的两难之间</h3><ul><li>使用不同复杂度的模型，会影响bias与variance的分布</li></ul><p><img src="http://images2015.cnblogs.com/blog/743682/201607/743682-20160709113930389-368203993.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模型的拟合&quot;&gt;&lt;a href=&quot;#模型的拟合&quot; class=&quot;headerlink&quot; title=&quot;模型的拟合&quot;&gt;&lt;/a&gt;模型的拟合&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;拟合与过拟合&lt;/li&gt;
&lt;li&gt;对抗过拟合：&lt;ul&gt;
&lt;li&gt;交叉检验&lt;/li&gt;
&lt;li&gt;正则化L1,L2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;python实现&lt;/li&gt;
&lt;li&gt;pipeline&lt;/li&gt;
&lt;li&gt;方差的分解：&lt;ul&gt;
&lt;li&gt;离差平方总和 = 回归平方和+残差平方和 （ SST = SSR + SSE ）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;bias and variance分解（这里的bias和variance跟过拟合的bias和variance不一样）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Statistics" scheme="https://marara.xin/tags/Statistics/"/>
    
      <category term="Machine Learning" scheme="https://marara.xin/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归与代价函数</title>
    <link href="https://marara.xin/2019/02/13/Logistic_regression/"/>
    <id>https://marara.xin/2019/02/13/Logistic_regression/</id>
    <published>2019-02-13T03:39:26.176Z</published>
    <updated>2019-02-17T07:51:12.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逻辑回归与线性回归"><a href="#逻辑回归与线性回归" class="headerlink" title="逻辑回归与线性回归"></a><em>逻辑回归与线性回归</em></h2><ul><li>线性回归：预测连续数值变量（明天上海的地面温度？）</li><li>逻辑回归：预测分类 (classification)（今天会不会考试？）</li><li>逻辑回归与线性回归有什么联系？</li><li>从一个例子说起：获取数据，判断恶意订房</li></ul><a id="more"></a><h2 id="1-从酒店订房说起"><a href="#1-从酒店订房说起" class="headerlink" title="1. 从酒店订房说起"></a>1. 从酒店订房说起</h2><ol><li><p>商家需要判断顾客是否会恶意订房</p></li><li><p>根据什么来判断？</p></li><li><p>利用信用值来判断是否会恶意订房</p></li></ol><p><img src="https://i.loli.net/2019/02/13/5c63afbb969c5.jpg" alt=""></p><h2 id="2-如何通过信用值等数据来预测恶意订房"><a href="#2-如何通过信用值等数据来预测恶意订房" class="headerlink" title="2. 如何通过信用值等数据来预测恶意订房"></a>2. 如何通过信用值等数据来预测恶意订房</h2><ul><li>输入值：信用值等连续型数字，取值范围为 $\left ( -\infty , +\infty \right )$ </li><li>输出值：正常订房的概率 $p$，取值范围为 $\left [ 0 , 1 \right ]$</li><li><span style="color:blue">当 $p&gt;阈值(0.5)$，判断顾客正常订房</span></li><li><span style="color:blue">当 $p \leqslant 阈值(0.5)$，判断顾客正常订房</span></li></ul><p>如果直接通过线性回归，发现由于输入输出值得范围不同，导致无法很好的进行映射。于是通过对输出值进行变换</p><ul><li>输入值：信用值等连续型数字，取值范围为 $\left ( -\infty , +\infty \right )$ </li><li>输出值：正常订房的概率 $p$，取值范围为 $\left [ 0 , 1 \right ]$<ul><li>通过 $\frac{p}{1-p}$ ，取值范围为 $\left [ 0 , +\infty \right )$ </li><li>进一步取对数 $ln\left (\frac{p}{1-p}  \right )$ ，取值范围为 $\left ( -\infty , +\infty \right )$ </li></ul></li></ul><script type="math/tex; mode=display">\begin{align}&ln\left (\frac{p}{1-p}  \right ) = wx+a\\&\Rightarrow  \frac{p}{1-p}=e^{wx+a}\\&\Rightarrow p=e^{wx+a}(1-p)=\frac{e^{wx+a}}{1+e^{wx+a}}\\\end{align}</script><script type="math/tex; mode=display">p=\frac{1}{1+e^{-wx-a}} \qquad \qquad x\in\left ( -\infty , +\infty \right )</script><p>通过回归，我们得到了如下的数据：</p><p><img src="https://i.loli.net/2019/02/13/5c63ad7090a8d.png" width="700"></p><p>进行拟合，对于这一种：<br><img src="https://i.loli.net/2019/02/13/5c63adc6820ec.png" width="700"><br>在拐点处无法求导，继而无法得到最值，于是我们选用平滑曲线代替<br><img src="https://i.loli.net/2019/02/13/5c63adc67f71c.png" width="700"></p><p>可问题又来了<br><img src="https://i.loli.net/2019/02/13/5c63ae7f9cb53.png" width="700"><br>不同的参数，得到的不同的拟合结果，我们应该选用哪一个来做最优解呢？</p><h2 id="3-寻找最合理的参数-——-Cost-Function"><a href="#3-寻找最合理的参数-——-Cost-Function" class="headerlink" title="3. 寻找最合理的参数 —— Cost Function"></a>3. 寻找最合理的参数 —— Cost Function</h2><p>我们的目的，是找到一个能让模型拟合结果更好的参数。方法就是设计一个<strong><em>Cost Function</em></strong>，让它来决定什么是好的模型。</p><blockquote><p>以下用 $h_\theta (x)$ 来指代<code>sigmoid function:</code>  $\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}$</p></blockquote><p>一个好的模型，<strong><em>Cost Function</em></strong>要尽量小</p><ul><li>真值 $y=1$ ，$h_\theta (x)$ 会尽量大</li><li>真值 $y=0$ ，$h_\theta (x)$ 会尽量小</li></ul><p>如此得到一个<strong><em>Cost Function</em></strong>：</p><script type="math/tex; mode=display">Cost(h_\theta (x), y)=\begin{cases}-ln(h_\theta (x)) &  & y=1\\ -ln(1-h_\theta (x)) &  & y=0\\ \end{cases}</script><p>即：</p><script type="math/tex; mode=display">Cost(\theta) = -(1-y)ln(1-h_\theta (x))-yln(h_\theta (x))</script><p>对于 $n$ 个数据，进行求和：</p><script type="math/tex; mode=display">J(\theta) = \sum_{i=1}^{n}\left[-(1-y^{i})ln(1-h_\theta(x^{i}))-y^{i}ln(h_\theta (x^{i}))\right]</script><ul><li>$x^i$ 是第 $i$ 个人的信用值，$y^i$ 是最后订房与否的指示数</li><li>$i=1$ 表示预定，$i=0$ 表示未预定</li><li>$\theta$ 是参数，作为向量的表示方法，因为参数很可能不止一个</li></ul><p>根据这个 <strong><em>Cost Function</em></strong>，寻找能让其最小的 $\theta \in \left \{ \theta_1 , \theta_2  \right \}$，通过使其一阶导数为0，二阶导数为正，从而获取 $min \theta$：</p><script type="math/tex; mode=display">\begin{align}\frac{\partial J(\theta)}{\partial \theta_j} &= \frac{\partial }{\partial \theta_j }\sum_{i=1}^{n}\left [-(1-y^{i})ln(1-h_\theta(x^{i}))-y^{i}ln(h_\theta (x^{i}))\right ]\\&=-\sum_{i=1}^{n}\left [(1-y^{i})\frac{\partial ln(1-h_\theta (x^{i}))}{\partial \theta _j}+y^{i}\frac{\partial ln(h_\theta (x^{i}))}{\partial \theta _j}\right ]\\&=-\sum_{i=1}^{n}\left [(1-y^{i})\frac{1}{ln(1-h_\theta (x^{i}))} \frac{\partial (1-h_\theta (x^{i}))}{\partial \theta _j}+y^{i}\frac{1}{h_\theta (x^{i})}\frac{\partial (h_\theta (x^{i}))}{\partial \theta _j}\right]\\&=-\sum_{i=1}^{n}\left [-(1-y^{i})\frac{h_\theta (x^{i})[1-h_\theta (x^{i})]}{1-h_\theta (x^{i})}\frac{\partial (\theta x^{i})}{\partial \theta_j}+y^{i}\frac{h_\theta (x^{i})[1-h_\theta (x^{i})]}{h_\theta (x^{i})}\frac{\partial (\theta x^{i})}{\partial \theta_j}\right]\\&=-\sum_{i=1}^{n}\left [-(1-y^{i})h_\theta (x^{i})+y^{i}(1-h_\theta (x^{i}))\right]\frac{\partial (\theta x^{i})}{\partial \theta_j}\\&=-\sum_{i=1}^{n}\left [-h_\theta (x^{i})+y^{i}\right]x_{j}^{i}\end{align}</script><blockquote><p>其中</p></blockquote><script type="math/tex; mode=display">\begin{align}\frac{\partial \left(h_\theta \left (x^{i}\right)\right)}{\partial \theta _1} &=\frac{\partial }{\partial \theta _1}\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}} \\&=-\frac{1}{(1+e^{-\theta _1x^{i}-\theta _2})^{2}}\frac{\partial \left(1+e^{-\theta _1x^{i}-\theta _2}\right)}{\partial \theta _1}\\&=\frac{x^{i}e^{-\theta _1x^{i}-\theta _2}}{\left(1+e^{-\theta _1x^{i}-\theta _2}\right)^{2}}\\&=x^{i}\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}\left(1-\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}\right) \\&=x^{i}h_\theta \left (x^{i}\right)\left[1-h_\theta \left(x^{i}\right)\right]\end{align}</script><script type="math/tex; mode=display">\begin{align}\frac{\partial \left(h_\theta \left(x^{i}\right)\right)}{\partial \theta _2} &=\frac{\partial }{\partial \theta _2}\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}} \\&=-\frac{1}{\left(1+e^{-\theta _1x^{i}-\theta _2}\right)^{2}}\frac{\partial \left(1+e^{-\theta _1x^{i}-\theta _2}\right)}{\partial \theta _2}\\&=\frac{e^{-\theta _1x^{i}-\theta _2}}{\left(1+e^{-\theta _1x^{i}-\theta _2}\right)^{2}}\\&=\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}\left(1-\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}\right) \\&=h_\theta (x^{i})\left[1-h_\theta \left(x^{i}\right)\right]\end{align}</script><p>对于所有的 $\theta_j$，都需要有：</p><script type="math/tex; mode=display">\frac{\partial J(\theta)}{\partial \theta_j}=-\sum_{i=1}^{n}\left[-h_\theta \left(x^{i}\right)+y^{i}\right]x_{j}^{i}\qquad \qquad j=1,2,...</script><p>理论上，可以通过该方程求解各个 $\theta_j$，但由于 $h_\theta (x^i)$ 的存在，不易求出解析解，需要通过其他方法，计算出 $\theta_j$ 的近似解。</p><h3 id="3-1-使用sklearn自带函数求解逻辑回归参数"><a href="#3-1-使用sklearn自带函数求解逻辑回归参数" class="headerlink" title="3.1. 使用sklearn自带函数求解逻辑回归参数"></a>3.1. 使用<code>sklearn</code>自带函数求解逻辑回归参数</h3><p><code>In[1]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line">data = pd.read_csv(<span class="string">'Score_Pass.csv'</span>)</span><br><span class="line">X, y = np.array(data[<span class="string">'Score'</span>]), np.array(data[<span class="string">'Pass/N'</span>])</span><br><span class="line">x = X / np.max(X)</span><br><span class="line">lr = LogisticRegression(solver=<span class="string">'lbfgs'</span>)  <span class="comment">#solver 可选默认，可选'newton-cg'，有区别</span></span><br><span class="line">lr.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y)</span><br><span class="line">print(<span class="string">'slope = %f, interception= %f '</span> % (lr.coef_, lr.intercept_))</span><br><span class="line">pre_y = lr.predict_proba(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">pre_y_1 = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> pre_y]</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.scatter(x, pre_y_1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slope = 11.702751, interception= -8.900218</span><br></pre></td></tr></table></figure><p><code>Out[1]</code></p><p><img src="https://i.loli.net/2019/02/14/5c64f7d9dff97.png" alt="output_2_2"></p><p><code>In[2]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">%config InlineBackend.figure_format = <span class="string">'retina'</span></span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">12</span>)</span><br><span class="line">num_observations = <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">x1 = np.random.multivariate_normal([<span class="number">0</span>, <span class="number">0</span>], [[<span class="number">1</span>, <span class="number">.75</span>], [<span class="number">.75</span>, <span class="number">1</span>]],</span><br><span class="line">                                   num_observations)</span><br><span class="line">x2 = np.random.multivariate_normal([<span class="number">1</span>, <span class="number">4</span>], [[<span class="number">1</span>, <span class="number">.75</span>], [<span class="number">.75</span>, <span class="number">1</span>]],</span><br><span class="line">                                   num_observations)</span><br><span class="line"></span><br><span class="line">simulated_separableish_features = np.vstack((x1, x2)).astype(np.float32)</span><br><span class="line">simulated_labels = np.hstack((np.zeros(num_observations),</span><br><span class="line">                              np.ones(num_observations)))</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.scatter(</span><br><span class="line">    simulated_separableish_features[:, <span class="number">0</span>],</span><br><span class="line">    simulated_separableish_features[:, <span class="number">1</span>],</span><br><span class="line">    c=simulated_labels,</span><br><span class="line">    alpha=<span class="number">.4</span>)</span><br></pre></td></tr></table></figure><p><code>Out[2]</code></p><p><img src="https://i.loli.net/2019/02/14/5c64f7b27dd6e.png" alt="output_3_1"></p><p><code>In[3]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">clf = LogisticRegression(fit_intercept=<span class="keyword">True</span>, C=<span class="number">1e15</span>)</span><br><span class="line">clf.fit(simulated_separableish_features, simulated_labels)</span><br><span class="line"></span><br><span class="line">print(</span><br><span class="line">    clf.coef_,</span><br><span class="line">    clf.intercept_,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[-5.02712572  8.23286799]] [-13.99400797]</span><br></pre></td></tr></table></figure><h3 id="3-2-使用梯度下降法求解逻辑回归参数"><a href="#3-2-使用梯度下降法求解逻辑回归参数" class="headerlink" title="3.2. 使用梯度下降法求解逻辑回归参数"></a>3.2. 使用梯度下降法求解逻辑回归参数</h3><blockquote><p>沿着J(x)的下降方向对 $\theta$ 进行更新</p></blockquote><script type="math/tex; mode=display">\begin{align}  \theta_j &=\theta_j - \frac{\partial J(\theta)}{\partial \theta_j}\\  &=\theta_j + \alpha\frac{1}{m}\sum_{i=1}^m\left[ y^{(i)}-h_\theta\left(x^{(i)}\right)\right]\,x_j^{(i)}\\  h_\theta\left(x^{(i)}\right) &= \frac{1}{1+e^{\sum_{j=1}^{n}-\theta_j x_j^{(i)}}}  \end{align}</script><p>$i$ 是样本点的标号，$j$ 是自变量个数的标号，在我们的案例中，$i$ 取1至10000，$j$ 只取 $1,2,3$（有常量参数）</p><p><code>In[4]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_eg</span><span class="params">(x1, x2, theta_1, theta_2, theta_3)</span>:</span></span><br><span class="line">    z = (theta_1 * x1 + theta_2 * x2 + theta_3).astype(<span class="string">"float_"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-z))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def Cost(x, y, theta_1, theta_2):</span></span><br><span class="line"><span class="comment">#     sigmoid_probs = sigmoid(x, theta_1, theta_2)</span></span><br><span class="line"><span class="comment">#     return -np.mean(y * np.log(sigmoid_probs)</span></span><br><span class="line"><span class="comment">#                   + (1 - y) * np.log(1 - sigmoid_probs))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_eg</span><span class="params">(x1, x2, y, theta_1, theta_2, theta_3)</span>:</span></span><br><span class="line">    sigmoid_probs = sigmoid_eg(x1, x2, theta_1, theta_2, theta_3)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/len(y)*np.sum((y - sigmoid_probs)*x1),\</span><br><span class="line"><span class="number">1</span>/len(y)*np.sum((y - sigmoid_probs)*x2),\</span><br><span class="line"><span class="number">1</span>/len(y)*np.sum((y - sigmoid_probs))</span><br></pre></td></tr></table></figure><p><code>In[5]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GradDe_eg</span><span class="params">(x1, x2, y, Max_Loop=<span class="number">20</span>, alpha=<span class="number">0.1</span>)</span>:</span></span><br><span class="line">    <span class="comment">#alpha = 0.00000001</span></span><br><span class="line">    <span class="comment">#Max_Loop = 200</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Initialize Cost &amp; parameters</span></span><br><span class="line">    theta_1 = <span class="number">0.1</span></span><br><span class="line">    theta_2 = <span class="number">-0.4</span></span><br><span class="line">    theta_3 = <span class="number">0.56</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(Max_Loop):</span><br><span class="line">        delta1, delta2, delta3 = gradient_eg(x1, x2, y, theta_1, theta_2,</span><br><span class="line">                                             theta_3)</span><br><span class="line">        <span class="comment">#delta1 = alpha * np.sum((y-sigmoid(X, theta_1, theta_2)) * X)</span></span><br><span class="line">        <span class="comment">#delta2 = alpha * np.sum(y-sigmoid(X, theta_1, theta_2))</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># alpha is the step size used for each gradient descent.</span></span><br><span class="line">        theta_1 = theta_1 + alpha * delta1</span><br><span class="line">        theta_2 = theta_2 + alpha * delta2</span><br><span class="line">        theta_3 = theta_3 + alpha * delta3</span><br><span class="line">        <span class="keyword">if</span> l % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#print('cost = %f'%Cost(x, y, theta_1, theta_2))</span></span><br><span class="line">            print(<span class="string">'delta%d ='</span> % (l), [delta1, delta2, delta3])</span><br><span class="line">            print(<span class="string">'theta%d ='</span> % (l), [theta_1, theta_2, theta_3], <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#if l % 1000 == 0:</span></span><br><span class="line">        <span class="comment">#    print(Cost(X, y, theta_1, theta_2), gradient(X,y,theta_1, theta_2),delta1,delta2)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [theta_1, theta_2, theta_3]</span><br></pre></td></tr></table></figure><p><code>In[6]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">weights_GD = GradDe_eg(simulated_separableish_features[:,<span class="number">0</span>],\</span><br><span class="line">                    simulated_separableish_features[:,<span class="number">1</span>],\</span><br><span class="line">                    simulated_labels,<span class="number">200000</span>,<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">delta0 = [0.3961871800720364, 1.5009373411273292, 0.041322520564441766]</span><br><span class="line">theta0 = [0.4565684620648328, 0.9508436070145964, 0.5971902685079976] </span><br><span class="line"></span><br><span class="line">delta1000 = [-0.0007704583774520729, 0.001169577110841499, -0.00204740502940396]</span><br><span class="line">theta1000 = [-2.6636329924890543, 4.471657694939081, -7.450004128248804] </span><br><span class="line"></span><br><span class="line">delta2000 = [-0.00040699408309612366, 0.0006346501021336131, -0.0011069894635109044]</span><br><span class="line">theta2000 = [-3.1583938131200133, 5.233346806623855, -8.780787027655295]  </span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">delta198000 = [-3.64302204385325e-09, -9.997352543678063e-09, -5.087131606984486e-09]</span><br><span class="line">theta198000 = [-5.059009978575051, 8.289579861025118, -14.09229413937621] </span><br><span class="line"></span><br><span class="line">delta199000 = [-1.8617213591198835e-09, -2.5363573357140016e-09, -1.3400418549025517e-09]</span><br><span class="line">theta199000 = [-5.059010268875257, 8.289579870388907, -14.09229451979946]</span><br></pre></td></tr></table></figure><p><code>In[7]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weights_GD</span><br></pre></td></tr></table></figure><p><code>Out[7]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[-5.059010268463914, 8.289579874245822, -14.092294984033252]</span><br></pre></td></tr></table></figure><h3 id="3-3-使用牛顿法求解逻辑回归参数"><a href="#3-3-使用牛顿法求解逻辑回归参数" class="headerlink" title="3.3. 使用牛顿法求解逻辑回归参数"></a>3.3. 使用牛顿法求解逻辑回归参数</h3><script type="math/tex; mode=display">\begin{align}x_{n+1} &= x_{n} - \frac{f(x_{n})}{f’(x_{n})} \\x_{n+2} &= x_{n+1} - \frac{f(x_{n+1})}{f’(x_{n+1})} \\\end{align}</script><p><img src="https://i.loli.net/2019/02/14/5c64f8064bb8a.gif" width="600"></p><p>我们要找的是一阶导数为 $0$ 的点，所以 我们的 $f(x)=J’(x)$，我们的牛顿迭代公式为：</p><script type="math/tex; mode=display">\begin{align}x_{n+1} &= x_{n} - \frac{J'(x_{n})}{J''(x_{n})} \\x_{n+2} &= x_{n+1} - \frac{J'(x_{n+1})}{J''(x_{n+1})}\end{align}</script><p>在多元的情况下，$J’’(x_{n})=H_{\ell(\hat{\theta})}$ 海塞矩阵：</p><script type="math/tex; mode=display">H_{\ell(\hat{\theta})} = \begin{bmatrix}\begin{split}\frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{1}}}   & \frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{2}}} \\\frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{1}}}   &\frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{2}}} \\\end{split}\end{bmatrix}</script><p>三阶海塞矩阵形式为：</p><script type="math/tex; mode=display">H_{\ell(\hat{\theta})} = \begin{bmatrix}\begin{split}\frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{1}}}   & \frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{2}}} &\frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{3}}} \\\frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{1}}}   &\frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{2}}} &\frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{3}}}\\\frac{\partial^{2}{J}}{\partial{\theta_{3}}\partial{\theta_{1}}}   &\frac{\partial^{2}{J}}{\partial{\theta_{3}}\partial{\theta_{2}}}&\frac{\partial^{2}{J}}{\partial{\theta_{3}}\partial{\theta_{3}}}\\\end{split}\end{bmatrix}</script><script type="math/tex; mode=display">H_{\ell(\hat{\theta})} = \begin{bmatrix}\begin{split}\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,1}x_{i,1},\ &\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,1}x_{i,2},\ &\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,1}\\\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,2}x_{i,1},\ &\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,2}x_{i,2},\ &\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,2},\\\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,1},\ &\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,2},\ &\sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,3}\\\end{split}\end{bmatrix} \\</script><script type="math/tex; mode=display">\begin{align}&h_{\theta}(x_i) = \frac{1}{1 + e^{-z}}\\&z = \theta_{1}x_{i,1} + \theta_{2}x_{i,2}+\theta_3\end{align}</script><p>一阶导数</p><script type="math/tex; mode=display">\nabla J = -\begin{pmatrix}\sum_{i=1}^{n}(y_{i} - h_{\theta}(x_{i}))x_{i,1}\\ \sum_{i=1}^{n}(y_{i} - h_{\theta}(x_{i}))x_{i,2}\\ \sum_{i=1}^{n}(y_{i} - h_{\theta}(x_{i}))x_{i,3}\end{pmatrix}</script><script type="math/tex; mode=display">\theta_j=\theta_j - H^{-1}\nabla J(\theta)</script><p><code>In[8]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_eg</span><span class="params">(x1, x2, theta_1, theta_2, theta_3)</span>:</span></span><br><span class="line">    z = (theta_1 * x1 + theta_2 * x2 + theta_3).astype(<span class="string">"float_"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-z))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Cost</span><span class="params">(x1, x2, y, theta_1, theta_2, theta_3)</span>:</span></span><br><span class="line">    sigmoid_probs = sigmoid_eg(x1, x2, theta_1, theta_2, theta_3)</span><br><span class="line">    <span class="keyword">return</span> -np.mean(y * np.log(sigmoid_probs) +</span><br><span class="line">                    (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - sigmoid_probs))</span><br></pre></td></tr></table></figure><p><code>In[9]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_nt</span><span class="params">(x1, x2, y, theta_1, theta_2, theta_3)</span>:</span></span><br><span class="line">    sigmoid_probs = sigmoid_eg(x1, x2, theta_1, theta_2, theta_3)</span><br><span class="line">    <span class="keyword">return</span> np.array([</span><br><span class="line">        np.sum((y - sigmoid_probs) * x1),</span><br><span class="line">        np.sum((y - sigmoid_probs) * x2),</span><br><span class="line">        np.sum(y - sigmoid_probs)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p><code>In[10]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hessian</span><span class="params">(x1, x2, y, theta_1, theta_2, theta_3)</span>:</span></span><br><span class="line">    sigmoid_probs = sigmoid_eg(x1, x2, theta_1, theta_2, theta_3)</span><br><span class="line">    d1 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)) * x1 * x1)</span><br><span class="line">    d2 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)) * x1 * x2)</span><br><span class="line">    d3 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)) * x1)</span><br><span class="line">    d4 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)) * x2 * x1)</span><br><span class="line">    d5 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)) * x2 * x2)</span><br><span class="line">    d6 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)) * x2)</span><br><span class="line">    d7 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)) * x1)</span><br><span class="line">    d8 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)) * x2)</span><br><span class="line">    d9 = np.sum((sigmoid_probs * (<span class="number">1</span> - sigmoid_probs)))</span><br><span class="line">    H = np.array([[d1, d2, d3], [d4, d5, d6], [d7, d8, d9]])</span><br><span class="line">    <span class="keyword">return</span> H</span><br></pre></td></tr></table></figure><p><code>In[11]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">theta_1 = <span class="number">0.001</span></span><br><span class="line">theta_2 = <span class="number">-0.4</span></span><br><span class="line">theta_3 = <span class="number">0.6</span></span><br><span class="line">sigmoid_probs = sigmoid_eg(simulated_separableish_features[:,<span class="number">0</span>],\</span><br><span class="line">                    simulated_separableish_features[:,<span class="number">1</span>],\</span><br><span class="line">                     theta_1,theta_2,theta_3)</span><br><span class="line"></span><br><span class="line">sigmoid_probs</span><br></pre></td></tr></table></figure><p><code>Out[11]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([0.70539901, 0.71740128, 0.75001283, ..., 0.25536395, 0.25133316,</span><br><span class="line">       0.20942065])</span><br></pre></td></tr></table></figure><p><code>In[12]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newtons_method</span><span class="params">(x1, x2, y)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize Cost &amp; parameters</span></span><br><span class="line">    theta_1 = <span class="number">0.001</span></span><br><span class="line">    theta_2 = <span class="number">-0.4</span></span><br><span class="line">    theta_3 = <span class="number">0.6</span></span><br><span class="line">    delta_l = np.Infinity</span><br><span class="line">    l = Cost(x1, x2, y, theta_1, theta_2, theta_3)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Convergence Conditions</span></span><br><span class="line">    δ = <span class="number">.0000000001</span></span><br><span class="line">    max_iterations = <span class="number">15</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> abs(delta_l) &gt; δ <span class="keyword">and</span> i &lt; max_iterations:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        g = gradient_nt(x1, x2, y, theta_1, theta_2, theta_3)</span><br><span class="line">        hess = hessian(x1, x2, y, theta_1, theta_2, theta_3)</span><br><span class="line">        H_inv = np.linalg.inv(hess)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># @ is syntactic sugar for np.dot(H_inv, g.T)¹</span></span><br><span class="line">        delta = H_inv @ g.T</span><br><span class="line">        delta_theta_1 = delta[<span class="number">0</span>]</span><br><span class="line">        delta_theta_2 = delta[<span class="number">1</span>]</span><br><span class="line">        delta_theta_3 = delta[<span class="number">2</span>]</span><br><span class="line">        print(theta_1, theta_2, theta_3, l, g)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform our update step</span></span><br><span class="line">        theta_1 += delta_theta_1</span><br><span class="line">        theta_2 += delta_theta_2</span><br><span class="line">        theta_3 += delta_theta_3</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Update the log-likelihood at each iteration</span></span><br><span class="line">        l_new = Cost(x1, x2, y, theta_1, theta_2, theta_3)</span><br><span class="line">        delta_l = l - l_new</span><br><span class="line">        l = l_new</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> np.array([theta_1, theta_2, theta_3])</span><br></pre></td></tr></table></figure><p><code>In[13]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">weights_NT = newtons_method(simulated_separableish_features[:,<span class="number">0</span>],\</span><br><span class="line">                    simulated_separableish_features[:,<span class="number">1</span>],\</span><br><span class="line">                    simulated_labels)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0.001 -0.4 0.6 1.192232682683846 [ 4203.81624265 15339.64896586   425.24295633]</span><br><span class="line">-0.5323055089899444 1.3654730366188175 -2.213077389806385 0.1268005198001985 [  -4.87460157  917.75831422 -229.19748353]</span><br><span class="line">-1.1017906890766926 2.1170684289582935 -3.515199454248499 0.06344214919739537 [  9.11552841 372.53112984 -82.41612615]</span><br><span class="line">-1.696350075213766 2.9567826609247536 -4.958577211933369 0.0359808048849091 [  7.25193544 153.26328814 -30.62002723]</span><br><span class="line">-2.3598703977461986 3.9351755787400005 -6.633652721276137 0.023305245309678077 [  4.99551386  64.01150281 -11.18719616]</span><br><span class="line">-3.102101701476835 5.077389660723291 -8.586610622518707 0.017443703519444794 [ 3.20603557 26.54120782 -3.88451216]</span><br><span class="line">-3.8866316214728123 6.334661214553187 -10.738329272756982 0.014970682152691529 [ 1.76384655 10.23918884 -1.21513341]</span><br><span class="line">-4.578746773357871 7.479180436760244 -12.700646487249276 0.014194607302215922 [ 0.69308352  3.13228017 -0.30245818]</span><br><span class="line">-4.96926037381912 8.137065370724404 -13.830223818356856 0.014076397801702743 [ 0.13170341  0.51575348 -0.0430004 ]</span><br><span class="line">-5.055692120582939 8.28392101239704 -14.082565688206492 0.014072547126520205 [ 0.00514173  0.01873735 -0.00152877]</span><br><span class="line">-5.059007231550736 8.28957481482966 -14.092286111829237 0.014072542010902475 [3.46957973e-05 1.22308017e-04 4.33913704e-05]</span><br><span class="line">-5.059012074312396 8.289583319446658 -14.092299639264253 0.014072542383840357 [-1.32332893e-05 -3.33496011e-05 -1.47340364e-05]</span><br><span class="line">-5.059012209362201 8.289583262232439 -14.092299836143358 0.014072542049442381 [ 8.05848509e-06 -4.68544268e-06 -5.44347003e-06]</span><br><span class="line">-5.059011843642549 8.289583140516363 -14.0922999061835 0.014072542383840357 [-1.32332893e-05 -3.33496011e-05 -1.47340364e-05]</span><br></pre></td></tr></table></figure><p><code>In[14]</code></p><p><code>In[14]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Gradient descent: &#123;&#125;'</span>.format(weights_GD))</span><br><span class="line">print(<span class="string">'Newtons method: &#123;&#125;'</span>.format(weights_NT))</span><br><span class="line">print(<span class="string">'Sklearn method: &#123;&#125; &#123;&#125;'</span>.format(clf.coef_, clf.intercept_,))</span><br></pre></td></tr></table></figure><p><code>Out[14]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gradient descent: [-5.059010268463914, 8.289579874245822, -14.092294984033252]</span><br><span class="line">Newtons method: [ -5.05901198   8.28958308 -14.0923001 ]</span><br><span class="line">Sklearn method: [[-5.02712572  8.23286799]] [-13.99400797]</span><br></pre></td></tr></table></figure><p>通过上面的数据处理，便得到了对于本次回归的最优解：<br><img src="https://i.loli.net/2019/02/13/5c63adc67f71c.png" width="700"></p><h2 id="4-从逻辑回归到SoftMax"><a href="#4-从逻辑回归到SoftMax" class="headerlink" title="4. 从逻辑回归到SoftMax"></a>4. 从逻辑回归到SoftMax</h2><p>对于二分类问题，我们使用逻辑回归</p><script type="math/tex; mode=display">h_\theta (x)=\frac{1}{1+e^{-\left ( \theta_1 x+\theta_2 \right )}}=\frac{e^{ \theta_1 x+\theta_2}}{1+e^{ \theta_1 x+\theta_2}}</script><p>而对于多分类的问题，就要引入<strong><em>SoftMax Function</em></strong>，其本质上和逻辑回归一致，但需要从多个角度分析</p><ul><li>首先定义</li></ul><script type="math/tex; mode=display">  Z_i (x)=\theta _{i,1}x_1+\theta _{i,2}x_2</script><ul><li>则<strong><em>SoftMax Function</em></strong>为</li></ul><script type="math/tex; mode=display">  Softmax = \frac{e^{z_i(x)}}{\sum e^{z_i(x)}}</script><ul><li>例如我们定义一个5类的<strong><em>SoftMax Function</em></strong></li></ul><script type="math/tex; mode=display">  p_i=\begin{cases}  \frac{e^{z_1(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}&  & ①\\   \frac{e^{z_2(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}&  & ②\\   \frac{e^{z_3(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}&  & ③\\   \frac{e^{z_4(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}&  & ④\\   \frac{e^{z_5(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}&  & ⑤  \end{cases}</script><p>同逻辑回归一样，<strong><em>SoftMax Function</em></strong>也可以求偏导</p><script type="math/tex; mode=display">\begin{align}\frac{\partial (Softmax_{(i)})}{\partial \theta _j}&=\frac{\partial }{\partial \theta _j}\frac{e^{\theta_{i}x_{i}}}{\sum_{j=1}^{n}e^{\theta_{j}x_{j}}}\\&\Rightarrow x_j\cdot\left ( 1-Softmax_{(i)} \right )\cdot Softmax_{(i)} &       &(i=j)\\&\Rightarrow -x_j \cdot Softmax_{(i)}\cdot Softmax_{(j)}&       &(i\neq j) \end{align}</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;逻辑回归与线性回归&quot;&gt;&lt;a href=&quot;#逻辑回归与线性回归&quot; class=&quot;headerlink&quot; title=&quot;逻辑回归与线性回归&quot;&gt;&lt;/a&gt;&lt;em&gt;逻辑回归与线性回归&lt;/em&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;线性回归：预测连续数值变量（明天上海的地面温度？）&lt;/li&gt;
&lt;li&gt;逻辑回归：预测分类 (classification)（今天会不会考试？）&lt;/li&gt;
&lt;li&gt;逻辑回归与线性回归有什么联系？&lt;/li&gt;
&lt;li&gt;从一个例子说起：获取数据，判断恶意订房&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Statistics" scheme="https://marara.xin/tags/Statistics/"/>
    
      <category term="Machine Learning" scheme="https://marara.xin/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>最简单最实用：线性回归</title>
    <link href="https://marara.xin/2019/02/11/Linear_Regression_Lecture/"/>
    <id>https://marara.xin/2019/02/11/Linear_Regression_Lecture/</id>
    <published>2019-02-11T03:45:02.000Z</published>
    <updated>2020-03-11T05:30:08.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a><em>线性回归</em></h2><ul><li>在解决连续变量的预测问题里，线性回归最简单</li><li>对于很多问题，在一定范围内是有效的</li><li>理论和应用也是最完善的</li></ul><a id="more"></a><h2 id="1-为什么要使用线性回归？"><a href="#1-为什么要使用线性回归？" class="headerlink" title="1. 为什么要使用线性回归？"></a>1. 为什么要使用线性回归？</h2><ul><li>$y=c_0+c_1 x_1+c_2 x_2$</li><li>形式简单</li><li><p>应用广泛：身高与体重，海拔与气压<br><img src="https://i.loli.net/2019/02/11/5c60f71c96fc7.png" alt="hw"></p></li><li><p>普通最小二乘法理解容易，计算起来简单</p></li><li>结果也很容易解释</li><li>奥卡姆剃刀指南：如果没有足够的证据（理由），就不用更复杂的模型<blockquote><p>In my opinion the theory here is the logically simplest relativistic field theory that is at all possible.  But this does not mean that Nature might not obey a more complex theory.  More complex theories have frequently been proposed. . .  In my view, such more complicated systems and their combinations should be considered only if there exist physical-empirical reasons to do so.               </p><p>​                                                                —Einstein</p></blockquote></li></ul><h2 id="2-如何计算线性回归？最小二乘法"><a href="#2-如何计算线性回归？最小二乘法" class="headerlink" title="2. 如何计算线性回归？最小二乘法"></a>2. 如何计算线性回归？最小二乘法</h2><ul><li>世界不是完美的，要接纳不完美</li><li>需要通过量化的形式来比较<br><img src="https://i.loli.net/2019/02/11/5c60fec49326f.png" width="500"></li></ul><script type="math/tex; mode=display">\begin{align}\hat{y}_{黄} = c_0 + c_1 x \\\hat{y}_{红} = d_0 + d_1 x\end{align}</script><p><img src="https://i.loli.net/2019/02/11/5c60fed7bb135.png" width="500"></p><ul><li><p>每个观测值是$x_i,y_i$</p></li><li><p>$x_i$是自变量，回归的值是$\hat{y}_i$</p></li><li><p>样本的回归是对总体的回归的估计</p><script type="math/tex; mode=display">\begin{align}&\hat{y}_i = \hat{\alpha} + \hat{\beta} x_i \\&y_i = \alpha + \beta x_i \\end{align}</script></li></ul><p><img src="https://i.loli.net/2019/02/11/5c60fea46485b.png" width="700"></p><ul><li>单个点的拟合程度用<strong>残差</strong>来衡量：<script type="math/tex; mode=display">\begin{align}\epsilon_i = y_i - \hat{y}_i\end{align}</script></li></ul><ul><li><p>整体的拟合程度，用<strong>残差平方和（SSE）</strong>来衡量：</p><script type="math/tex; mode=display">\begin{align}sum\ of\ square\ error &= \sum_i \epsilon_i^2 \\&= \sum_i (y_i - \hat{y}_i)^2 \\&= \sum_i (y_i - \hat{\alpha} - \hat{\beta} x_i )^2\\end{align}</script></li></ul><h4 id="选出拟合程度最好的直线"><a href="#选出拟合程度最好的直线" class="headerlink" title="选出拟合程度最好的直线"></a>选出拟合程度最好的直线</h4><ul><li><p>残差平方和最小的直线</p></li><li><p>根据极值条件求 $\alpha,\beta$</p><script type="math/tex; mode=display">\begin{align}&\hat{\beta} =  \frac{\sum(x_i-\bar{x})(y_i-\bar{y})}{\sum(x_i-\bar{x})^2}\\&\hat{\alpha} =  \bar{y}-\hat{\beta}\bar{x}\end{align}</script></li></ul><h2 id="3-由最小二乘法选出的直线有没有用？"><a href="#3-由最小二乘法选出的直线有没有用？" class="headerlink" title="3. 由最小二乘法选出的直线有没有用？"></a>3. 由最小二乘法选出的直线有没有用？</h2><ul><li>选出一根直线只是万里长征第一步</li><li>不管是什么样的数据，都可以计算出一根这样的直线</li><li>需要用其他标准来衡量，这跟直线，对解释数据到底有没有用</li></ul><p><code>In[1]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line">%config InlineBackend.figure_format = <span class="string">'retina'</span></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">800</span>, <span class="number">10000</span>)</span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">y = <span class="number">400</span> + np.random.random(<span class="number">10000</span>) * <span class="number">400</span> + x * <span class="number">0.002</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=[<span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line">plt.scatter(x, y, s=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'PM_Nongzhanguan'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'PM_Dongsi'</span>)</span><br></pre></td></tr></table></figure><p><code>Out[1]</code></p><pre><code>Text(0, 0.5, &#39;PM_Dongsi&#39;)</code></pre><p><img src="https://i.loli.net/2019/02/11/5c60fe86690db.png" alt="png"></p><p><code>In[2]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">lr = LinearRegression()</span><br><span class="line">lr.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y)</span><br><span class="line">y_hat = lr.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'intercept = %f, slope = %f'</span> % (lr.intercept_, lr.coef_))</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=[<span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line">plt.scatter(x, y, s=<span class="number">0.2</span>)</span><br><span class="line">plt.plot(x, <span class="number">600</span> + x * <span class="number">0.002</span>, <span class="string">'--'</span>, c=<span class="string">'blue'</span>)</span><br><span class="line">plt.plot(x, y_hat, c=<span class="string">'red'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'PM_Nongzhonguan'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'PM_Dongsi'</span>)</span><br></pre></td></tr></table></figure><pre><code>intercept = 600.891491, slope = -0.002232</code></pre><p><code>Out[2]</code></p><pre><code>Text(0, 0.5, &#39;PM_Dongsi&#39;)</code></pre><p><img src="https://i.loli.net/2019/02/11/5c60f7756589f.png" alt="output_10_2"></p><p><code>In[3]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">y_1_random = (y - x * <span class="number">0.002</span>)</span><br><span class="line">y_2 = np.mean(</span><br><span class="line">    y_1_random) + x * <span class="number">0.002</span> + (y_1_random - np.mean(y_1_random)) / <span class="number">400</span> * <span class="number">20</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=[<span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line">plt.scatter(x, y_2, s=<span class="number">0.2</span>)</span><br><span class="line">plt.xlabel(<span class="string">'PM_Nongzhanguan'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'PM_Dongsi'</span>)</span><br><span class="line">plt.ylim([<span class="number">400</span>, <span class="number">800</span>])</span><br></pre></td></tr></table></figure><p><code>Out[3]</code></p><pre><code>(400, 800)</code></pre><p><img src="https://i.loli.net/2019/02/11/5c60f79fb1517.png" alt="output_11_1"></p><p><code>In[4]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">lr2 = LinearRegression()</span><br><span class="line">lr2.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y_2)</span><br><span class="line">y_hat_2 = lr2.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">plt.figure(figsize=[<span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line">plt.scatter(x, y_2, s=<span class="number">0.2</span>)</span><br><span class="line">plt.plot(x, y_hat_2, c=<span class="string">'white'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'PM_Nongzhanguan'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'PM_Dongsi'</span>)</span><br><span class="line">plt.ylim([<span class="number">400</span>, <span class="number">800</span>])</span><br><span class="line">print(<span class="string">'intercept = %f, slope = %f'</span> % (lr2.intercept_, lr2.coef_))</span><br></pre></td></tr></table></figure><pre><code>intercept = 599.283220, slope = 0.001788</code></pre><p><img src="https://i.loli.net/2019/02/11/5c60fca7cb836.png" alt="output_12_1"></p><p><code>In[5]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))</span><br><span class="line">fig.subplots_adjust(hspace=<span class="number">0.4</span>, wspace=<span class="number">0.4</span>)</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.scatter(x, y, s=<span class="number">0.2</span>)</span><br><span class="line">plt.plot(x, y_hat, c=<span class="string">'red'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'PM_Nongzhanguan'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'PM_Dongsi'</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.scatter(x, y_2, s=<span class="number">0.2</span>)</span><br><span class="line">plt.plot(x, y_hat_2, c=<span class="string">'white'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'PM_Nongzhanguan'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'PM_Dongsi'</span>)</span><br><span class="line">plt.ylim([<span class="number">400</span>, <span class="number">800</span>])</span><br><span class="line">print(<span class="string">'left intercept = %f, slope = %f'</span> % (lr.intercept_, lr.coef_))</span><br><span class="line">print(<span class="string">'right intercept = %f, slope = %f'</span> % (lr2.intercept_, lr2.coef_))</span><br></pre></td></tr></table></figure><pre><code>left intercept = 600.891491, slope = -0.002232right intercept = 599.283220, slope = 0.001788</code></pre><p><img src="https://i.loli.net/2019/02/11/5c60fcbcc4d65.png" alt="output_13_1"></p><p><code>In[6]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">800</span>, <span class="number">10000</span>)</span><br><span class="line">np.random.seed(<span class="number">2</span>)</span><br><span class="line">y3 = <span class="number">400</span> + np.random.random(<span class="number">10000</span>) * <span class="number">400</span> + x * <span class="number">0.002</span></span><br><span class="line"></span><br><span class="line">lr3 = LinearRegression()</span><br><span class="line">lr3.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y3)</span><br><span class="line">y_hat_3 = lr3.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">y_3_random = (y3 - x * <span class="number">0.002</span>)</span><br><span class="line">y_4 = np.mean(</span><br><span class="line">    y_3_random) + x * <span class="number">0.002</span> + (y_3_random - np.mean(y_3_random)) / <span class="number">400</span> * <span class="number">20</span></span><br><span class="line">lr4 = LinearRegression()</span><br><span class="line">lr4.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y_4)</span><br><span class="line">y_hat_4 = lr4.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">print(<span class="string">'left intercept = %f, slope = %f'</span> % (lr3.intercept_, lr3.coef_))</span><br><span class="line">print(<span class="string">'right intercept = %f, slope = %f'</span> % (lr4.intercept_, lr4.coef_))</span><br></pre></td></tr></table></figure><pre><code>left intercept = 597.434210, slope = 0.002158right intercept = 597.494287, slope = 0.002008</code></pre><p><code>In[7]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">800</span>, <span class="number">10000</span>)</span><br><span class="line">np.random.seed(<span class="number">3</span>)</span><br><span class="line">y3 = <span class="number">400</span> + np.random.random(<span class="number">10000</span>) * <span class="number">400</span> + x * <span class="number">0.002</span></span><br><span class="line"></span><br><span class="line">lr3 = LinearRegression()</span><br><span class="line">lr3.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y3)</span><br><span class="line">y_hat_3 = lr3.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">y_3_random = (y3 - x * <span class="number">0.002</span>)</span><br><span class="line">y_4 = np.mean(</span><br><span class="line">    y_3_random) + x * <span class="number">0.002</span> + (y_3_random - np.mean(y_3_random)) / <span class="number">400</span> * <span class="number">20</span></span><br><span class="line">lr4 = LinearRegression()</span><br><span class="line">lr4.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y_4)</span><br><span class="line">y_hat_4 = lr4.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">print(<span class="string">'left intercept = %f, slope = %f'</span> % (lr3.intercept_, lr3.coef_))</span><br><span class="line">print(<span class="string">'right intercept = %f, slope = %f'</span> % (lr4.intercept_, lr4.coef_))</span><br></pre></td></tr></table></figure><pre><code>left intercept = 599.686570, slope = -0.000431right intercept = 598.762664, slope = 0.001878</code></pre><p><code>In[8]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coeff_lr</span><span class="params">(i)</span>:</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">800</span>, <span class="number">10000</span>)</span><br><span class="line">    np.random.seed(i)</span><br><span class="line">    y3 = <span class="number">400</span> + np.random.random(<span class="number">10000</span>) * <span class="number">400</span> + x * <span class="number">0.002</span></span><br><span class="line"></span><br><span class="line">    lr3 = LinearRegression()</span><br><span class="line">    lr3.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y3)</span><br><span class="line">    y_hat_3 = lr3.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    y_3_random = (y3 - x * <span class="number">0.002</span>)</span><br><span class="line">    y_4 = np.mean(</span><br><span class="line">        y_3_random) + x * <span class="number">0.002</span> + (y_3_random - np.mean(y_3_random)) / <span class="number">400</span> * <span class="number">20</span></span><br><span class="line">    lr4 = LinearRegression()</span><br><span class="line">    lr4.fit(x.reshape(<span class="number">-1</span>, <span class="number">1</span>), y_4)</span><br><span class="line">    y_hat_4 = lr4.predict(x.reshape(<span class="number">-1</span>, <span class="number">1</span>))</span><br><span class="line">    <span class="comment">#print('left intercept = %f, slope = %f'%(lr3.intercept_,lr3.coef_))</span></span><br><span class="line">    <span class="comment">#print('right intercept = %f, slope = %f'%(lr4.intercept_,lr4.coef_))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pd.DataFrame([[<span class="number">0</span>, lr3.coef_], [<span class="number">1</span>, lr4.coef_]],</span><br><span class="line">                        columns=[<span class="string">'cate'</span>, <span class="string">'coef_'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = coeff_lr(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">    df = coeff_lr(i)</span><br><span class="line">    result = result.append(df, ignore_index=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><code>In[9]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">sns.stripplot(</span><br><span class="line">    x=<span class="string">"cate"</span>, y=<span class="string">"coef_"</span>, data=result, jitter=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/11/5c60fce73689c.png" alt="output_17_1"></p><h3 id="3-1-要点"><a href="#3-1-要点" class="headerlink" title="3.1 要点"></a>3.1 要点</h3><ul><li>每次回归是对<strong>某一次抽样</strong>的样本进行回归分析</li><li>对样本回归计算后的斜率是个变量，随抽样结果不同而不同</li></ul><h3 id="3-2-需要进一步使用其他指标来衡量线性回归的效用，达到建模与分析的目的"><a href="#3-2-需要进一步使用其他指标来衡量线性回归的效用，达到建模与分析的目的" class="headerlink" title="3.2 需要进一步使用其他指标来衡量线性回归的效用，达到建模与分析的目的"></a>3.2 需要进一步使用其他指标来衡量线性回归的效用，达到建模与分析的目的</h3><ul><li>回归分析的<span style="color:blue">目的</span>是什么？<ul><li>去估计总体的x与总体的y之间的关系，是正相关？负相关？还是不相关？（这一层面，在于与‘不相关‘比较）</li><li>相关性会不会随不同的抽样情景变化？会不会出现：第一次抽样的回归结果是正相关，第二次抽样的回归结果是负相关？</li><li>确定了相关性，那么线性回归模型能不能很好的解释原有数据的特点？</li></ul></li></ul><h2 id="4-线性回归的参数估计分析"><a href="#4-线性回归的参数估计分析" class="headerlink" title="4. 线性回归的参数估计分析"></a>4. 线性回归的参数估计分析</h2><h4 id="以斜率为例"><a href="#以斜率为例" class="headerlink" title="以斜率为例"></a>以斜率为例</h4><ul><li><p>斜率的符号与相关性</p><script type="math/tex; mode=display">\begin{align}\hat{\beta} & = \frac{Cov(x,y)}{Var(x)} \\& = \frac{Cov(x,y)}{\sqrt{Var(x) }\sqrt{Var(x)} }\\& = \frac{Cov(x,y)}{\sqrt{Var(x) }\sqrt{Var(y)}}\frac{\sqrt{Var(y)}} {\sqrt{Var(x)} }\\& ={Corr(x,y)}\frac{\sqrt{Var(y)}}{\sqrt{Var(x)}}\end{align}</script></li><li><p>在假设检验的框架下，衡量回归参数符号的<strong>不确定性</strong></p></li><li><p>$\hat{\beta}$随样本变化而变化，是总体回归参数$\beta$的估计量，具有均值和方差</p><script type="math/tex; mode=display">\begin{align}\hat{\beta} &= \frac{\sum(x_i-\bar{x})(y_i-\bar{y})}{\sum(x_i-\bar{x})^2}\\&= \frac{\sum(x_i-\bar{x})y_i}{\sum(x_i-\bar{x})^2}\\\end{align}</script><script type="math/tex; mode=display">\begin{align}E(\hat{\beta})&=\frac{\sum(x_i-\bar{x})E(y_i)}{\sum(x_i-\bar{x})^2}\\&=\frac{\sum(x_i-\bar{x})(\alpha+\beta x_i)}{\sum(x_i-\bar{x})^2}\\&=\beta\end{align}</script><script type="math/tex; mode=display">\begin{align}Var(\hat{\beta}) &= \sum[\frac{(x_i-\bar{x})}{\sum(x_i-\bar{x})2}]2Var(y_i)\\&=\frac{\sigma2}{\sum(x_i-\bar{x})2}\end{align}</script></li></ul><p><img src="https://i.loli.net/2019/02/11/5c60fd2e0639b.png" width="500"></p><ul><li><p>用t检验来判断，0在回归参数分布的位置，以判断参数正负符号的不确定性</p></li><li><p>t检验：</p><ul><li>原假设， H0: $\beta = 0$</li><li>备择假设,H1: $\beta \neq 0$</li><li>$\hat{\beta} \sim N(\beta,\frac{\sigma^2}{\sum(x_i-x)^2}$)</li><li>构造统计量<ul><li>$t = \frac{\hat{\beta}}{\sqrt{\hat{\sigma}^2/\sum(x_i-x)^2}}$</li><li>其中 $\hat{\sigma}^2 = \frac{1}{n-1}\sum e_i^2 = \frac{1}{n-1}\sum(y_i-\hat{y_i})^2$</li></ul></li><li>计算对应的p值，判断是否拒绝原假设</li></ul></li></ul><p><img src="https://i.loli.net/2019/02/11/5c60fd581123b.png" width="400"></p><ul><li>如何解释显著性？（我的理解应解释为相关性的确定程度）</li></ul><h2 id="5-线性回归对数据的解释"><a href="#5-线性回归对数据的解释" class="headerlink" title="5. 线性回归对数据的解释"></a>5. 线性回归对数据的解释</h2><ul><li>回归分析的<span style="color:blue">目的</span>是什么？<ul><li>去估计总体的x与总体的y之间的关系，是正相关？负相关？还是不相关？（这一层面，在于与‘不相关‘比较）</li><li>相关性会不会随不同的抽样情景变化？会不会出现：第一次抽样的回归结果是正相关，第二次抽样的回归结果是负相关？</li><li>确定了相关性，那么线性回归模型能不能很好的解释原有数据的特点？</li></ul></li></ul><p><img src="https://i.loli.net/2019/02/11/5c60fe5374e57.png" width="700"></p><script type="math/tex; mode=display">\begin{align}R^2 = \frac{SSR}{SST}=1-\frac{SSE}{SST}\end{align}</script><ul><li><p>$R^2$含义：离差平方和中有多少能被回归平方和解释</p></li><li><p>注意事项：</p><ul><li>$R^2=0$不代表自变量与因变量没有关系<br><img src="https://i.loli.net/2019/02/11/5c60fe32c16dc.gif" width="300"></li><li>$R^2$大也不代表自变量和因变量就一定是线性关系<br><img src="https://i.loli.net/2019/02/11/5c60fe32bfb96.gif" width="400"></li><li>$R^2$大也不代表结果显著（与确定性无关）</li></ul></li></ul><h2 id="6-线性回归对样本及误差的要求和假设前提"><a href="#6-线性回归对样本及误差的要求和假设前提" class="headerlink" title="6. 线性回归对样本及误差的要求和假设前提"></a>6. 线性回归对样本及误差的要求和假设前提</h2><p><img src="https://i.loli.net/2019/02/11/5c60fe11e17be.png" width="700"></p><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><ol><li>y的均值是x的线性组合</li><li>残差$e_i$独立于x</li><li>给定x, 残差$e_i$要服从正态分布</li><li>对于不同的xi, 残差$e_i$的方差variance应相同</li></ol><ul><li><span style="color:blue">L</span>inear Function</li><li><span style="color:blue">I</span>ndependent</li><li><span style="color:blue">N</span>ormal Distribution</li><li><span style="color:blue">E</span>qual Variance</li></ul><h2 id="7-预测的confidence-interval-和-prediction-interval"><a href="#7-预测的confidence-interval-和-prediction-interval" class="headerlink" title="7. 预测的confidence interval 和 prediction interval"></a>7. 预测的confidence interval 和 prediction interval</h2><ul><li>问题1：年级与某成人考试分数，根据抽样样本，估计二年级学生的平均分数<br><img src="https://i.loli.net/2019/02/11/5c60fde5ee17f.png" width="700"><br><img src="https://i.loli.net/2019/02/11/5c60fde5ec423.png" width="700"></li><li>不同次的抽样，回归结果是不一样的</li></ul><ul><li>预测二年级的学生平均分数 vs 预测某个学生的考试分数<br><img src="https://i.loli.net/2019/02/11/5c60fdb096972.png" width="800"></li></ul><p>Confidential Interval</p><p><img src="https://i.loli.net/2019/02/11/5c60fda003b68.png" width="800"></p><p>Prediction Interval</p><p><img src="https://i.loli.net/2019/02/11/5c60fd8294fa4.png" width="800"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线性回归&quot;&gt;&lt;a href=&quot;#线性回归&quot; class=&quot;headerlink&quot; title=&quot;线性回归&quot;&gt;&lt;/a&gt;&lt;em&gt;线性回归&lt;/em&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在解决连续变量的预测问题里，线性回归最简单&lt;/li&gt;
&lt;li&gt;对于很多问题，在一定范围内是有效的&lt;/li&gt;
&lt;li&gt;理论和应用也是最完善的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Statistics" scheme="https://marara.xin/tags/Statistics/"/>
    
      <category term="Machine Learning" scheme="https://marara.xin/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>从正态分布到置信区间</title>
    <link href="https://marara.xin/2018/06/18/%E4%BB%8E%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E5%88%B0%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B4/"/>
    <id>https://marara.xin/2018/06/18/从正态分布到置信区间/</id>
    <published>2018-06-18T14:16:25.971Z</published>
    <updated>2019-02-11T05:17:12.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先从人均收入说起"><a href="#先从人均收入说起" class="headerlink" title="先从人均收入说起"></a>先从人均收入说起</h2><p>我们通常会统计一个地区的人均收入水平，以此来反应这个地区的经济发展水平。假设现在从一个地区，随机抽取1000人，统计他们的年收入，求和后除以1000，得到一个平均年收入：</p><script type="math/tex; mode=display">\overline{X}=\frac{1}{1000}\sum_{i=1}^{1000}X_i \qquad（X_i为第i个人的年收入）</script><p>但是这里有一个显而易见的问题，由于每次随机抽取的样本不尽相同，导致算出的算术平均值每次都可能不同。例如第一次$\overline{X_1}=6200$，第二次$\overline{X_2}=6000$，第三次$\overline{X_3}=6100$……，这样得到的数据，让人不知道该相信哪个。</p><a id="more"></a><h2 id="从抽样到客观"><a href="#从抽样到客观" class="headerlink" title="从抽样到客观"></a>从抽样到客观</h2><p>通过以上的例子，我们得出了一个结论：以点估点是靠不住的，更何况在连续型随机变量中，取一个点的概率是测不到的。但是，这并不意味着平均收入值是不存在的。即一定有那么一个客观存在的值，不因抽样的不同而改变，我们不妨记这个数为 $\mu$ 。</p><p>我们回到统计中，假设现在有一组灯泡，我们该如何去估计平均寿命呢？我们同样去抽取一组样本，测量它们的平均寿命 $\overline{X}$ ，虽然这个 $\overline{X}$ 不会正好就是 $\mu$ ，但是我们从常理可知，这个值应该与真实存在的 $\mu$ 相去不远。也就是说，在如果一组灯泡的真实平均寿命是1800小时，我们测得的平均值应该在1800左右，而不会出现例如20，100这样明显偏离的值。那么计算我们测得的 $\overline{X}$ 与 $\mu$ 的距离：</p><script type="math/tex; mode=display">|\overline{X}-\mu|</script><p>然后计算这个距离小于某个值得概率：</p><script type="math/tex; mode=display">P(|\overline{X}-\mu|<\Delta)=1-\alpha</script><p>这里，我们便称 $1-\alpha$ 为<strong>置信度</strong>。通俗的解释就是可以相信你给出的这个数据的程度。假设取 $\alpha=0.01$ ，那么就表示为：有90%的把握相信这个概率会发生。在不同的行业，对置信度的精度要求不同。例如航空器材中，对每个零件的精度要求都很高，而相对于普通制衣工厂，对于布料尺寸的把控就没有那么严格。</p><h2 id="正态分布和标准化"><a href="#正态分布和标准化" class="headerlink" title="正态分布和标准化"></a>正态分布和标准化</h2><p>普天之下，所有的分布，最终都会归于正态分布：</p><p>如果 $X$ 的概率密度为：</p><script type="math/tex; mode=display">f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}} \qquad (-\infty<x<+\infty)</script><p>其中 $-\infty&lt;\mu&lt;+\infty$ ，$\sigma&gt;0$ ，则称 $X$ 服从参数为 $(\mu,\sigma^2)$ 的<strong>正态分布</strong>，或称 $X$ 为<strong>正态变量</strong>，记 $X\sim N (\mu,\sigma^2)$ 。</p><p>由于 $(\mu,\sigma^2)$ 的不同，所画出的函数图像也就不同，于是我们希望构造出一个标准化的形式，来研究他的属性。那么用 $X$ 减去自己的期望并除以标准差后，我们能得到 $X$ 的标准化形式，即：</p><script type="math/tex; mode=display">\frac{X-EX}{\sqrt{DX}}</script><p>对于正态分布来说即为：</p><script type="math/tex; mode=display">\frac{X-\mu}{\sigma} \sim N(0,1)</script><p><img src="https://lh3.googleusercontent.com/-oie8_LXV_5w/WyfmW2fLN8I/AAAAAAAABTE/Iqh_m3FLJmo6FhlXaCkzPUU41C9daTtzgCHMYCw/I/geogebra-export.png" alt="geogebra-export"><br>现在假设有一组数据：</p><script type="math/tex; mode=display">(x_1,x_2...x_n) \overset{iid}{\sim}N(\mu,\sigma^2)</script><p>它的</p><script type="math/tex; mode=display">E\overline{X}=E\frac{(x_1+x_2+...+x_n)}{n}=\frac{1}{n}\cdot n\mu=\mu</script><script type="math/tex; mode=display">D\overline{X}=D\frac{(x_1+x_2+...+x_n)}{n}=\frac{1}{n^2}\cdot n\sigma^2=\frac{\sigma^2}{n}</script><p>平均值波动为原样本的 $\frac{1}{n}$ ，波动程度缩小，则 $\overline{X} \sim N(\mu, \frac{\sigma^2}{n})$ 。</p><p>我们回到最开始的概率：</p><script type="math/tex; mode=display">P(|\overline{X}-\mu|<\Delta)=1-\alpha</script><p>通过上面的推导，我们欲对其标准化，因为 $\frac{\sigma^2}{n}&gt;0$ ，所以只需两端同时除以 $\frac{\sigma^2}{n}$ 即可</p><script type="math/tex; mode=display">P(|\frac{\overline{X}-\mu}{\frac{\sigma^2}{n}}|< \frac{\Delta}{\frac{\sigma^2}{n}})=1-\alpha</script><p>那么它就是一个服从标准正态分布的随机变量的概率分布。</p><h2 id="区间估计"><a href="#区间估计" class="headerlink" title="区间估计"></a>区间估计</h2><p>为方便理解，我把上式中 $\frac{\overline{X}-\mu}{\frac{\sigma^2}{n}} $ 记为 $U$ ，把 $\frac{\Delta}{\frac{\sigma^2}{n}}$ 记为 $Q \quad (Q为常数)$ </p><script type="math/tex; mode=display">P(\vert U \vert < Q)=1-\alpha</script><script type="math/tex; mode=display">P(-Q<U<Q)=1-\alpha</script><p>根据上 $\alpha$ 分位数，$\alpha$ 的下标代表图像右侧的面积<br><img src="https://lh3.googleusercontent.com/-BqUKrbsLS9s/WyfmQOvYCYI/AAAAAAAABS8/Q-00W59fTEo_JbbultPoksKdKklHG4gfQCHMYCw/I/geogebra-export%2B%25281%2529.png" alt="geogebra-export -1-"></p><script type="math/tex; mode=display">P(\vert U \vert < U_\frac{\alpha}{2})=1-\alpha</script><p>则</p><script type="math/tex; mode=display">\frac{\Delta}{\frac{\sigma}{\sqrt{n}}}=U_\frac{\alpha}{2}</script><script type="math/tex; mode=display">\Delta=U_\frac{\alpha}{2} \cdot \frac{\sigma}{\sqrt{n}}</script><p>代回原式</p><script type="math/tex; mode=display">P(|\overline{X}-\mu|<U_\frac{\alpha}{2} \cdot \frac{\sigma}{\sqrt{n}})=1-\alpha</script><p>这里的意思就为</p><script type="math/tex; mode=display">P(\vert 一次抽样的均值 - 客观存在的均值 \vert < 常数)=1-\alpha</script><p><img src="https://lh3.googleusercontent.com/-gga_EEQ1wrQ/WyfuSFWq3CI/AAAAAAAABTU/q9ljbHeSAx8xtBhI6WoUEDJG3usYFQs6ACHMYCw/I/geogebra-export%2B%25283%2529.png" alt="geogebra-export -3-"></p><p>也就是落入 $(\overline{X}-δ,\overline{X}+δ)$ 之间的概率，即叫做<strong>区间估计</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;先从人均收入说起&quot;&gt;&lt;a href=&quot;#先从人均收入说起&quot; class=&quot;headerlink&quot; title=&quot;先从人均收入说起&quot;&gt;&lt;/a&gt;先从人均收入说起&lt;/h2&gt;&lt;p&gt;我们通常会统计一个地区的人均收入水平，以此来反应这个地区的经济发展水平。假设现在从一个地区，随机抽取1000人，统计他们的年收入，求和后除以1000，得到一个平均年收入：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\overline{X}=\frac{1}{1000}\sum_{i=1}^{1000}X_i \qquad（X_i为第i个人的年收入）&lt;/script&gt;&lt;p&gt;但是这里有一个显而易见的问题，由于每次随机抽取的样本不尽相同，导致算出的算术平均值每次都可能不同。例如第一次$\overline{X_1}=6200$，第二次$\overline{X_2}=6000$，第三次$\overline{X_3}=6100$……，这样得到的数据，让人不知道该相信哪个。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Statistics" scheme="https://marara.xin/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>Mac 局域网共享 ShadowSocks</title>
    <link href="https://marara.xin/2018/02/05/Mac%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%ABss/"/>
    <id>https://marara.xin/2018/02/05/Mac局域网共享ss/</id>
    <published>2018-02-05T08:35:20.309Z</published>
    <updated>2018-02-05T10:03:31.863Z</updated>
    
    <content type="html"><![CDATA[<p>新买了 NS，却发现下载速度慢，切自身无法连接 ss，于是找到了将 macOS 的全局网络在局域网下分享给其他设备的方法。</p><a id="more"></a><h2 id="安装-ShadowSocks"><a href="#安装-ShadowSocks" class="headerlink" title="安装 ShadowSocks"></a>安装 ShadowSocks</h2><p>安装<strong>ShadowSocks</strong>略过，无论是GUI版还是命令行版都可以，可以参考<a href="http://salogs.com/news/2016/11/02/mac-shadowsocks/" target="_blank" rel="noopener">这里</a>。</p><h2 id="配置-ShadowSocks"><a href="#配置-ShadowSocks" class="headerlink" title="配置 ShadowSocks"></a>配置 ShadowSocks</h2><p>地址端口自行配置，这里要记住的两个地方：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"local_address":"0.0.0.0",</span><br><span class="line">"local_port":1080,</span><br></pre></td></tr></table></figure><ul><li><code>local_address</code> 这里填写 <code>0.0.0.0</code> 表示局域网点的所有机子都可以通过 <code>1080</code> 这个端口代理，也可以就用主机地址 <code>127.0.0.1</code></li><li><code>local_port</code> 端口号不要重复，如果有 <code>HTTPS</code> 代理时尤为注意，同时这个需要记住，之后用到</li></ul><h2 id="Privoxy"><a href="#Privoxy" class="headerlink" title="Privoxy"></a>Privoxy</h2><p>Windows 系统可以通过几个命令，甚至是客户端的选项就可以完成代理<br><img src="https://lh3.googleusercontent.com/-wAiXakN3028/WngrqgUkMOI/AAAAAAAAAc4/cEjbWN4WqAswvggvNXrU55HYK047Q6JbQCHMYCw/I/a75c3e80gw1f4urdcywyqj206506imxj.jpg" alt="a75c3e80gw1f4urdcywyqj206506imxj"></p><p>可惜的是，macOS 没有提供这样的功能，所以我们需要借助像 <a href="http://www.privoxy.org/" target="_blank" rel="noopener">Privoxy</a> 这样的工具来实现Sock5共享。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里分享的是使用 <strong>Homebrew</strong> 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install privoxy</span><br></pre></td></tr></table></figure><p><strong>homebrew </strong>会报错 <code>/usr/local/sbin is not writable</code>，这是因为 <code>/usr/local/</code> 这个目录不属于当前用户，所以 <strong>homebrew</strong> 无法访问。解决方法为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/<span class="built_in">local</span>/sbin</span><br><span class="line">sudo chown -R `whoami`:admin /usr/<span class="built_in">local</span>/sbin</span><br></pre></td></tr></table></figure><p>之后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew link privoxy</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/etc/privoxy/config</span><br></pre></td></tr></table></figure><ol><li><p>在 vim 中搜索 <code>forward-socks5t  /</code> ，去掉注释，将端口改为 <code>local_port</code> 号</p><blockquote><p><code>forward-socks5t / 127.0.0.1:1080</code></p></blockquote></li><li><p>搜索 <code>listen-address 127.0.0.1:8118</code> ，去掉注释，把 <code>127.0.0.1</code> 改为 <code>0.0.0.0</code>，端口号默认或选择一个未占用的端口 </p><blockquote><p><code>listen-address 0.0.0.0:6666</code> </p></blockquote></li><li><p>修改这两处后，保存并退出即可</p></li></ol><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/sbin/privoxy /usr/<span class="built_in">local</span>/etc/privoxy/config &amp;</span><br></pre></td></tr></table></figure><blockquote><p>最后的 <code>&amp;</code> 是为了让 privoxy 在后台运行</p><p>参见：</p><p><a href="http://ju.outofmemory.cn/entry/251730" target="_blank" rel="noopener">http://ju.outofmemory.cn/entry/251730</a></p><p><a href="http://my.oschina.net/u/994235/blog/296702" target="_blank" rel="noopener">http://my.oschina.net/u/994235/blog/296702</a></p></blockquote><h3 id="获取本机-IP"><a href="#获取本机-IP" class="headerlink" title="获取本机 IP"></a>获取本机 <code>IP</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | grep <span class="string">'inet'</span></span><br></pre></td></tr></table></figure><p>其中 <code>inet</code> 后即为本机 <code>IP</code></p><h3 id="将-Privoxy-添加到开机启动中"><a href="#将-Privoxy-添加到开机启动中" class="headerlink" title="将 Privoxy 添加到开机启动中"></a>将 Privoxy 添加到开机启动中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加开机启动:</span></span><br><span class="line">ln -sfv /usr/<span class="built_in">local</span>/opt/privoxy/*.plist ~/Library/LaunchAgents  </span><br><span class="line"><span class="comment"># 启动 Privoxy:</span></span><br><span class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.privoxy.plist  </span><br><span class="line"><span class="comment"># 如果不需要用 launchctl 就直接运行:</span></span><br><span class="line">privoxy /usr/<span class="built_in">local</span>/etc/privoxy/config</span><br></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><h4 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep privoxy</span><br><span class="line"><span class="comment"># 如果返回如下则说明启动成功</span></span><br><span class="line">root             34090   0.0  0.0  4278700   1196   ??  Ss    5:39PM   0:00.01 /usr/<span class="built_in">local</span>/sbin/privoxy /usr/<span class="built_in">local</span>/etc/privoxy/config</span><br></pre></td></tr></table></figure><h4 id="查看端口监听"><a href="#查看端口监听" class="headerlink" title="查看端口监听"></a>查看端口监听</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 6666</span><br><span class="line"><span class="comment"># 如果返回如下则说明启动成功</span></span><br><span class="line">tcp4       0      0  *.6666                 *.*                    LISTEN</span><br></pre></td></tr></table></figure><h3 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h3><p>先查看进程ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep privoxy</span><br><span class="line"><span class="comment"># 返回 id 为 34090</span></span><br><span class="line">root             34090   0.0  0.0  4278700   1196   ??  Ss    5:39PM   0:00.01 /usr/<span class="built_in">local</span>/sbin/privoxy /usr/<span class="built_in">local</span>/etc/privoxy/config</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">kill</span> 34090</span><br></pre></td></tr></table></figure><p>当然，也可以直接根据<code>privoxy</code>进程名来关闭Privoxy：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall privoxy</span><br></pre></td></tr></table></figure><h3 id="使用快捷短语"><a href="#使用快捷短语" class="headerlink" title="使用快捷短语"></a>使用快捷短语</h3><p>通过给以上命令别名（alias）来快速操作和查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./.bashrc</span><br></pre></td></tr></table></figure><p>如果使用的是 <strong>zsh</strong>，则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ./.zshrc</span><br></pre></td></tr></table></figure><p>在底部插入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># privoxy</span></span><br><span class="line"><span class="built_in">alias</span> privoxy=<span class="string">"sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config;"</span></span><br><span class="line"><span class="built_in">alias</span> privoxy_status=<span class="string">"ps aux | grep privoxy;"</span></span><br><span class="line"><span class="built_in">alias</span> privoxy_port=<span class="string">"netstat -an | grep 6666;"</span></span><br><span class="line"><span class="built_in">alias</span> privoxy_quit=<span class="string">"sudo killall privoxy;"</span></span><br></pre></td></tr></table></figure><blockquote><p>这里为 <code>alias 别名=&quot;命令;&quot;</code> ，别名可以填自己喜欢的，命令需要和之前的一致</p></blockquote><p>之后重启 <strong>Terminal</strong> 就可以通过别名来快速操作了</p><h2 id="在其他设备使用"><a href="#在其他设备使用" class="headerlink" title="在其他设备使用"></a>在其他设备使用</h2><p>支持手动配置代理的设备，在同一个WiFi下，即可手动配置，以NS为例：</p><p><img src="https://lh3.googleusercontent.com/-EY2wdqh7lOQ/Wngr3VXdGHI/AAAAAAAAAc8/rUKmtLmMraAVK6rVgQxJyJwWiott_2QigCHMYCw/I/DVQw1YoVQAEq-Ez.jpg" alt="DVQw1YoVQAEq-Ez"></p><p><strong>Proxy Setting</strong> 下，<code>Server</code> 为主机 <code>IP</code>，<code>Port</code> 为 <code>listen-address</code> 的端口号。同理iPhone，PS4等设备也就可以通过这些配置来实现科学上网了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新买了 NS，却发现下载速度慢，切自身无法连接 ss，于是找到了将 macOS 的全局网络在局域网下分享给其他设备的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://marara.xin/categories/Tutorial/"/>
    
    
      <category term="ShadowSocks" scheme="https://marara.xin/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>使用Google Drive作为Blog的图床</title>
    <link href="https://marara.xin/2017/12/10/%E4%BD%BF%E7%94%A8Google%20Drive%E4%BD%9C%E4%B8%BABlog%E7%9A%84%E5%9B%BE%E5%BA%8A/"/>
    <id>https://marara.xin/2017/12/10/使用Google Drive作为Blog的图床/</id>
    <published>2017-12-10T13:36:30.436Z</published>
    <updated>2018-02-05T10:10:43.053Z</updated>
    
    <content type="html"><![CDATA[<p>有时候会碰到需要在blog或者GitHub写一些东西的时候需要用到图片，微博图床总是失效，于是想到可以使用Google Drive作为图床使用。</p><a id="more"></a><p>登陆Google Drive上传图片之后点击获取链接，我们会得到一个如下的URL地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://drive.google.com/open?id=YOUR_FILE_ID&amp;authuser=0</span><br></pre></td></tr></table></figure><p>但是这个地址是无法直接作为image的src值的，我们需要稍微做一点修改(你必须设置一下google的共享属性<strong>知道此链接的任何人都可以查看</strong>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://drive.google.com/uc?export=view&amp;id=YOUR_FILE_ID</span><br></pre></td></tr></table></figure><p>如果需要让这个文件直接支持下载的话，请使用如下地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://drive.google.com/uc?export=download&amp;id=YOUR_FILE_ID</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候会碰到需要在blog或者GitHub写一些东西的时候需要用到图片，微博图床总是失效，于是想到可以使用Google Drive作为图床使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="MarkDown" scheme="https://marara.xin/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>Swift UILabel 属性</title>
    <link href="https://marara.xin/2017/12/10/Swift-UILabel-%E5%B1%9E%E6%80%A7/"/>
    <id>https://marara.xin/2017/12/10/Swift-UILabel-属性/</id>
    <published>2017-12-09T16:04:19.261Z</published>
    <updated>2018-02-05T10:11:09.591Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 中的 UILabel 属性</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置标签x坐标：10，y坐标：20，长：300，宽：100</span></span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>(frame:<span class="type">CGRectMake</span>(<span class="number">10</span>,<span class="number">20</span>, <span class="number">300</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    显示文本【需要显示什么就设置这个 text 的属性即可】</span></span><br><span class="line">      label.text=<span class="string">" Welcome to study Swift ！"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// label的字体颜色</span></span><br><span class="line">        label.textColor=<span class="type">UIColor</span>.redColor() <span class="comment">//红色文字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// label的背景颜色</span></span><br><span class="line">        label.backgroundColor=<span class="type">UIColor</span>.blackColor() <span class="comment">//黑色背景</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// label的文字对齐方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">          case Left（左对齐）</span></span><br><span class="line"><span class="comment">          case Center（居中）</span></span><br><span class="line"><span class="comment">          case Right（右对齐）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         </span><br><span class="line">        label.textAlignment=<span class="type">NSTextAlignment</span>.<span class="type">Right</span> <span class="comment">//文字右对齐</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    label阴影颜色【要设置偏移位置】(字体的阴影颜色)</span></span><br><span class="line">        label.shadowColor=<span class="type">UIColor</span>.grayColor()  <span class="comment">//灰色阴影</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">//    label阴影偏移位置</span></span><br><span class="line">        label.shadowOffset=<span class="type">CGSizeMake</span>(-<span class="number">5</span>,<span class="number">5</span>)   <span class="comment">//阴影的偏移量</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//    多行显示，默认是一行的,0表示的多行显示（与高度有关）Label自适应自动换行</span></span><br><span class="line">        label.numberOfLines=<span class="number">0</span>   <span class="comment">//显示两行文字（默认只显示一行，设为0表示没有行数限制）</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">//    自适应（不建议使用）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">              1、没有设置多行显示：宽度自适应</span></span><br><span class="line"><span class="comment">              2、设置有多行显示：高度使用</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文本有多大,窗口有多大</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 细节: 不管高度宽度是否足够，都显示相应的高度</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 细节: numberOfLines为1,那么就是单行显示</span></span><br><span class="line"></span><br><span class="line">        label.adjustsFontSizeToFitWidth=<span class="literal">true</span> <span class="comment">//当文字超出标签宽度时，自动调整文字大小，使其不被截断</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置label文本高亮</span></span><br><span class="line">        label.highlighted = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置label文本高亮颜色</span></span><br><span class="line">        label.highlightedTextColor = <span class="type">UIColor</span>.greenColor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// label圆角属性</span></span><br><span class="line">        label.layer.masksToBounds = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// label圆角半径</span></span><br><span class="line">        label.layer.cornerRadius = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// label圆角边框颜色</span></span><br><span class="line">        label.layer.borderColor = <span class="type">UIColor</span>.blueColor().<span class="type">CGColor</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// label圆角边框宽度</span></span><br><span class="line">        label.layer.borderWidth = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">//  label的字体大小</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         systemFontOfSize(20) -&gt; UIFont         (文字大小)</span></span><br><span class="line"><span class="comment">         boldSystemFontOfSize(20) -&gt; UIFont     (加粗类型)</span></span><br><span class="line"><span class="comment">         italicSystemFontOfSize(20) -&gt; UIFont    (斜体类型)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        label.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置字体时，同时设置大小</span></span><br><span class="line">        label.font = <span class="type">UIFont</span>(name:<span class="string">"您好！"</span>, size:<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">        <span class="comment">// label的特殊属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         case ByWordWrapping // Wrap at word boundaries, default</span></span><br><span class="line"><span class="comment">         case ByCharWrapping // Wrap at character boundaries</span></span><br><span class="line"><span class="comment">         case ByClipping // Simply clip</span></span><br><span class="line"><span class="comment">         case ByTruncatingHead // Truncate at head of line: "...wxyz"</span></span><br><span class="line"><span class="comment">         case ByTruncatingTail // Truncate at tail of line: "abcd..."</span></span><br><span class="line"><span class="comment">         case ByTruncatingMiddle // Truncate middle of line:  "ab...yz"</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">label.lineBreakMode=<span class="type">NSLineBreakMode</span>.<span class="type">ByTruncatingTail</span>  <span class="comment">//隐藏尾部并显示省略号</span></span><br><span class="line">       label.lineBreakMode=<span class="type">NSLineBreakMode</span>.<span class="type">ByTruncatingMiddle</span>  <span class="comment">//隐藏中间部分并显示省略号</span></span><br><span class="line"></span><br><span class="line">   label.lineBreakMode=<span class="type">NSLineBreakMode</span>.<span class="type">ByTruncatingHead</span>  <span class="comment">//隐藏头部并显示省略号</span></span><br><span class="line"></span><br><span class="line">        label.lineBreakMode=<span class="type">NSLineBreakMode</span>.<span class="type">ByClipping</span> <span class="comment">//截去多余部分也不显示省略号</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　 <span class="comment">// 将视图添加到(self.view--&gt;父视图)界面中;  </span></span><br><span class="line">        <span class="keyword">self</span>.view.addSubview(label);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     <span class="comment">// 富文本设置</span></span><br><span class="line">        <span class="keyword">let</span> attributeString = <span class="type">NSMutableAttributedString</span>(string:<span class="string">"Welcome to study Swift ！"</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 从文本0开始6个字符字体HelveticaNeue-Bold,16号字体大小</span></span><br><span class="line">        attributeString.addAttribute(<span class="type">NSFontAttributeName</span>, value: <span class="type">UIFont</span>(name: <span class="string">"HelveticaNeue-Bold"</span>, size: <span class="number">16</span>)!,range: <span class="type">NSMakeRange</span>(<span class="number">0</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">     <span class="comment">// 设置字体颜色       </span></span><br><span class="line">    attributeString.addAttribute(<span class="type">NSForegroundColorAttributeName</span>, value: <span class="type">UIColor</span>.blueColor(),range: <span class="type">NSMakeRange</span>(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 设置文字背景颜色       attributeString.addAttribute(NSBackgroundColorAttributeName, value: UIColor.greenColor(),range: NSMakeRange(3,3))</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        label.attributedText = attributeString</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</span><br><span class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift 中的 UILabel 属性&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Swift" scheme="https://marara.xin/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>全局.gitignore</title>
    <link href="https://marara.xin/2017/11/23/gitignore%20global/"/>
    <id>https://marara.xin/2017/11/23/gitignore global/</id>
    <published>2017-11-23T08:10:01.054Z</published>
    <updated>2017-11-23T08:10:01.054Z</updated>
    
    <content type="html"><![CDATA[<p>以<code>.DS_Store</code>文件为例：</p><h3 id="创建-gitignore-global-文件，将需要忽略的文件类型写入文件"><a href="#创建-gitignore-global-文件，将需要忽略的文件类型写入文件" class="headerlink" title="创建 ~/.gitignore_global 文件，将需要忽略的文件类型写入文件"></a>创建 <code>~/.gitignore_global</code> 文件，将需要忽略的文件类型写入文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .gitignore_global</span><br></pre></td></tr></table></figure><h3 id="在-gitconfig-中引用"><a href="#在-gitconfig-中引用" class="headerlink" title="在.gitconfig 中引用"></a>在<code>.gitconfig</code> 中引用</h3><p>打开<code>~/.gitconfig</code>，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[core] </span><br><span class="line">excludesfile = /Users/reon/.gitignore_global</span><br></pre></td></tr></table></figure><p>或是通过：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.excludesfile/Users/reon/.gitignore_global</span><br></pre></td></tr></table></figure><p>命令来实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以&lt;code&gt;.DS_Store&lt;/code&gt;文件为例：&lt;/p&gt;
&lt;h3 id=&quot;创建-gitignore-global-文件，将需要忽略的文件类型写入文件&quot;&gt;&lt;a href=&quot;#创建-gitignore-global-文件，将需要忽略的文件类型写入文件&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Tutorial" scheme="https://marara.xin/categories/Tutorial/"/>
    
    
      <category term="Git" scheme="https://marara.xin/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>C# 中的委托和事件</title>
    <link href="https://marara.xin/2017/11/07/Delegates%20and%20events%20in%20Csharp/"/>
    <id>https://marara.xin/2017/11/07/Delegates and events in Csharp/</id>
    <published>2017-11-07T07:04:49.134Z</published>
    <updated>2017-12-12T00:45:56.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><code>delegate</code> 和 <code>event</code>在 .Net Framework中的应用非常广泛，然而，较好地理解委托和事件对很多接触C#时间不长的人来说并不容易。本文中，我将通过两个范例由浅入深地讲述什么是委托、为什么要使用委托、事件的由来、.Net Framework中的委托和事件、委托和事件对Observer设计模式的意义，对它们的中间代码也做了讨论。</p><a id="more"></a><h2 id="将方法作为方法的参数"><a href="#将方法作为方法的参数" class="headerlink" title="将方法作为方法的参数"></a>将方法作为方法的参数</h2><p>我们先不管这个标题如何的绕口，也不管委托究竟是个什么东西，来看下面这两个最简单的方法，它们不过是在屏幕上输出一句问候的话语：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void GreetPeople(string name) &#123;</span><br><span class="line">    // 做某些额外的事情，比如初始化之类，此处略</span><br><span class="line">    EnglishGreeting(name);</span><br><span class="line">&#125;</span><br><span class="line">public void EnglishGreeting(string name) &#123;</span><br><span class="line">    Console.WriteLine(&quot;Morning, &quot; + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂且不管这两个方法有没有什么实际意义。<code>GreetPeople</code>用于向某人问好，当我们传递代表某人姓名的<code>name</code>参数，比如说“Jimmy”，进去的时候，在这个方法中，将调用<code>EnglishGreeting</code>方法，再次传递<code>name</code>参数，<code>EnglishGreeting</code>则用于向屏幕输出 “Morning, Jimmy”。</p><p>现在假设这个程序需要进行全球化，哎呀，不好了，我是中国人，我不明白“Morning”是什么意思，怎么办呢？好吧，我们再加个中文版的问候方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void ChineseGreeting(string name)&#123;</span><br><span class="line">    Console.WriteLine(&quot;早上好, &quot; + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，<code>GreetPeople</code>也需要改一改了，不然如何判断到底用哪个版本的<code>Greeting</code>问候方法合适呢？在进行这个之前，我们最好再定义一个枚举作为判断的依据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public enum Language&#123;</span><br><span class="line">    English, Chinese</span><br><span class="line">&#125;</span><br><span class="line">public void GreetPeople(string name, Language lang)&#123;</span><br><span class="line">    //做某些额外的事情，比如初始化之类，此处略</span><br><span class="line">    swith(lang)&#123;</span><br><span class="line">        case Language.English:</span><br><span class="line">           EnglishGreeting(name);</span><br><span class="line">           break;</span><br><span class="line">       case Language.Chinese:</span><br><span class="line">           ChineseGreeting(name);</span><br><span class="line">           break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，尽管这样解决了问题，但我不说大家也很容易想到，这个解决方案的可扩展性很差，如果日后我们需要再添加韩文版、日文版，就不得不反复修改枚举和<code>GreetPeople()</code>方法，以适应新的需求。</p><p>在考虑新的解决方案之前，我们先看看 <code>GreetPeople</code>的方法签名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void GreetPeople(string name, Language lang)</span><br></pre></td></tr></table></figure><p>我们仅看 <code>string name</code>，在这里，<code>string</code> 是参数类型，<code>name</code> 是参数变量，当我们赋给<code>name</code>字符串“jimmy”时，它就代表“jimmy”这个值；当我们赋给它“张子阳”时，它又代表着“张子阳”这个值。然后，我们可以在方法体内对这个<code>name</code>进行其他操作。哎，这简直是废话么，刚学程序就知道了。</p><p>如果你再仔细想想，假如<code>GreetPeople()</code>方法可以接受一个参数变量，这个变量可以代表另一个方法，当我们给这个变量赋值 <code>EnglishGreeting</code>的时候，它代表着 <code>EnglsihGreeting()</code> 这个方法；当我们给它赋值<code>ChineseGreeting</code> 的时候，它又代表着 <code>ChineseGreeting()</code>方法。我们将这个参数变量命名为 <code>MakeGreeting</code>，那么不是可以如同给<code>name</code>赋值时一样，在调用 <code>GreetPeople()</code>方法的时候，给这个<code>MakeGreeting</code> 参数也赋上值么(ChineseGreeting或者EnglsihGreeting等)？然后，我们在方法体内，也可以像使用别的参数一样使用<code>MakeGreeting</code>。但是，由于<code>MakeGreeting</code>代表着一个方法，它的使用方式应该和它被赋的方法(比如ChineseGreeting)是一样的，比如：</p><p><code>MakeGreeting(name);</code></p><p>好了，有了思路了，我们现在就来改改<code>GreetPeople()</code>方法，那么它应该是这个样子了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void GreetPeople(string name, *** MakeGreeting)&#123;</span><br><span class="line">    MakeGreeting(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到 <code>***</code> ，这个位置通常放置的应该是参数的类型，但到目前为止，我们仅仅是想到应该有个可以代表方法的参数，并按这个思路去改写<code>GreetPeople</code>方法，现在就出现了一个大问题：<code>***</code>这个代表着方法的MakeGreeting参数应该是什么类型的？</p><blockquote><p><strong>NOTE：</strong>这里已不再需要枚举了，因为在给<code>MakeGreeting</code>赋值的时候动态地决定使用哪个方法，是<code>ChineseGreeting</code>还是 <code>EnglishGreeting</code>，而在这个两个方法内部，已经对使用“morning”还是“早上好”作了区分。</p></blockquote><p>聪明的你应该已经想到了，现在是委托该出场的时候了，但讲述委托之前，我们再看看<code>MakeGreeting</code>参数所能代表的 <code>ChineseGreeting()</code>和<code>EnglishGreeting()</code>方法的签名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public void EnglishGreeting(string name)</span><br><span class="line">public void ChineseGreeting(string name)</span><br></pre></td></tr></table></figure><p>如同<code>name</code>可以接受<code>String</code>类型的“true”和“1”，但不能接受<code>bool</code>类型的true和int类型的1一样。<strong><code>MakeGreeting</code>的 参数类型定义 应该能够确定 <code>MakeGreeting</code>可以代表的方法种类，再进一步讲，就是<code>MakeGreeting</code>可以代表的方法的参数类型和返回类型。</strong></p><p>于是，委托出现了：<strong>它定义了<code>MakeGreeting</code>参数所能代表的方法的种类，也就是<code>MakeGreeting</code>参数的类型。</strong></p><blockquote><p><strong>NOTE：</strong>如果上面这句话比较绕口，我把它翻译成这样：<code>string</code> 定义了<code>name</code>参数所能代表的<strong>值的种类</strong>，也就是<code>name</code>参数的类型。</p></blockquote><p>本例中委托的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public delegate void GreetingDelegate(string name);</span><br></pre></td></tr></table></figure><p>可以与上面<code>EnglishGreeting()</code>方法的签名对比一下，除了加入了<code>delegate</code>关键字以外，其余的是不是完全一样？</p><p>现在，让我们再次改动<code>GreetPeople()</code>方法，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void GreetPeople(string name, GreetingDelegate MakeGreeting)&#123;</span><br><span class="line">    MakeGreeting(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，委托GreetingDelegate出现的位置与 string相同，string是一个类型，那么GreetingDelegate应该也是一个类型，或者叫类(Class)。但是委托的声明方式和类却完全不同，这是怎么一回事？实际上，委托在编译的时候确实会编译成类。因为Delegate是一个类，所以在任何可以声明类的地方都可以声明委托。更多的内容将在下面讲述，现在，请看看这个范例的完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">namespace Delegate &#123;</span><br><span class="line">     //定义委托，它定义了可以代表的方法的类型</span><br><span class="line">     public delegate void GreetingDelegate(string name);</span><br><span class="line">        class Program &#123;</span><br><span class="line">           private static void EnglishGreeting(string name) &#123;</span><br><span class="line">               Console.WriteLine(&quot;Morning, &quot; + name);</span><br><span class="line">           &#125;</span><br><span class="line">           private static void ChineseGreeting(string name) &#123;</span><br><span class="line">               Console.WriteLine(&quot;早上好, &quot; + name);</span><br><span class="line">           &#125;</span><br><span class="line">           //注意此方法，它接受一个GreetingDelegate类型的方法作为参数</span><br><span class="line">           private static void GreetPeople(string name, GreetingDelegate MakeGreeting) &#123;</span><br><span class="line">               MakeGreeting(name);</span><br><span class="line">            &#125;</span><br><span class="line">           static void Main(string[] args) &#123;</span><br><span class="line">               GreetPeople(&quot;Jimmy Zhang&quot;, EnglishGreeting);</span><br><span class="line">               GreetPeople(&quot;张子阳&quot;, ChineseGreeting);</span><br><span class="line">               Console.ReadKey();</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Morning, Jimmy Zhang</span><br><span class="line">早上好, 张子阳</span><br></pre></td></tr></table></figure><p>我们现在对委托做一个总结：</p><p><strong>委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量使用<code>If-Else(Switch)</code>语句，同时使得程序具有更好的可扩展性。</strong></p><h2 id="将方法绑定到委托"><a href="#将方法绑定到委托" class="headerlink" title="将方法绑定到委托"></a>将方法绑定到委托</h2><p>看到这里，是不是有那么点如梦初醒的感觉？于是，你是不是在想：在上面的例子中，我不一定要直接在<code>GreetPeople()</code>方法中给 <code>name</code>参数赋值，我可以像这样使用变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    string name1, name2;</span><br><span class="line">    name1 = &quot;Jimmy Zhang&quot;;</span><br><span class="line">    name2 = &quot;张子阳&quot;; </span><br><span class="line">    GreetPeople(name1, EnglishGreeting);</span><br><span class="line">    GreetPeople(name2, ChineseGreeting);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而既然委托<code>GreetingDelegate</code> 和 类型 <code>string</code> 的地位一样，都是定义了一种参数类型，那么，我是不是也可以这么使用委托？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingDelegate delegate1, delegate2;</span><br><span class="line">    delegate1 = EnglishGreeting;</span><br><span class="line">    delegate2 = ChineseGreeting;</span><br><span class="line">    GreetPeople(&quot;Jimmy Zhang&quot;, delegate1);</span><br><span class="line">    GreetPeople(&quot;张子阳&quot;, delegate2);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所料，这样是没有问题的，程序一如预料的那样输出。这里，我想说的是委托不同于<code>string</code>的一个特性：可以将多个方法赋给同一个委托，或者叫将多个方法绑定到同一个委托，当调用这个委托的时候，将依次调用其所绑定的方法。在这个例子中，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingDelegate delegate1;</span><br><span class="line">    delegate1 = EnglishGreeting; // 先给委托类型的变量赋值</span><br><span class="line">    delegate1 += ChineseGreeting;   // 给此委托变量再绑定一个方法</span><br><span class="line">     // 将先后调用 EnglishGreeting 与 ChineseGreeting 方法</span><br><span class="line">    GreetPeople(&quot;Jimmy Zhang&quot;, delegate1);  </span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Morning, Jimmy Zhang</span><br><span class="line">早上好, Jimmy Zhang</span><br></pre></td></tr></table></figure><p>实际上，我们可以也可以绕过GreetPeople方法，通过委托来直接调用EnglishGreeting和ChineseGreeting：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingDelegate delegate1;</span><br><span class="line">    delegate1 = EnglishGreeting; // 先给委托类型的变量赋值</span><br><span class="line">    delegate1 += ChineseGreeting;   // 给此委托变量再绑定一个方法</span><br><span class="line">    // 将先后调用 EnglishGreeting 与 ChineseGreeting 方法</span><br><span class="line">    delegate1 (&quot;Jimmy Zhang&quot;);   </span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>NOTE：</strong>这在本例中是没有问题的，但回头看下上面GreetPeople()的定义，在它之中可以做一些对于EnglshihGreeting和ChineseGreeting来说都需要进行的工作，为了简便我做了省略。</p></blockquote><p>注意这里，第一次用的“<code>=</code>”，是赋值的语法；第二次，用的是“<code>+=</code>”，是绑定的语法。如果第一次就使用“<code>+=</code>”，将出现“使用了未赋值的局部变量”的编译错误。</p><p>我们也可以使用下面的代码来这样简化这一过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GreetingDelegate delegate1 = new GreetingDelegate(EnglishGreeting);</span><br><span class="line">delegate1 += ChineseGreeting;   // 给此委托变量再绑定一个方法</span><br></pre></td></tr></table></figure><p>看到这里，应该注意到，这段代码第一条语句与实例化一个类是何其的相似，你不禁想到：上面第一次绑定委托时不可以使用“<code>+=</code>”的编译错误，或许可以用这样的方法来避免：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GreetingDelegate delegate1 = new GreetingDelegate();</span><br><span class="line">delegate1 += EnglishGreeting;   // 这次用的是 “+=”，绑定语法。</span><br><span class="line">delegate1 += ChineseGreeting;   // 给此委托变量再绑定一个方法</span><br></pre></td></tr></table></figure><p>但实际上，这样会出现编译错误： <strong>“GreetingDelegate”方法没有采用“0”个参数的重载</strong>。尽管这样的结果让我们觉得有点沮丧，但是编译的提示：<strong>“没有0个参数的重载”</strong>再次让我们联想到了类的构造函数。我知道你一定按捺不住想探个究竟，但再此之前，我们需要先把基础知识和应用介绍完。</p><p><strong>既然给委托可以绑定一个方法，那么也应该有办法取消对方法的绑定，很容易想到，这个语法是“-=”：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingDelegate delegate1 = new GreetingDelegate(EnglishGreeting);</span><br><span class="line">    delegate1 += ChineseGreeting;   // 给此委托变量再绑定一个方法</span><br><span class="line">    // 将先后调用 EnglishGreeting 与 ChineseGreeting 方法</span><br><span class="line">    GreetPeople(&quot;Jimmy Zhang&quot;, delegate1);  </span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    delegate1 -= EnglishGreeting; //取消对EnglishGreeting方法的绑定</span><br><span class="line">    // 将仅调用 ChineseGreeting </span><br><span class="line">    GreetPeople(&quot;张子阳&quot;, delegate1); </span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Morning, Jimmy Zhang</span><br><span class="line">早上好, Jimmy Zhang</span><br><span class="line">早上好, 张子阳</span><br></pre></td></tr></table></figure><p>让我们再次对委托作个总结：</p><p><strong>使用委托可以将多个方法绑定到同一个委托变量，当调用此变量时(这里用“调用”这个词，是因为此变量代表一个方法)，可以依次调用所有绑定的方法。</strong></p><h2 id="事件的由来"><a href="#事件的由来" class="headerlink" title="事件的由来"></a>事件的由来</h2><p>我们继续思考上面的程序：上面的三个方法都定义在<code>Programe</code>类中，这样做是为了理解的方便，实际应用中，通常都是 <code>GreetPeople</code> 在一个类中，<code>ChineseGreeting</code>和 <code>EnglishGreeting</code> 在另外的类中。现在你已经对委托有了初步了解，是时候对上面的例子做个改进了。假设我们将GreetingPeople()放在一个叫<code>GreetingManager</code>的类中，那么新程序应该是这个样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">namespace Delegate &#123;</span><br><span class="line">    //定义委托，它定义了可以代表的方法的类型</span><br><span class="line">    public delegate void GreetingDelegate(string name);</span><br><span class="line">    //新建的GreetingManager类</span><br><span class="line">    public class GreetingManager&#123;</span><br><span class="line">       public void GreetPeople(string name, GreetingDelegate MakeGreeting) &#123;</span><br><span class="line">           MakeGreeting(name);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Program &#123;</span><br><span class="line">       private static void EnglishGreeting(string name) &#123;</span><br><span class="line">           Console.WriteLine(&quot;Morning, &quot; + name);</span><br><span class="line">       &#125;</span><br><span class="line">       private static void ChineseGreeting(string name) &#123;</span><br><span class="line">           Console.WriteLine(&quot;早上好, &quot; + name);</span><br><span class="line">       &#125;</span><br><span class="line">       static void Main(string[] args) &#123;</span><br><span class="line">           // ... ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，如果要实现前面演示的输出效果，<code>Main</code>方法我想应该是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingManager gm = new  GreetingManager();</span><br><span class="line">    gm.GreetPeople(&quot;Jimmy Zhang&quot;, EnglishGreeting);</span><br><span class="line">    gm.GreetPeople(&quot;张子阳&quot;, ChineseGreeting);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们运行这段代码，嗯，没有任何问题。程序一如预料地那样输出了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Morning, Jimmy Zhang</span><br><span class="line">早上好, 张子阳</span><br></pre></td></tr></table></figure><p>现在，假设我们需要使用上一节学到的知识，将多个方法绑定到同一个委托变量，该如何做呢？让我们再次改写代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingManager gm = new  GreetingManager();</span><br><span class="line">    GreetingDelegate delegate1;</span><br><span class="line">    delegate1 = EnglishGreeting;</span><br><span class="line">    delegate1 += ChineseGreeting;</span><br><span class="line">    gm.GreetPeople(&quot;Jimmy Zhang&quot;, delegate1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Morning, Jimmy Zhang</span><br><span class="line">早上好, Jimmy Zhang</span><br></pre></td></tr></table></figure><p>到了这里，我们不禁想到：面向对象设计，讲究的是对象的封装，既然可以声明委托类型的变量(在上例中是delegate1)，我们何不将这个变量封装到 <code>GreetManager</code>类中？在这个类的客户端中使用不是更方便么？于是，我们改写<code>GreetManager</code>类，像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class GreetingManager&#123;</span><br><span class="line">    //在GreetingManager类的内部声明delegate1变量</span><br><span class="line">    public GreetingDelegate delegate1;  </span><br><span class="line">    public void GreetPeople(string name, GreetingDelegate MakeGreeting) &#123;</span><br><span class="line">       MakeGreeting(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以这样使用这个委托变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingManager gm = new  GreetingManager();</span><br><span class="line">    gm.delegate1 = EnglishGreeting;</span><br><span class="line">    gm.delegate1 += ChineseGreeting;</span><br><span class="line">    gm.GreetPeople(&quot;Jimmy Zhang&quot;, gm.delegate1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Morning, Jimmy Zhang</span><br><span class="line">早上好, Jimmy Zhang</span><br></pre></td></tr></table></figure><p>尽管这样做没有任何问题，但我们发现这条语句很奇怪。在调用gm.GreetPeople方法的时候，再次传递了<code>gm</code>的<code>delegate1</code>字段：</p><p><code>gm.GreetPeople(&quot;Jimmy Zhang&quot;, gm.delegate1);</code></p><p>既然如此，我们何不修改 <code>GreetingManager</code> 类成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class GreetingManager&#123;</span><br><span class="line">    //在GreetingManager类的内部声明delegate1变量</span><br><span class="line">    public GreetingDelegate delegate1;  </span><br><span class="line">    public void GreetPeople(string name) &#123;</span><br><span class="line">        if(delegate1!=null)&#123;     //如果有方法注册委托变量</span><br><span class="line">          delegate1(name);      //通过委托调用方法</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在客户端，调用看上去更简洁一些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingManager gm = new  GreetingManager();</span><br><span class="line">    gm.delegate1 = EnglishGreeting;</span><br><span class="line">    gm.delegate1 += ChineseGreeting;</span><br><span class="line">    gm.GreetPeople(&quot;Jimmy Zhang&quot;);      //注意，这次不需要再传递 delegate1变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Morning, Jimmy Zhang</span><br><span class="line">早上好, Jimmy Zhang</span><br></pre></td></tr></table></figure><p>尽管这样达到了我们要的效果，但是还是存在着问题：</p><p>在这里，<code>delegate1</code>和我们平时用的<code>string</code>类型的变量没有什么分别，而我们知道，并不是所有的字段都应该声明成<code>public</code>，合适的做法是应该<code>public</code>的时候<code>public</code>，应该<code>private</code>的时候<code>private</code>。</p><p>我们先看看如果把 <code>delegate1</code> 声明为 <code>private</code>会怎样？结果就是：<strong>这简直就是在搞笑。因为声明委托的目的就是为了把它暴露在类的客户端进行方法的注册，你把它声明为<code>private</code>了，客户端对它根本就不可见，那它还有什么用？</strong></p><p>再看看把<code>delegate1</code> 声明为 <code>public</code> 会怎样？结果就是：<strong>在客户端可以对它进行随意的赋值等操作，严重破坏对象的封装性。</strong></p><p>最后，第一个方法注册用“<code>=</code>”，是赋值语法，因为要进行实例化，第二个方法注册则用的是“<code>+=</code>”。但是，不<strong>管是赋值还是注册，都是将方法绑定到委托上，除了调用时先后顺序不同，再没有任何的分别，这样不是让人觉得很别扭么？</strong></p><p>现在我们想想，如果<code>delegate1</code>不是一个委托类型，而是一个<code>string</code>类型，你会怎么做？<strong>答案是使用属性对字段进行封装。</strong></p><p>于是，<code>Event</code>出场了，它封装了委托类型的变量，使得：<strong>在类的内部，不管你声明它是<code>public</code>还是<code>protected</code>，它总是<code>private</code>的。在类的外部，注册“<code>+=</code>”和注销“<code>-=</code>”的访问限定符与你在声明事件时使用的访问符相同。</strong></p><p>我们改写<code>GreetingManager</code>类，它变成了这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class GreetingManager&#123;</span><br><span class="line">    //这一次我们在这里声明一个事件</span><br><span class="line">    public event GreetingDelegate MakeGreet;</span><br><span class="line">    public void GreetPeople(string name) &#123;</span><br><span class="line">        MakeGreet(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易注意到：<code>MakeGreet</code> 事件的声明与之前委托变量<code>delegate1</code>的声明唯一的区别是多了一个<code>event</code>关键字。看到这里，在结合上面的讲解，你应该明白到：<strong>事件其实没什么不好理解的，声明一个事件不过类似于声明一个进行了封装的委托类型的变量而已。</strong></p><p>为了证明上面的推论，如果我们像下面这样改写<code>Main</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args) &#123;</span><br><span class="line">    GreetingManager gm = new  GreetingManager();</span><br><span class="line">    gm.MakeGreet = EnglishGreeting;         // 编译错误1</span><br><span class="line">    gm.MakeGreet += ChineseGreeting;</span><br><span class="line">    gm.GreetPeople(&quot;Jimmy Zhang&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会得到编译错误：<code>事件“Delegate.GreetingManager.MakeGreet”只能出现在 += 或 -= 的左边(从类型“Delegate.GreetingManager”中使用时除外)。</code></p><h2 id="事件和委托的编译代码"><a href="#事件和委托的编译代码" class="headerlink" title="事件和委托的编译代码"></a>事件和委托的编译代码</h2><p>这时候，我们注释掉编译错误的行，然后重新进行编译，再借助Reflactor来对 <code>event</code>的声明语句做一探究，看看为什么会发生这样的错误：</p><p><code>public event GreetingDelegate MakeGreet;</code></p><p><img src="http://www.tracefact.net/graph/delegate/01.gif" alt=" "></p><p>可以看到，实际上尽管我们在<code>GreetingManager</code>里将 <code>MakeGreet</code> 声明为<code>public</code>，但是，实际上<code>MakeGreet</code>会被编译成 私有字段，难怪会发生上面的编译错误了，因为它根本就不允许在<code>GreetingManager</code>类的外面以赋值的方式访问，从而验证了我们上面所做的推论。</p><p>我们再进一步看下<code>MakeGreet</code>所产生的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private GreetingDelegate MakeGreet; //对事件的声明 实际是 声明一个私有的委托变量</span><br><span class="line">[MethodImpl(MethodImplOptions.Synchronized)]</span><br><span class="line">public void add_MakeGreet(GreetingDelegate value)&#123;</span><br><span class="line">    this.MakeGreet = (GreetingDelegate) Delegate.Combine(this.MakeGreet, value);</span><br><span class="line">&#125;</span><br><span class="line">[MethodImpl(MethodImplOptions.Synchronized)]</span><br><span class="line">public void remove_MakeGreet(GreetingDelegate value)&#123;</span><br><span class="line">    this.MakeGreet = (GreetingDelegate) Delegate.Remove(this.MakeGreet, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在已经很明确了：<strong><code>MakeGreet</code>事件确实是一个<code>GreetingDelegate</code>类型的委托，只不过不管是不是声明为<code>public</code>，它总是被声明为<code>private</code>。另外，它还有两个方法，分别是<code>add_MakeGreet</code>和<code>remove_MakeGreet</code>，这两个方法分别用于注册委托类型的方法和取消注册。</strong>实际上也就是： “<code>+=</code> ”对应 <code>add_MakeGreet</code>，“<code>-=</code>”对应<code>remove_MakeGreet</code>。而这两个方法的访问限制取决于声明事件时的访问限制符。</p><p>在<code>add_MakeGreet()</code>方法内部，实际上调用了<code>System.Delegate</code>的<code>Combine()</code>静态方法，这个方法用于将当前的变量添加到委托链表中。我们前面提到过两次，说委托实际上是一个类，在我们定义委托的时候：</p><p><code>public delegate void GreetingDelegate(string name);</code></p><p>当编译器遇到这段代码的时候，会生成下面这样一个完整的类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public sealed class GreetingDelegate:System.MulticastDelegate&#123;</span><br><span class="line">    public GreetingDelegate(object @object, IntPtr method);</span><br><span class="line">    public virtual IAsyncResult BeginInvoke(string name, AsyncCallback callback, object @object);</span><br><span class="line">    public virtual void EndInvoke(IAsyncResult result);</span><br><span class="line">    public virtual void Invoke(string name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://www.tracefact.net/graph/delegate/02.gif" alt=" "></p><blockquote><p>关于这个类的更深入内容，可以参阅《CLR Via C#》等相关书籍，这里就不再讨论了。</p></blockquote><h2 id="委托、事件与Observer设计模式"><a href="#委托、事件与Observer设计模式" class="headerlink" title="委托、事件与Observer设计模式"></a>委托、事件与Observer设计模式</h2><h3 id="范例说明"><a href="#范例说明" class="headerlink" title="范例说明"></a>范例说明</h3><p>上面的例子已不足以再进行下面的讲解了，我们来看一个新的范例，因为之前已经介绍了很多的内容，所以本节的进度会稍微快一些：</p><p>假设我们有个高档的热水器，我们给它通上电，当水温超过95度的时候：</p><ol><li>扬声器会开始发出语音，告诉你水的温度；</li><li>液晶屏也会改变水温的显示，来提示水已经快烧开了。</li></ol><p>现在我们需要写个程序来模拟这个烧水的过程，我们将定义一个类来代表热水器，我们管它叫：<code>Heater</code>，它有代表水温的字段，叫做<code>temperature</code>；当然，还有必不可少的给水加热方法<code>BoilWater()</code>，一个发出语音警报的方法<code>MakeAlert()</code>，一个显示水温的方法，<code>ShowMsg()</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">namespace Delegate &#123;</span><br><span class="line">    class Heater &#123;</span><br><span class="line">        private int temperature; // 水温</span><br><span class="line">        // 烧水</span><br><span class="line">        public void BoilWater() &#123;</span><br><span class="line">            for (int i = 0; i &lt;= 100; i++) &#123;</span><br><span class="line">               temperature = i;</span><br><span class="line">               if (temperature &gt; 95) &#123;</span><br><span class="line">                   MakeAlert(temperature);</span><br><span class="line">                   ShowMsg(temperature);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    // 发出语音警报</span><br><span class="line">    private void MakeAlert(int param) &#123;</span><br><span class="line">       Console.WriteLine(&quot;Alarm：嘀嘀嘀，水已经 &#123;0&#125; 度了：&quot; , param);</span><br><span class="line">    &#125;</span><br><span class="line">    // 显示水温</span><br><span class="line">    private void ShowMsg(int param) &#123;</span><br><span class="line">       Console.WriteLine(&quot;Display：水快开了，当前温度：&#123;0&#125;度。&quot; , param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    class Program &#123;</span><br><span class="line">        static void Main() &#123;</span><br><span class="line">           Heater ht = new Heater();</span><br><span class="line">           ht.BoilWater();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Observer设计模式简介"><a href="#Observer设计模式简介" class="headerlink" title="Observer设计模式简介"></a>Observer设计模式简介</h3><p>上面的例子显然能完成我们之前描述的工作，但是却并不够好。现在假设热水器由三部分组成：热水器、警报器、显示器，它们来自于不同厂商并进行了组装。那么，应该是<strong>热水器</strong>仅仅负责烧水，它不能发出警报也不能显示水温；在水烧开时由<strong>警报器</strong>发出警报、<strong>显示器</strong>显示提示和水温。</p><p>这时候，上面的例子就应该变成这个样子：    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 热水器</span><br><span class="line">public class Heater &#123; </span><br><span class="line">    private int temperature;</span><br><span class="line">    // 烧水</span><br><span class="line">    private void BoilWater() &#123;</span><br><span class="line">       for (int i = 0; i &lt;= 100; i++) &#123;</span><br><span class="line">           temperature = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 警报器</span><br><span class="line">public class Alarm&#123;</span><br><span class="line">    private void MakeAlert(int param) &#123;</span><br><span class="line">       Console.WriteLine(&quot;Alarm：嘀嘀嘀，水已经 &#123;0&#125; 度了：&quot; , param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 显示器</span><br><span class="line">public class Display&#123;</span><br><span class="line">    private void ShowMsg(int param) &#123;</span><br><span class="line">       Console.WriteLine(&quot;Display：水已烧开，当前温度：&#123;0&#125;度。&quot; , param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就出现了一个问题：如何在水烧开的时候通知报警器和显示器？在继续进行之前，我们先了解一下<code>Observer</code>设计模式，Observer设计模式中主要包括如下两类对象：</p><ol><li><code>Subject</code>：监视对象，它往往包含着其他对象所感兴趣的内容。在本范例中，热水器就是一个监视对象，它包含的其他对象所感兴趣的内容，就是<code>temprature</code>字段，当这个字段的值快到100时，会不断把数据发给监视它的对象。</li><li><code>Observer</code>：监视者，它监视<code>Subject</code>，当<code>Subject</code>中的某件事发生的时候，会告知<code>Observer</code>，而<code>Observer</code>则会采取相应的行动。在本范例中，<code>Observer</code>有警报器和显示器，它们采取的行动分别是发出警报和显示水温。</li></ol><p>在本例中，事情发生的顺序应该是这样的：</p><ol><li>警报器和显示器告诉热水器，它对它的温度比较感兴趣(注册)。</li><li>热水器知道后保留对警报器和显示器的引用。</li><li>热水器进行烧水这一动作，当水温超过95度时，通过对警报器和显示器的引用，自动调用警报器的<code>MakeAlert()</code>方法、显示器的<code>ShowMsg()</code>方法。</li></ol><p>类似这样的例子是很多的，GOF对它进行了抽象，称为<code>Observer</code>设计模式：<strong><code>Observer</code>设计模式是为了定义对象间的一种一对多的依赖关系，以便于当一个对象的状态改变时，其他依赖于它的对象会被自动告知并更新。<code>Observer</code>模式是一种松耦合的设计模式。</strong></p><h3 id="实现范例的Observer设计模式"><a href="#实现范例的Observer设计模式" class="headerlink" title="实现范例的Observer设计模式"></a>实现范例的Observer设计模式</h3><p>我们之前已经对委托和事件介绍很多了，现在写代码应该很容易了，现在在这里直接给出代码，并在注释中加以说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">namespace Delegate &#123;</span><br><span class="line">    // 热水器</span><br><span class="line">    public class Heater &#123;</span><br><span class="line">       private int temperature;</span><br><span class="line">       public delegate void BoilHandler(int param);   //声明委托</span><br><span class="line">       public event BoilHandler BoilEvent;        //声明事件</span><br><span class="line">       // 烧水</span><br><span class="line">       public void BoilWater() &#123;</span><br><span class="line">           for (int i = 0; i &lt;= 100; i++) &#123;</span><br><span class="line">              temperature = i;</span><br><span class="line">              if (temperature &gt; 95) &#123;</span><br><span class="line">                  if (BoilEvent != null) &#123; //如果有对象注册</span><br><span class="line">                      BoilEvent(temperature);  //调用所有注册对象的方法</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 警报器</span><br><span class="line">    public class Alarm &#123;</span><br><span class="line">       public void MakeAlert(int param) &#123;</span><br><span class="line">           Console.WriteLine(&quot;Alarm：嘀嘀嘀，水已经 &#123;0&#125; 度了：&quot;, param);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 显示器</span><br><span class="line">    public class Display &#123;</span><br><span class="line">       public static void ShowMsg(int param) &#123; //静态方法</span><br><span class="line">           Console.WriteLine(&quot;Display：水快烧开了，当前温度：&#123;0&#125;度。&quot;, param);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Program &#123;</span><br><span class="line">       static void Main() &#123;</span><br><span class="line">           Heater heater = new Heater();</span><br><span class="line">           Alarm alarm = new Alarm();</span><br><span class="line">           heater.BoilEvent += alarm.MakeAlert;    //注册方法</span><br><span class="line">           heater.BoilEvent += (new Alarm()).MakeAlert;   //给匿名对象注册方法</span><br><span class="line">           heater.BoilEvent += Display.ShowMsg;       //注册静态方法</span><br><span class="line">           heater.BoilWater();   //烧水，会自动调用注册过对象的方法</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Alarm：嘀嘀嘀，水已经 96 度了：</span><br><span class="line">Alarm：嘀嘀嘀，水已经 96 度了：</span><br><span class="line">Display：水快烧开了，当前温度：96度。</span><br><span class="line">// 省略...</span><br></pre></td></tr></table></figure><h2 id="Net-Framework中的委托与事件"><a href="#Net-Framework中的委托与事件" class="headerlink" title=".Net Framework中的委托与事件"></a>.Net Framework中的委托与事件</h2><p>尽管上面的范例很好地完成了我们想要完成的工作，但是我们不仅疑惑：为什么.Net Framework 中的事件模型和上面的不同？为什么有很多的EventArgs参数？</p><p>在回答上面的问题之前，我们先搞懂 .Net Framework的编码规范：</p><ul><li>委托类型的名称都应该以<code>EventHandler</code>结束。</li><li>委托的原型定义：有一个<code>void</code>返回值，并接受两个输入参数：一个<code>Object</code> 类型，一个 <code>EventArgs</code>类型(或继承自<code>EventArgs</code>)。</li><li>事件的命名为 委托去掉 <code>EventHandler</code>之后剩余的部分。</li><li>继承自<code>EventArgs</code>的类型应该以<code>EventArgs</code>结尾。</li></ul><p>再做一下说明：</p><ol><li>委托声明原型中的<code>Object</code>类型的参数代表了<code>Subject</code>，也就是监视对象，在本例中是 <code>Heater</code>(热水器)。回调函数(比如<code>Alarm</code>的<code>MakeAlert</code>)可以通过它访问触发事件的对象(<code>Heater</code>)。</li><li><code>EventArgs</code> 对象包含了<code>Observer</code>所感兴趣的数据，在本例中是<code>temperature</code>。</li></ol><p><strong>上面这些其实不仅仅是为了编码规范而已，这样也使得程序有更大的灵活性。</strong>比如说，如果我们不光想获得热水器的温度，还想在<code>Observer</code>端(警报器或者显示器)方法中获得它的生产日期、型号、价格，那么委托和方法的声明都会变得很麻烦，而如果我们将热水器的引用传给警报器的方法，就可以在方法中直接访问热水器了。</p><p>现在我们改写之前的范例，让它符合 .Net Framework 的规范：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">namespace Delegate &#123;</span><br><span class="line">    // 热水器</span><br><span class="line">    public class Heater &#123;</span><br><span class="line">       private int temperature;</span><br><span class="line">       public string type = &quot;RealFire 001&quot;;       // 添加型号作为演示</span><br><span class="line">       public string area = &quot;China Xian&quot;;         // 添加产地作为演示</span><br><span class="line">       //声明委托</span><br><span class="line">       public delegate void BoiledEventHandler(Object sender, BoiledEventArgs e);</span><br><span class="line">       public event BoiledEventHandler Boiled; //声明事件</span><br><span class="line">       // 定义BoiledEventArgs类，传递给Observer所感兴趣的信息</span><br><span class="line">       public class BoiledEventArgs : EventArgs &#123;</span><br><span class="line">           public readonly int temperature;</span><br><span class="line">           public BoiledEventArgs(int temperature) &#123;</span><br><span class="line">              this.temperature = temperature;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       // 可以供继承自 Heater 的类重写，以便继承类拒绝其他对象对它的监视</span><br><span class="line">       protected virtual void OnBoiled(BoiledEventArgs e) &#123;</span><br><span class="line">           if (Boiled != null) &#123; // 如果有对象注册</span><br><span class="line">              Boiled(this, e);  // 调用所有注册对象的方法</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       // 烧水。</span><br><span class="line">       public void BoilWater() &#123;</span><br><span class="line">           for (int i = 0; i &lt;= 100; i++) &#123;</span><br><span class="line">              temperature = i;</span><br><span class="line">              if (temperature &gt; 95) &#123;</span><br><span class="line">                  //建立BoiledEventArgs 对象。</span><br><span class="line">                  BoiledEventArgs e = new BoiledEventArgs(temperature);</span><br><span class="line">                  OnBoiled(e);  // 调用 OnBolied方法</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 警报器</span><br><span class="line">    public class Alarm &#123;</span><br><span class="line">       public void MakeAlert(Object sender, Heater.BoiledEventArgs e) &#123;</span><br><span class="line">           Heater heater = (Heater)sender;     //这里是不是很熟悉呢？</span><br><span class="line">           //访问 sender 中的公共字段</span><br><span class="line">           Console.WriteLine(&quot;Alarm：&#123;0&#125; - &#123;1&#125;: &quot;, heater.area, heater.type);</span><br><span class="line">           Console.WriteLine(&quot;Alarm: 嘀嘀嘀，水已经 &#123;0&#125; 度了：&quot;, e.temperature);</span><br><span class="line">           Console.WriteLine();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 显示器</span><br><span class="line">    public class Display &#123;</span><br><span class="line">       public static void ShowMsg(Object sender, Heater.BoiledEventArgs e) &#123;   //静态方法</span><br><span class="line">           Heater heater = (Heater)sender;</span><br><span class="line">           Console.WriteLine(&quot;Display：&#123;0&#125; - &#123;1&#125;: &quot;, heater.area, heater.type);</span><br><span class="line">           Console.WriteLine(&quot;Display：水快烧开了，当前温度：&#123;0&#125;度。&quot;, e.temperature);</span><br><span class="line">           Console.WriteLine();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Program &#123;</span><br><span class="line">       static void Main() &#123;</span><br><span class="line">           Heater heater = new Heater();</span><br><span class="line">           Alarm alarm = new Alarm();</span><br><span class="line">           heater.Boiled += alarm.MakeAlert;   //注册方法</span><br><span class="line">           heater.Boiled += (new Alarm()).MakeAlert;      //给匿名对象注册方法</span><br><span class="line">           heater.Boiled += new Heater.BoiledEventHandler(alarm.MakeAlert);    //也可以这么注册</span><br><span class="line">           heater.Boiled += Display.ShowMsg;       //注册静态方法</span><br><span class="line">           heater.BoilWater();   //烧水，会自动调用注册过对象的方法</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Alarm：China Xian - RealFire 001:</span><br><span class="line">Alarm: 嘀嘀嘀，水已经 96 度了：</span><br><span class="line">Alarm：China Xian - RealFire 001:</span><br><span class="line">Alarm: 嘀嘀嘀，水已经 96 度了：</span><br><span class="line">Alarm：China Xian - RealFire 001:</span><br><span class="line">Alarm: 嘀嘀嘀，水已经 96 度了：</span><br><span class="line">Display：China Xian - RealFire 001:</span><br><span class="line">Display：水快烧开了，当前温度：96度。</span><br><span class="line">// 省略 ...</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中我首先通过一个<code>GreetingPeople</code>的小程序向大家介绍了委托的概念、委托用来做什么，随后又引出了事件，接着对委托与事件所产生的中间代码做了粗略的讲述。</p><p>在第二个稍微复杂点的热水器的范例中，我向大家简要介绍了 <code>Observer</code>设计模式，并通过实现这个范例完成了该模式，随后讲述了.Net Framework中委托、事件的实现方式。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章转载自<a href="http://www.tracefact.net/csharp-programming/delegates-and-events-in-csharp.aspx" target="_blank" rel="noopener">张子阳 -《.NET之美》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;delegate&lt;/code&gt; 和 &lt;code&gt;event&lt;/code&gt;在 .Net Framework中的应用非常广泛，然而，较好地理解委托和事件对很多接触C#时间不长的人来说并不容易。本文中，我将通过两个范例由浅入深地讲述什么是委托、为什么要使用委托、事件的由来、.Net Framework中的委托和事件、委托和事件对Observer设计模式的意义，对它们的中间代码也做了讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="C#" scheme="https://marara.xin/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>命令行、终端和 Git 的代理设置</title>
    <link href="https://marara.xin/2017/10/31/Proxy%20setting%20of%20CMD:Terminal/"/>
    <id>https://marara.xin/2017/10/31/Proxy setting of CMD:Terminal/</id>
    <published>2017-10-31T08:19:58.131Z</published>
    <updated>2017-10-31T08:19:58.131Z</updated>
    
    <content type="html"><![CDATA[<p>本文整理了 Windows 命令行 和 Linux 终端以及 Git 中设置代理的命令。以本地 HTTP/HTTPS 代理 <code>127.0.0.1:8118</code> 和 SOCKS5 代理 <code>127.0.0.1:1080</code> 为例。</p><a id="more"></a><h2 id="Windows-命令行代理设置"><a href="#Windows-命令行代理设置" class="headerlink" title="Windows 命令行代理设置"></a>Windows 命令行代理设置</h2><p>HTTP 代理设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:8118</span><br><span class="line">set https_proxy=http://127.0.0.1:8118</span><br></pre></td></tr></table></figure><p>SOCKS5 代理设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=socks5://127.0.0.1:1080</span><br><span class="line">set https_proxy=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>可以通过 <code>echo %http_proxy%</code> 命令查看是否设置成功。</p><p>取消代理设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=</span><br><span class="line">set https_proxy=</span><br></pre></td></tr></table></figure><h2 id="Linux-终端代理设置"><a href="#Linux-终端代理设置" class="headerlink" title="Linux 终端代理设置"></a>Linux 终端代理设置</h2><h3 id="临时代理设置"><a href="#临时代理设置" class="headerlink" title="临时代理设置"></a>临时代理设置</h3><p>Linux 终端设置 HTTP 代理（只对当前终端有效）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span></span><br></pre></td></tr></table></figure><p>Linux 中设置 SOCKS5 代理（只对当前终端有效）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> http_proxy=socks5://127.0.0.1:1080</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> https_proxy=socks5://127.0.0.1:1080</span></span><br></pre></td></tr></table></figure><p>设置终端中的 wget、curl 等都走 SOCKS5 代理（只对当前终端有效）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080</span></span><br></pre></td></tr></table></figure><p>Linux 终端中取消代理设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> http_proxy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> https_proxy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">unset</span> ALL_RPOXY</span></span><br></pre></td></tr></table></figure><h3 id="永久代理设置"><a href="#永久代理设置" class="headerlink" title="永久代理设置"></a>永久代理设置</h3><p>将代理命令写入配置文件 <code>~/.profile</code> 或 <code>~/.bashrc</code> 或 <code>~/.zshrc</code> 中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> HTTP 代理设置</span></span><br><span class="line">export http_proxy=http://127.0.0.1:8118</span><br><span class="line">export https_proxy=http://127.0.0.1:8118</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> SOCKS5 代理设置</span></span><br><span class="line">export http_proxy=socks5://127.0.0.1:1080</span><br><span class="line">export https_proxy=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 强制终端中的 wget、curl 等都走 SOCKS5 代理</span></span><br><span class="line">export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>或简化操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias pc="export ALL_PROXY=socks5://127.0.0.1:1080; echo 'Proxy on';"</span><br></pre></td></tr></table></figure><h2 id="Git-设置代理"><a href="#Git-设置代理" class="headerlink" title="Git 设置代理"></a>Git 设置代理</h2><p>代理格式 <code>[protocol://][user[:password]@]proxyhost[:port]</code><br>参考 <a href="https://git-scm.com/docs/git-config" target="_blank" rel="noopener">https://git-scm.com/docs/git-config</a></p><p>设置 HTTP 代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:8118</span><br><span class="line">git config --global https.proxy http://127.0.0.1:8118</span><br></pre></td></tr></table></figure><p>设置 SOCKS5 代理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>Git 取消代理设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文整理了 Windows 命令行 和 Linux 终端以及 Git 中设置代理的命令。以本地 HTTP/HTTPS 代理 &lt;code&gt;127.0.0.1:8118&lt;/code&gt; 和 SOCKS5 代理 &lt;code&gt;127.0.0.1:1080&lt;/code&gt; 为例。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://marara.xin/categories/Tutorial/"/>
    
    
      <category term="Git" scheme="https://marara.xin/tags/Git/"/>
    
      <category term="Terminal" scheme="https://marara.xin/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>初步了解 Swift 中的可选类型和方法函数</title>
    <link href="https://marara.xin/2017/10/25/Optional%20types%20and%20method%20functions%20in%20Swift/"/>
    <id>https://marara.xin/2017/10/25/Optional types and method functions in Swift/</id>
    <published>2017-10-25T09:19:23.069Z</published>
    <updated>2017-10-25T10:17:38.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可选类型和解包"><a href="#可选类型和解包" class="headerlink" title="可选类型和解包"></a>可选类型和解包</h2><p>Swift中，在数组的方括号内必须写上类型，或者在<code>Array</code>后面的尖括号<code>&lt;&gt;</code>内写上类型。</p><p>对于字典而言，你一共需要提供两个类型，一个用于键，而另一个用于值。</p><p>Swift要求所有的变量和常量都必须有值。你可以在声明它们的时候给它们指定一个值，也可以通过<code>init</code>方法给它们分配值。</p><a id="more"></a><p>有时，你需要一个变量可以没有值，这种情况，你需要将变量声明为可选型：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> checklistToEdit: <span class="type">Checklist</span>?</span><br></pre></td></tr></table></figure><p>可是你不能直接使用这种类型的变量，你必须在使用它们之前，侦测一下其中是否有值，这个行为就叫做可选型解包：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> checklist = checklistToEdit &#123;</span><br><span class="line">  <span class="comment">// “checklist” now contains the real object</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// the optional was nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面例子中的变量<code>age</code>就是一个可选型，因为没有任何保证说字典中存在一个名为”Jony Ive”的键，所以<code>age</code>的类型是<code>Int?</code>，而不是<code>Int</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> age = dict[<span class="string">"Jony Ive"</span>] &#123;</span><br><span class="line"><span class="comment">// 使用age变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你100%的确定字典中存在一个叫做”Jony Ive”的键的话，那么你就可以对<code>age</code>变量进行强制解包：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = dict[<span class="string">"Jony Ive"</span>]!</span><br></pre></td></tr></table></figure><p>你使用感叹号<code>!</code>来通知Swift，“这个可选型不会为nil，我用我的名誉打赌！”，当然，如果你错了的话，这个变量的值为<code>nil</code>，那么app就会挂掉，你也就名誉扫地了，所以你在使用强制解包的时候一定要小心。</p><p>另一种稍微安全点的强制解包方式叫做可选型链接。例如，下面的语句会在<code>navigationController</code>为<code>nil</code>时把app挂掉。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationController!.delegate = <span class="keyword">self</span></span><br></pre></td></tr></table></figure><p>但是像这样做则不会把app挂掉：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigationController?.delegate = <span class="keyword">self</span></span><br></pre></td></tr></table></figure><p>位于问号后面的任何东西，都会在<code>navigationController</code>为<code>nil</code>时把它忽视掉。这个使用问号强制解包的语句等价于下面的语句：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> navigationController != <span class="literal">nil</span> &#123;</span><br><span class="line">  navigationController!.delegate = <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明可选型的时候，也可以用感叹号来代替问号，这样就是一个隐式解包可选型了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dataModel: <span class="type">DataModel</span>!</span><br></pre></td></tr></table></figure><p>这样的变量会带来潜在的危险，因为你可以如同使用常规变量那样直接使用它，并不需要先解包。一旦如果它的值为空，那么app就挂了。而当使用的常规变量为空时，编译器则会提示你该怎么做。</p><p>可选型平时被包裹起来，以避免app崩溃，但是使用了感叹号以后，就解除了可选型的安全级别。</p><p>然而，有时使用<strong>隐式解包可选型</strong>比使用<strong>可选型</strong>要方便一些。当你无法给一个变量初始值，也无法用<code>init</code>方法对其初始化的时候，你就会需要到这种隐式解包可选型。</p><p>如果你给了一个变量一个值后，就不应该再使它为<code>nil</code>，如果一个变量可以从有值变为<code>nil</code>，那么你最好还是使用用问号声明的可选型。</p><h2 id="方法与函数（Methods-and-functions）"><a href="#方法与函数（Methods-and-functions）" class="headerlink" title="方法与函数（Methods and functions）"></a>方法与函数（Methods and functions）</h2><p>有这样的一种对象，它是所有app的基础组成部分，同时具有数据和功能。实例变量及常量提供数据，方法提供功能。</p><h3 id="方法的返回值"><a href="#方法的返回值" class="headerlink" title="方法的返回值"></a>方法的返回值</h3><p>当你调用一个方法，app就会跳转到方法中，逐条的执行其中的语句，当方法中最后一条语句被执行完毕后，app就会会到之前离开的地方：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = performUselessCalculation(<span class="number">314</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">performUselessCalculation</span><span class="params">(<span class="number">_</span> a: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="type">Int</span>(arc4random_uniform(<span class="number">100</span>))</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">c</span> = a / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> (a + b) * <span class="built_in">c</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法经常会返回一个值给调用者，比如一个计算结果或者从一个集合中找到的一个对象。返回值的类型会写在<code>-&gt;</code>符号的后面。在上面的例子中，返回值的类型是<code>Int</code>。如果不存在<code>-&gt;</code>这个符号，那么就是说这个方法不返回任何值。</p><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><p>方法就是属于某一特定对象的函数，Swift中也存在独立的函数，比如<code>print()</code>或者<code>arc4random_uniform()</code>。</p><p>函数和方法的工作原理一样，一个可重复使用的功能块，但是函数不属于任何对象。像这种函数也被称为自由函数或者全局函数。</p><p>下面是一些关于方法的例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个方法没有返回值及参数的方法</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法有一个slider参数，但是一样没有返回值</span></span><br><span class="line"><span class="comment">// 关键字@IBAction意味着这个方法可以被连接到界面建造器的控件上</span></span><br><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">sliderMoved</span><span class="params">(<span class="number">_</span> slider: UISlider)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法没有参数，但是有一个Int型的返回值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countUncheckedItems</span><span class="params">()</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法有两个参数，cell和item，但是没有返回值</span></span><br><span class="line"><span class="comment">// 注意一下，第一个参数有一个外部名称for，而第二个参数有一个外部名称with</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureCheckmarkFor</span><span class="params">(<span class="keyword">for</span> cell: UITableViewCell,</span></span></span><br><span class="line"><span class="function"><span class="params">                           with item: ChecklistItem)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法有两个参数, tableView和section. 并且有一个Int型的返回值。</span></span><br><span class="line"><span class="comment">// 第一个参数前的下划线代表这个参数没有外部名称。</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView,</span></span></span><br><span class="line"><span class="function"><span class="params">                        numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个方法有两个参数, tableView和indexPath.</span></span><br><span class="line"><span class="comment">// 问号代表它返回一个为可选型的IndexPath对象。</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView,</span></span></span><br><span class="line"><span class="function"><span class="params">                    willSelectRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">IndexPath</span>?</span><br></pre></td></tr></table></figure><p>在一个对象上调用一个方法，语法是<code>object.method(parameters)</code>。例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Calling a method on the lists object:</span></span><br><span class="line">lists.append(checklist)</span><br><span class="line"><span class="comment">// Calling a method with more than one parameter:</span></span><br><span class="line">tableView.insertRows(at: indexPaths, with: .fade)</span><br></pre></td></tr></table></figure><p>你可以把调用方法想象为从一个对象向另一个对象传递消息：“嗨 lists，我从checklist对象中向你发送了append的消息。”</p><p>你调用消息所属的对象被称为消息的接收者。</p><p>从同一个对象中调用方法非常常见，下面的例子中，<code>loadChecklists()</code>调用了<code>sortChecklists()</code>。它们都是<code>DataModel</code>对象中的成员：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataModel</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">loadChecklists</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        sortChecklists()</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortChecklists</span><span class="params">()</span></span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时你会写为下面这个样子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadChecklists</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">self</span>.sortChecklists()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键字<code>self</code>清晰的表明了<code>DataModel</code>对象自己是这个消息的接受者。</p><blockquote><p>⚠️：在我们的课程中，调用方法的时候，我省略了self关键字，因为并不是必须要这样做。Object-C开发者会非常乐意在每个地方都写上self，所以你也许会见到它在Swift中也被大量使用。到底写与不写，这是程序员间可以引发战争的一个话题，但是无论如何，app并不是太关心这点。</p></blockquote><p>在一个方法的内部，你也可以使用self关键字来引用这个对象自己：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span> &#123;</span><br><span class="line">delegate?.itemDetailViewControllerDidCancel(<span class="keyword">self</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>cancel()</code>方法将对象自身的引用发送给<code>delegate</code>，所以<code>delegate</code>知道谁发送了这个<code>itemDetailViewControllerDidCancel()</code>消息。</p><p>同时注意一下这里的可选型链接。这个<code>delegate</code>属性是个可选型，所以它可以为nil。在调用方法前使用一个问号来确保<code>delegate</code>为<code>nil</code>时，app不会挂掉。</p><h3 id="方法的参数"><a href="#方法的参数" class="headerlink" title="方法的参数"></a>方法的参数</h3><p>方法经常会具有一个或多个参数，所以你可以让它们接收不同数据源上的数据。一个被限定了数据源的方法，就不会非常有价值。例如下面的<code>sumValuesFormArray()</code>方法，它没有参数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> numbers = [<span class="type">Int</span>]()</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sunValuesFromArray</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">            total += number</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，<code>numbers</code>是一个实例变量。方法<code>sumValuesFromArray()</code>被这个实例变量绑定死了，如果这个变量不存在，那么这个方法就没用了。</p><p>假设你在这个app中添加了第二数组，也想要应用上面的计算，方法之一是把这个方法复制一遍，重新命名为一个新的方法来处理这个新的数组。这样做确实可行，但是者看起来不那么聪明。</p><p>另一个好一点的选择是，给这个方法一个参数，使得你可以传送任何你想要计算的数组，这样，这个方法就从实例变量中解放出来了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumValues</span><span class="params">(from array: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> array &#123;</span><br><span class="line">    total += number</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在你可以用任何整数型的数组作为它的参数了。</p><blockquote><p>这并不是说方法不应该使用实例变量，只是说你想要一个方法的应用更加广泛，那么给它一个参数是个很好的选择。</p></blockquote><p>方法的参数经常会有两个名字，一个<strong>外部名称</strong>，一个<strong>内部名称</strong>，例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadImage</span><span class="params">(<span class="keyword">for</span> searchResult: SearchResult,withTimeout timeout: TimeInterval,andPlaceOn button: UIButton)</span></span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有三个参数：<code>searchResult</code>，<code>timeout</code>和<code>button</code>。这些是<strong>内部名称</strong>，你在方法的<strong>内部</strong>用这些名称来调用参数。</p><p><strong>方法的外部名称是方法名称的一部分</strong>。所以这个方法的全名是<code>downloadImage(for,withTimeout,andPlaceOn)</code>，Swift中的方法名称经常会特别的长。</p><p>调用这个方法的时候，你需要使用外部名称：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">downloadImage(<span class="keyword">for</span>:result,withTimeout:<span class="number">10</span>,andPlaceButton)</span><br></pre></td></tr></table></figure><p>有时，你会看到一个方法它的第一个参数没有外部名称，取而代之的是一个下划线：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView,numberOfRowsInSection section: Int)</span></span>-&gt; <span class="type">Int</span></span><br></pre></td></tr></table></figure><p>这种情况经常出现在委托方法中，它是Object-C的遗留物，第一个参数的内部和外部名称都会被包含在方法名称中，比如在Object-C中<code>downloadImage()</code>方法的全名会是<code>downloadImageForSearchResult</code>。像这样的命名方式，以后会非常少见。</p><p>如果是在Object-C中，这个方法的名称会是<code>tableViewTableVIew</code>，非常古怪是吧，而Swift中，以下划线代替外部名称时，方法名称中就可以省略这个参数的外部名称，在Swift中，这个方法的全名是<code>tableView(numberOfRowsInSection)</code>。这样是不是容易明白多了？Swift在对方法命名时更加灵活，但它还是会保留一些旧的惯例。</p><h2 id="循环和判断"><a href="#循环和判断" class="headerlink" title="循环和判断"></a>循环和判断</h2><p>在一个方法的内部，你可以做以下事情：</p><ul><li><p>创建局部变量或者常量</p></li><li><p>进行基本的数学运算，比如加减乘除</p></li><li><p>将一个新的值放入变量（局部变量或实例变量）</p></li><li><p>调用其他方法</p></li><li><p>使用<code>if</code>或者<code>switch</code>作出判断</p></li><li><p>用<code>for</code>或者<code>while</code>进行循环处理</p></li><li><p>返回一个值给调用者</p></li></ul><p>让我们来看看<code>if</code>和<code>for</code>语句的更多细节。</p><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a><code>if</code>语句</h4><p><code>if</code>语句的基本结构是这个样子的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">0</span> &#123;</span><br><span class="line">text = <span class="string">"No Items"</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">1</span> &#123;</span><br><span class="line">text = <span class="string">"1 Item"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">text = <span class="string">"\(count) Items"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if</code>后面的表达式称之为条件。如果条件为真，那么<code>if</code>后面花括号内的语句会被执行。如果没有一个条件为真，那么最后一个<code>else</code>后面的花括号内的语句会被执行。</p><p>通过使用比较运算符来对两个值进行比较：</p><ul><li><p><code>==</code> 等于</p></li><li><p><code>!=</code> 不等于</p></li><li><code>&lt;</code> 小于</li><li><code>&lt;=</code> 小于等于</li><li><code>&gt;</code> 大于</li><li><code>&gt;=</code> 大于等于</li></ul><p>使用等于操作时，被比较的两个对象仅在相等时返回<code>true</code>，比如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">"Hello,world"</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">"Hello,"</span> + <span class="string">"world"</span></span><br><span class="line"><span class="built_in">print</span>(a == b) <span class="comment">//打印结果为true</span></span><br></pre></td></tr></table></figure><p>这个和Object-C有所不同，在Object-C中，必须两个对象是内存中的同一个实例，才会返回为<code>true</code>。而Swift中的<code>==</code>操作，仅仅是比较对象的值，而不管它在内存中是不是同一个对象，如果在Swift中像做这个操作的话，需要使用运算符 <code>===</code>，三个等号。</p><p>你还可以使用逻辑操作符来连接两个表达式：</p><ul><li><p><code>&amp;&amp;</code> 与操作，<code>a &amp;&amp; b</code>必须在<code>a</code>和<code>b</code>都为<code>true</code>时才返回<code>true</code></p></li><li><p><code>||</code> 或操作符，<code>a || b</code>当<code>a</code>，<code>b</code>其中之一为<code>true</code>时，返回`true``</p></li><li><p><code>`！</code> 逻辑非操作符，它的作用是将原本的<code>true</code>转为<code>false</code>，原本的<code>false</code>转为<code>true</code>。</p><blockquote><p>不要和可选型弄混了，逻辑非操作符出现在对象的前面，而可选型的感叹号出现在对象的后面</p></blockquote></li></ul><p>可以使用括号<code>()</code>来对表达式分组：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((this &amp;&amp; that) || (such &amp;&amp; so)) &amp;&amp; !other &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它读作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((this and that) or (such and so)) and not other &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了看起来更加清晰一些，我们写的有层次一点：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  (this and that)</span><br><span class="line">  or</span><br><span class="line">  (such and so)</span><br><span class="line">)</span><br><span class="line">and</span><br><span class="line">  (not other)</span><br></pre></td></tr></table></figure><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a><code>switch</code>语句</h4><p>当然，你弄的越复杂，越难记清楚自己在做什么！</p><p>Swift中还有一种非常强大的结构，可以用来做出判断，那就是<code>switch</code>语句：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> condition &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">      <span class="comment">//语句</span></span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">      <span class="comment">//语句</span></span><br><span class="line">    <span class="keyword">case</span> value3:</span><br><span class="line">      <span class="comment">//语句</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//语句</span></span><br></pre></td></tr></table></figure><p>它的效果和多个<code>if else</code>的效果是一致的，上面的代码等同于：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition == value1 &#123;</span><br><span class="line">  <span class="comment">//语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition == value2 &#123;</span><br><span class="line">  <span class="comment">//语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition == value3 &#123;</span><br><span class="line">  <span class="comment">//语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相较之下，<code>switch</code>在这种情况中更加便利，而且意思清晰。而且Swift版的<code>switch</code>比Object-C版的更加强大。例如，你可以使用区间范围：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> difference &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      title = <span class="string">"Perfect!"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>..&lt;<span class="number">5</span>:</span><br><span class="line">      title = <span class="string">"You almost had it!"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>..&lt;<span class="number">10</span>:</span><br><span class="line">      title = <span class="string">"Pretty good!"</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      title = <span class="string">"Not even close..."</span></span><br></pre></td></tr></table></figure><p>这里的<code>..&lt;</code>是半开区间操作符。它可以创建两个值之间的区间，其中的值都是不重复的，半开区间<code>1..&lt;5</code>等价于闭区间<code>1...4</code>。</p><p>有时你会看到下面这个样子的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> condition1 &#123;</span><br><span class="line">    <span class="keyword">if</span> condition2 &#123;</span><br><span class="line">      <span class="keyword">if</span> condition3 &#123;</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//语句</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//语句</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种代码非常难读，我喜欢将它们重构为下面这个样子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !condition1 &#123;</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !condition2 &#123;</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !condition3 &#123;</span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两段代码的作用其实是一样的，但是后一种更加容易理解。（注意一下，第二种写法中使用了<code>！</code>逻辑非来转换了表达式的意思）</p><p>Swift中有一种特殊的语句，<code>guard</code>来帮助你处理这种复杂的情况，用<code>guard</code>重写一下上面的方法就是：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> condition1 <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">guard</span> condition21 <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//语句</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>你要自己尝试这些方法，比较看看哪种可读性最好，哪种看起来最好，这样慢慢的你就会很有经验了。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><code>for</code>循环</p><p>你之前已经见识过了，如何用<code>for in</code>来历遍一个数组：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items &#123;</span><br><span class="line">    <span class="keyword">if</span> !item.checked &#123;</span><br><span class="line">    <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以写作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items <span class="keyword">where</span> !item.checked &#123;</span><br><span class="line">  <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>for in</code>中的语句会对每个<code>items</code>数组中的对象执行一遍。</p><p>注意一下，变量<code>item</code>的仅在<code>for</code>语句中有效，你不能在外面引用它，它的生命期比局部变量还要短。</p><p>有些语言，也包括Swift 2，中的<code>for</code>语句是这个样子的：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i &#123;</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你运行这个代码，会得到如下结果：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>然而，在Swift 3种，这种<code>for</code>循环已经被抛弃了，取而代之的是，你可以直接使用区间范围，就像下面这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ... <span class="number">4</span> &#123;</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺便说一下，也可写作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0</span>,to: <span class="number">5</span>,by: <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stride</code>函数创建了一个专门的对象来代表从1到5，每次增加1。如果你只想要偶数，你可以把<code>by</code>参数改为2。如果你给<code>by</code>参数一个负数的话，那么<code>stride</code>就可以实现倒着数的功能。</p><p><code>while</code>语句</p><p><code>for</code>语句并不是唯一的执行循环的语句，另一个非常强大的循环结构就是<code>while</code>语句：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> something <span class="keyword">is</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while语句会一直保持循环，知道条件为false为止。还可以使用下面这种形式：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line"> <span class="comment">//语句</span></span><br><span class="line">&#125; <span class="keyword">while</span> something <span class="keyword">is</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在这种情况中，条件是在语句执行后才判断的，所以括号内的语句至少也会被执行一次。</p><p>你可以使用<code>while</code>语句重写一下循环<code>Checklists</code>中的对象：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; items.<span class="built_in">count</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> item = items[i]</span><br><span class="line">   <span class="keyword">if</span> !item.checked &#123;</span><br><span class="line">     <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   i += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些循环结构的作用大致相同，只是看起来有些不一样。每一种都可以使你重复执行一段语句，直到条件不符合为止。</p><p>然而，使用<code>while</code>会比<code>for in</code>要看起来复杂一些，所以大多数时候，我们都会使用<code>for in</code>。</p><p>使用<code>for in</code>、<code>while</code>、<code>repeat</code>并没有什么不同，只是可读性上有所区别。</p><blockquote><p>⚠️：上面例子中的<code>item.count</code>和<code>count</code>是两种不同的东西，只是名字一样。<code>item.count</code>中的<code>count</code>是数组<code>items</code>中的属性用于返回数组中元素的个数；后面的一个<code>count</code>是一个局部变量，用于对没有激活对勾符号的item对象计数。</p></blockquote><p>就你可以在方法中使用<code>return</code>退出方法一样，你可以使用<code>break</code>来提前退出循环：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> found = <span class="literal">false</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> array &#123;</span><br><span class="line">  <span class="keyword">if</span> item == searchText &#123;</span><br><span class="line">    found = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中，<code>for</code>语句在数组中循环，直到找到第一个与<code>searchText</code>的值相当的值后，将<code>found</code>设置为<code>true</code>，然后退出循环，不再查看数组中剩下的对象。因为你已经找到了你想要的东西，所以没有必要把整个数组都循环完毕。</p><p>还存在一个<code>contiue</code>语句，和<code>break</code>的作用正好相反。它的作用是立即跳到下一个迭代中，当你使用<code>contiue</code>时，你的意思就是“目前这个item已经结束了，我们去看看下一个吧！”</p><h4 id="其他语句"><a href="#其他语句" class="headerlink" title="其他语句"></a>其他语句</h4><p>在函数编程中，循环经常会被<code>map</code>，<code>filter</code>或者<code>reduce</code>替代。它们是一些操作集合的函数，对集合中每一个元素执行一段代码，并且返回一个新的集合作为结果。</p><p>例如，在数组上使用<code>filter</code>，会保留符合某些条件的元素。比如要得到未激活对勾符号的ChecklistItem对象，你可以这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var uncheckedItems = items.filter &#123; item in !item.checked&#125;</span><br></pre></td></tr></table></figure><p>这样写比循环看起来要简单多了。函数编程是一个非常大的话题，所以在这里我们不会展开太多。</p><h2 id="对象（Objects）"><a href="#对象（Objects）" class="headerlink" title="对象（Objects）"></a>对象（Objects）</h2><p>将功能和数据结合在一起的可重用单元，都是对象。</p><p>数据是由对象中的实例变量和实例常量组成。我们经常以对象的属性形式引用它们。功能由对象的方法提供。</p><p>在你的Swift程序中，你使用过已存在的对象，比如<code>String</code>，<code>Array</code>，<code>Date</code>，<code>UITableView</code>，以及你自己创建的对象。</p><p>定义一个新的对象，你需要一个新的Swift文件，比如MyObject.swift，并且包含一个类（<code>class</code>）。比如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> maximum = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    text = <span class="string">"Hello World"</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>class</code>的花括号内，你添加了属性（实例变量和实例常量）和方法。</p><p>属性有两种类型：</p><ul><li><p>存储属性，它们通常是实例变量和实例常量。</p></li><li><p>计算属性，不存储东西，而是执行某些逻辑</p></li></ul><p>下面是一个关于计算属性的例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> indexOfSelectedChecklist: <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">get</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">UserDefaults</span>.standard().integerForKey(<span class="string">"ChecklistIndex"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">set</span> &#123;</span><br><span class="line">      <span class="type">UserDefaults</span>.standard().<span class="keyword">set</span>(newValue,forKey: <span class="string">"ChecklistIndex"</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>indexOfSelectedChecklist</code>属性并不存储一个值，取而代之的是，每次有人使用这个属性时，它执行<code>get</code>或者<code>set</code>内的代码。另一个选择是，分别写一个<code>setIndexOfSelectedChecklist()</code>和<code>getIndexOfSelectedChecklist()</code>方法，但是这样读起来不是很好。</p><p>关键字<code>@IBOutlet</code>的意思是，这个属性可以被界面建造器中的用户接口元素引用，比如label和button。这种属性通常都被声明为<code>weak</code>和可选型。类似的，<code>@IBAction</code>关键字被用于和用户交互时被触发的方法。</p><p>这里有三种类型的方法：</p><ol><li><p>实例方法</p></li><li><p>类方法</p></li><li><p><code>init</code>方法</p></li></ol><p>你已经知道了方法就是属于某一个对象的函数。调用这种类型的方法你首先需要一个这个对象的实例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myInstance = <span class="type">MyObject</span>()  <span class="comment">//创建一个对象的实例</span></span><br><span class="line">myInstance.doSomething()   <span class="comment">//调用方法</span></span><br></pre></td></tr></table></figure><p>你也可以创建一个类方法，这样就可以在没有实例的情况下使用这个方法。事实上，类方法经常被当作“工厂”方法使用，用来创建新的实例：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fun</span> <span class="title">makeObject</span>(<span class="title">text</span>: <span class="title">String</span>)-&gt; <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="type">MyObject</span>()</span><br><span class="line">    m.text = text</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="type">MyInstance</span> = <span class="type">MyObject</span>.makeObject(text: <span class="string">"Hello world"</span>)</span><br></pre></td></tr></table></figure><p><code>init</code>方法，或者叫做初始化设置，在创建一个新的对象实例的过程中被使用。你也可以使用<code>init</code>方法来取代上面的那个工厂方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">init</span>(text: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.text = text</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init</code>方法的主要目的是将对象中的实例变量填满。任何没有值的实例变量和实例常量都必须在<code>init</code>方法中被给予一个值。</p><p>Swift不允许变量或者常量没有值（可选型例外），并且<code>init</code>方法是你给变量或者常量赋值的最后一次机会。</p><p>对象可以拥有一个以上的<code>init</code>方法；具体使用哪一个要依据具体情况而定。</p><p>例如，一个<code>UITableViewController</code>，从故事模版中自动被读取时，使用<code>init?(coder)</code>初始化，手动从nib文件中读取时，使用<code>init(nibName,bundle)</code>初始化，或者没有从故事模版和nib文件中构造时，使用<code>init(style)</code>初始化。有时你会用到这个，而有时你会用到那个。</p><p>当对象不再被使用时，你可以提供一个<code>deinit</code>方法。在对象被破坏掉前调用它。</p><p>顺便说一下，<code>class</code>并不是Swift中唯一定义对象的方法。还存在其他类型的对象，比如<code>structs</code>和<code>enums</code>。</p><h2 id="协议（Protocols）"><a href="#协议（Protocols）" class="headerlink" title="协议（Protocols）"></a>协议（Protocols）</h2><p>一个协议就是一组方法名称的列表：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">someMethod</span><span class="params">(value: Int)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">anotherMethod</span><span class="params">()</span></span>-&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协议就类似于工作列表。它列出了你的公司中每个具体职位的工作。</p><p>但是列表自己本身并不工作，它仅仅是打印出来给大家看的东西。所以你需要雇佣具体的员工来完成列表上的工作。而这些员工，就是具体的对象。</p><p>对象需要被指明自己需要遵守的协议：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span>: <span class="title">MyProtocol</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，这个对象就需要完成协议中列出的所有方法。（否则，就炒了它）</p><p>此时，你就可以引用这个对象，同时还有协议：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m1: <span class="type">MyObject</span> = <span class="type">MyObject</span>()</span><br><span class="line"><span class="keyword">var</span> m2: <span class="type">MyProtocol</span> = <span class="type">MyObject</span>()</span><br></pre></td></tr></table></figure><p>对于代码中任何使用<code>m2</code>变量的部分，它是否是<code>MyObject</code>对象并不重要。<code>m2</code>类型是<code>MyProtocol</code>，不是<code>MyObject</code>。</p><p>所有你的代码看到的是，<code>m2</code>是某个遵守<code>MyProtocol</code>协议的对象，但是具体是什么样的对象并不重要。</p><p>换而言之，你并不关心你雇用的员工，是不是兼职其他工作，只要他和你需要的东西不冲突，你就可以雇佣他。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;可选类型和解包&quot;&gt;&lt;a href=&quot;#可选类型和解包&quot; class=&quot;headerlink&quot; title=&quot;可选类型和解包&quot;&gt;&lt;/a&gt;可选类型和解包&lt;/h2&gt;&lt;p&gt;Swift中，在数组的方括号内必须写上类型，或者在&lt;code&gt;Array&lt;/code&gt;后面的尖括号&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;内写上类型。&lt;/p&gt;
&lt;p&gt;对于字典而言，你一共需要提供两个类型，一个用于键，而另一个用于值。&lt;/p&gt;
&lt;p&gt;Swift要求所有的变量和常量都必须有值。你可以在声明它们的时候给它们指定一个值，也可以通过&lt;code&gt;init&lt;/code&gt;方法给它们分配值。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Swift" scheme="https://marara.xin/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>C#中的abstract和virtual</title>
    <link href="https://marara.xin/2017/10/12/The%20abstract%20and%20virtual%20in%20CSharp/"/>
    <id>https://marara.xin/2017/10/12/The abstract and virtual in CSharp/</id>
    <published>2017-10-12T08:07:11.021Z</published>
    <updated>2017-10-12T15:01:48.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="abstract-new和override"><a href="#abstract-new和override" class="headerlink" title="abstract, new和override"></a><code>abstract</code>, <code>new</code>和<code>override</code></h2><ul><li>抽象（<code>abstract</code>）方法<strong>必须</strong>在抽象类中定义，且没有方法的实现。</li><li>基类中的抽象（<code>abstract</code>）方法<strong>必须</strong>在派生类中重写（<code>override</code>）。</li><li>抽象类无法创建基实例，只能继承后创建。</li><li>派生类中如果重新定义和基类同名的方法，使用<code>new</code>关键字。</li><li>派生类中如果要重写基类中同名已经实现的方法，则基类中的方法用<code>virtual</code>关键字，派生类中的同名方法用<code>override</code>关键字重写。</li><li><code>virtual</code>修饰的法法必须要实现。</li><li><code>virtual</code>和<code>abstract</code>修饰的方法必须是<code>pubulic</code>。</li><li><code>virtual</code>方法<strong>必须</strong>实现，<code>abstract</code>方法<strong>不一定</strong>要实现。</li><li><code>virtual</code>方法<strong>可以</strong>被派生类重写，<code>abstract</code>方法<strong>必须</strong>在派生类中重写。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;abstract-new和override&quot;&gt;&lt;a href=&quot;#abstract-new和override&quot; class=&quot;headerlink&quot; title=&quot;abstract, new和override&quot;&gt;&lt;/a&gt;&lt;code&gt;abstract&lt;/code&gt;,
      
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="C#" scheme="https://marara.xin/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Scikit-learn的支持向量机（SVM）</title>
    <link href="https://marara.xin/2017/10/05/Support%20vector%20machine%20(SVM)%20for%20scikit-learn/"/>
    <id>https://marara.xin/2017/10/05/Support vector machine (SVM) for scikit-learn/</id>
    <published>2017-10-05T09:41:54.682Z</published>
    <updated>2018-06-19T14:58:33.972Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p><strong>支持向量机（SVM）</strong>是用于分类，回归和异常值检测的监督学习方法。</p><p>支持向量机的优点包括：</p><ul><li>在高维空间中行之有效。</li><li>当维数大于样本数时仍然可用。</li><li>在决策函数中只使用训练点的一个子集（称为支持向量），大大节省了内存开销。</li><li>用途广泛：决策函数中可以使用不同的<a href="http://scikit-learn.org/stable/modules/svm.html#svm-kernels" target="_blank" rel="noopener">核函数</a>。提供了一种通用的核，但是也可以指定自定义的核。</li><li>返回的分割直线满足margin最大的条件，所以是一个robust的解。</li><li><strong>SVM对数据点的依赖是稀疏的</strong>，只有少量支持向量对最终结果有贡献。</li></ul><p>而其劣势在于</p><ul><li>如果特征数量远大于样本数量，则表现会比较差。</li><li>SVM不直接提供概率估计。这个值通过五折交叉验证计算，代价比较高（见下面“跑分与概率”一节）。</li><li>首先SVM的优化问题比较复杂，不仅人难以理解，写起程序来也比较复杂，必须要用到Sequential minimal optimization（SMO）。</li><li>其次，传统的SVM只能处理线性可分的问题，并且对数据中的噪音也很敏感，因此我们必要对算法进行改造。</li></ul><p>Scikit-learn中的支持向量机同时支持密集样本向量（<code>numpy.ndarray</code>和可通过<code>numpy.asarray</code>转化的数据类型）和稀疏样本向量（任何<code>scipy.sparse</code>对象）。但是如果想用SVM对稀疏数据进行预测，则必须先在这些数据上拟合。为了优化性能，应该使用C阶（C-Ordered）<code>numpy.ndarray</code>（密集的）或<code>scipy.sparse.csr_matrix</code>（稀疏的），并指定<code>dtype=float64</code>。</p><a id="more"></a><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>要在数据集上进行多类别分类，可以使用<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC" target="_blank" rel="noopener"><code>SVC</code></a>，<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVC.html#sklearn.svm.NuSVC" target="_blank" rel="noopener"><code>NuSVC</code></a>和<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC" target="_blank" rel="noopener"><code>LinearSVC</code></a>这三个类。</p><p><img src="http://scikit-learn.org/stable/_images/sphx_glr_plot_iris_001.png" alt="sphx_glr_plot_iris_0012"></p><p> <code>SVC</code>和<code>NuSVC</code>两种方法类似，但是接受的参数有细微不同，而且底层的数学原理不一样（见“数学原理”一节）。另一方面，<code>LinearSVC</code>是对支持向量分类的另一种实现，使用了线性核。注意<code>LinearSVC</code>不接受关键字<code>kernel</code>，因为核被预设为是线性的。其与<code>SVC</code>和<code>NuSVC</code>相比还缺少了一些成员，如<code>support_</code>。</p><p>和其它分类器一样，<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC" target="_blank" rel="noopener"><code>SVC</code></a>，<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVC.html#sklearn.svm.NuSVC" target="_blank" rel="noopener"><code>NuSVC</code></a>和<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC" target="_blank" rel="noopener"><code>LinearSVC</code></a>接受两个数组：大小为<code>[n_samples, n_features]</code>的数组X，包含训练样本；以及大小为<code>[n_samples]</code>的数组y，包含类别标签（以字符串类型或整型存储）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = svm.SVC()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.fit(X, y)  </span><br><span class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</span><br><span class="line">    decision_function_shape=<span class="keyword">None</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</span><br><span class="line">    max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</span><br><span class="line">    tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>拟合以后就可以用得到的模型预测新值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict([[<span class="number">2.</span>, <span class="number">2.</span>]])</span><br><span class="line">array([<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>SVM的决策函数依赖于训练数据的一个子集，称为支持向量。它们的一些属性可以在成员变量<code>support_vectors_</code>，<code>support_</code>和<code>n_support</code>中找到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># get support vectors</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.support_vectors_</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># get indices of support vectors</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.support_ </span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>]...)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># get number of support vectors for each class</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.n_support_ </span><br><span class="line">array([<span class="number">1</span>, <span class="number">1</span>]...)</span><br></pre></td></tr></table></figure><h3 id="多类别分类"><a href="#多类别分类" class="headerlink" title="多类别分类"></a>多类别分类</h3><p><code>SVC</code>和<code>NuSVC</code>使用“一对多”方法（Knerr et al., 1990）来实现多类别分类。如果<code>n_class</code>是类别的数目，则该实现会构造<code>n_class * (n_class - 1) / 2</code>个分类器，每个分类器针对两个类别对数据进行训练。为了提供一个和其它分类器一致的接口，选项<code>decision_function_shape</code>允许调用者将所有“一对一”分类器的结果聚合进一个<code>(n_samples, n_classes)</code>的决策函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = [[<span class="number">0</span>], [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Y = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = svm.SVC(decision_function_shape=<span class="string">'ovo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.fit(X, Y) </span><br><span class="line">SVC(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, class_weight=<span class="keyword">None</span>, coef0=<span class="number">0.0</span>,</span><br><span class="line">    decision_function_shape=<span class="string">'ovo'</span>, degree=<span class="number">3</span>, gamma=<span class="string">'auto'</span>, kernel=<span class="string">'rbf'</span>,</span><br><span class="line">    max_iter=<span class="number">-1</span>, probability=<span class="keyword">False</span>, random_state=<span class="keyword">None</span>, shrinking=<span class="keyword">True</span>,</span><br><span class="line">    tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec = clf.decision_function([[<span class="number">1</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec.shape[<span class="number">1</span>] <span class="comment"># 4 classes: 4*3/2 = 6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.decision_function_shape = <span class="string">"ovr"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec = clf.decision_function([[<span class="number">1</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec.shape[<span class="number">1</span>] <span class="comment"># 4 classes</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>另一方面，<code>LinearSVC</code>实现了“一对多”分类法，因此会训练<code>n_class</code>个模型。如果只有两个类别，那么只会得到一个模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lin_clf = svm.LinearSVC()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lin_clf.fit(X, Y) </span><br><span class="line">LinearSVC(C=<span class="number">1.0</span>, class_weight=<span class="keyword">None</span>, dual=<span class="keyword">True</span>, fit_intercept=<span class="keyword">True</span>,</span><br><span class="line">     intercept_scaling=<span class="number">1</span>, loss=<span class="string">'squared_hinge'</span>, max_iter=<span class="number">1000</span>,</span><br><span class="line">     multi_class=<span class="string">'ovr'</span>, penalty=<span class="string">'l2'</span>, random_state=<span class="keyword">None</span>, tol=<span class="number">0.0001</span>,</span><br><span class="line">     verbose=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec = lin_clf.decision_function([[<span class="number">1</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dec.shape[<span class="number">1</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>决策函数的完整描述可见“数学原理”一节。</p><p>需要注意的是，<code>LinearSVC</code>还实现了另一种分类策略，即所谓的多类别SVM（由Crammer和Singer提出）。通过指定<code>multi_class=&#39;crammer_singer&#39;</code>，可以使用该方法。它得到的结果总是一致的，但是一对多分类法并不能保证这一点。然而在实际应用中，还是一对多分类法用的更多，因为通常来讲该方法得到的结果变化不会太大（mostly similar），而且用的时间显著的短。</p><p>一对多<code>LinearSVC</code>得到的属性中，<code>coef_</code>是<code>n_class * n_features</code>维矩阵，而<code>intercept_</code>是<code>n_class * 1</code>维的。系数中的每一行都对应于n_class个“一对多”分类器中的一个（截距也是类似），按照每个与其它类别进行比较的类别顺序排序（in the order of the “one” class）。</p><p>而在“一对一”<code>SVC</code>中，属性的格式略微有些复杂难懂。在有线性核的情况下，<code>coef_</code>和<code>intercept_</code>的格式与上面所述<code>LinearSVC</code>的类似，只不过<code>coef</code>的大小为<code>[n_class * (n_class - 1) / 2, n_features]</code>（对应于二元分类器的个数）。类别0到n的顺序是“0 vs 1”, “0 vs 2” , … “0 vs n”, “1 vs 2”, “1 vs 3”, “1 vs n”, . . . “n-1 vs n”。</p><p><code>dual_coef</code>的大小是[n_class-1, n_SV]，不过格式有些难以描述。列对应于<code>n_class * (n_class - 1) / 2</code>个“一对一”分类器中出现的支持向量。每个支持向量被用于<code>n_class - 1</code>个分类器中。每一行中<code>n_class - 1</code>个项目对应于这些分类器的对偶系数（dual coefficient）。</p><h3 id="得分和概率"><a href="#得分和概率" class="headerlink" title="得分和概率"></a>得分和概率</h3><p><code>SVC</code>中的<code>decision_function</code>方法对每个样本都会给出在各个类别上的分数（在二元分类问题中，是对每个样本给出一个分数）。如果构造函数的<code>probability</code>被设为<code>True</code>，则可以得到属于每个类别的概率估计（通过<code>predict_proba</code>和<code>predict_log_proba</code>方法）。在二元分类中，概率使用Platt缩放进行调整：通过在训练机上做额外的交叉检验来拟合一个在SVM分数上的Logistic回归。在多元分类中，这种方法被Wu et al. (2004)扩展了。</p><p>显而易见的是，Platt缩放中的交叉检验在大数据集上是一个代价很高的操作。此外，概率估计与实际得分可能会不一致，即使得分取得了最大值，概率并不一定也能取到最大值。（例如在二元分类中，某个样本经由<code>predict</code>方法得到的分类标签，如果使用<code>predict_proba</code>计算可能概率小于1/2。）Platt的方法在理论上也有一些问题。如果需要拿到置信分数，而这些分数又不一定非得是概率，则建议把<code>probability</code>置为<code>False</code>，并且使用<code>decision_function</code>，而不是<code>predict_proba</code>。</p><blockquote><p>参考文献：</p><ul><li>Wu, Lin and Weng, <a href="http://www.csie.ntu.edu.tw/~cjlin/papers/svmprob/svmprob.pdf" target="_blank" rel="noopener">“Probability estimates for multi-class classification by pairwise coupling”</a>, JMLR 5:975-1005, 2004.</li><li><a href="http://www.cs.colorado.edu/~mozer/Teaching/syllabi/6622/papers/Platt1999.pdf" target="_blank" rel="noopener">Platt “Probabilistic outputs for SVMs and comparisons to regularized likelihood methods” </a>.</li></ul></blockquote><h3 id="不平衡问题"><a href="#不平衡问题" class="headerlink" title="不平衡问题"></a>不平衡问题</h3><p>在某些情况下，一些指定的类别或某几个样本关键字可能更加重要，这时可以使用<code>class_weight</code>和<code>sample_weight</code>。</p><p><code>SVC</code>（不是<code>NuSVC</code>）在<code>fit</code>方法中实现了关键字<code>class_weight</code>。该关键字是字典类型，形式为<code>{class_label : value}</code>，这里<code>value</code>是一个正浮点数，将类别<code>class_label</code>的参数<code>C</code>设为<code>C * value</code>。</p><p><img src="http://scikit-learn.org/stable/_images/sphx_glr_plot_separating_hyperplane_unbalanced_001.png" alt="sphx_glr_plot_separating_hyperplane_unbalanced_0011"></p><p> <code>SVC</code>，<code>NuSVC</code>，<code>SVR</code>，<code>NuSVR</code>和<code>OneClassSVM</code>同样在<code>fit</code>方法中通过关键字<code>sample_weight</code>实现了对单独样本赋予特殊权重的功能。与<code>class_weight</code>类似，它们把第i个样本的参数<code>C</code>设为<code>C * sample_weight[i]</code>。</p><p><img src="http://scikit-learn.org/stable/_images/sphx_glr_plot_weighted_samples_001.png" alt="sphx_glr_plot_weighted_samples_0011 (1)"></p><blockquote><ul><li><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_iris.html#example-svm-plot-iris-py" target="_blank" rel="noopener">在iris数据集中试验不同的SVM分类器，并作图比较</a></li><li><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_separating_hyperplane.html#example-svm-plot-separating-hyperplane-py" target="_blank" rel="noopener">SVM：最大化间隔分离超平面</a></li><li><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_separating_hyperplane_unbalanced.html#example-svm-plot-separating-hyperplane-unbalanced-py" target="_blank" rel="noopener">SVM：不平衡类别的分离超平面</a></li><li><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_svm_anova.html#example-svm-plot-svm-anova-py" target="_blank" rel="noopener">SVM-Anova：带有单变量特征选择的SVM</a></li><li><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_svm_nonlinear.html#example-svm-plot-svm-nonlinear-py" target="_blank" rel="noopener">非线性SVM</a></li><li><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_weighted_samples.html#example-svm-plot-weighted-samples-py" target="_blank" rel="noopener">SVM：带权重问题的例子</a></li></ul></blockquote><h2 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h2><p>支持向量分类这样的方法可以经扩展用在回归问题上，称作支持向量回归。</p><p>支持向量分类产生的模型，如上所述，只依赖于训练数据的一个子集。其原因在于，构造模型时用到的代价函数并不关心那些不在边界上的数据点。类似的，支持向量回归所生成的模型也只依赖于训练数据的一个自己，因为构造模型时用到的代价函数用不上那些与预测值很接近的训练数据。</p><p>支持向量回归有三种不同实现：<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html#sklearn.svm.SVR" target="_blank" rel="noopener"><code>SVR</code></a>, <a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVR.html#sklearn.svm.NuSVR" target="_blank" rel="noopener"><code>NuSVR</code></a>和<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVR.html#sklearn.svm.LinearSVR" target="_blank" rel="noopener"><code>LinearSVR</code></a>。<code>LinearSVR</code>提供的实现比<code>SVR</code>快，但是只使用线性核。<code>NuSVR</code>则是使用了一个略不同的数学原理。细节见后面“实现细节”部分。</p><p>与分类问题类似，<code>fit</code>方法接受向量X和y作为参数，不过这里y应该是浮点型而不是整型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>X = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">2</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="number">0.5</span>, <span class="number">2.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = svm.SVR()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.fit(X, y) </span><br><span class="line">SVR(C=<span class="number">1.0</span>, cache_size=<span class="number">200</span>, coef0=<span class="number">0.0</span>, degree=<span class="number">3</span>, epsilon=<span class="number">0.1</span>, gamma=<span class="string">'auto'</span>,</span><br><span class="line">    kernel=<span class="string">'rbf'</span>, max_iter=<span class="number">-1</span>, shrinking=<span class="keyword">True</span>, tol=<span class="number">0.001</span>, verbose=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf.predict([[<span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">array([ <span class="number">1.5</span>])</span><br></pre></td></tr></table></figure><blockquote><ul><li><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_svm_regression.html#example-svm-plot-svm-regression-py" target="_blank" rel="noopener">使用线性核和非线性核进行支持向量回归（SVR)</a></li></ul></blockquote><h2 id="密度估计与新奇值检测（novelty-detection）"><a href="#密度估计与新奇值检测（novelty-detection）" class="headerlink" title="密度估计与新奇值检测（novelty detection）"></a>密度估计与新奇值检测（novelty detection）</h2><p>单类别SVM可用于新奇值检测，即给定一组样本，检测出该数据集的软边界，以判断新数据点是否属于该数据集。<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.OneClassSVM.html#sklearn.svm.OneClassSVM" target="_blank" rel="noopener"><code>OneClassSVM</code></a>类实现该方法。在这种情况下，由于这是一种无监督学习，数据没有类别标签，因此<code>fit</code>方法只接受数组X作为输入。见<a href="http://scikit-learn.org/stable/modules/outlier_detection.html#outlier-detection" target="_blank" rel="noopener">新奇值与异常值检测检测</a>一节了解更多用法。</p><p><img src="http://scikit-learn.org/stable/_images/sphx_glr_plot_oneclass_001.png" alt="sphx_glr_plot_oneclass_0011"></p><blockquote><ul><li><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_oneclass.html#example-svm-plot-oneclass-py" target="_blank" rel="noopener">使用非线性核（RBF）的单类别SVM</a></li><li><a href="http://scikit-learn.org/stable/auto_examples/applications/plot_species_distribution_modeling.html#example-applications-plot-species-distribution-modeling-py" target="_blank" rel="noopener">种类分布建模</a></li></ul></blockquote><h2 id="应用建议"><a href="#应用建议" class="headerlink" title="应用建议"></a>应用建议</h2><ul><li><strong>避免数据拷贝</strong>：对<code>SVC</code>、<code>SVR</code>、<code>NuSVC</code>和<code>NuSVR</code>，如果传给特定方法的数据不是以C语言所使用的顺序排列，而且是double精度，那么该数据会在调用底层C实现之前被拷贝一份。通过检查<code>flag</code>属性，可以检查给定的numpy数组是否是以C格式的连续存储方式排列的。对<code>LinearSVC</code>和<code>LogisticRegression</code>，任何以numpy数组形式传入的输入都会被拷贝，然后转化为liblinear内部的稀疏数据表示形式（双精度浮点数，对非零元素存储32位整型的索引）。如果你想训练一个大规模的线性分类器，而又不想拷贝一个稠密的numpy C-存储双精度数组，我们建议使用<code>SGDClassifier</code>。可以对它的目标函数进行配置，使其与<code>LinearSVC</code>模型所使用的基本相同。</li><li><strong>核缓存大小</strong>：对<code>SVC</code>、<code>SVR</code>、<code>NuSVC</code>和<code>NuSVR</code>，核缓存的大小对较大问题求解的运行时间有非常强的影响。如果你有足够内存，建议将<code>cache_size</code>设置为一个高于默认值200（MB）的值，比如500（MB）或1000（MB）。</li><li><strong>设置C</strong>：默认情况下<code>C</code>设为1，这是一个合理的选择。如果样本中有许多噪音观察点，则应该减小这个值。这意味着对估计结果进行更严格的正则化。</li><li>SVM算法会受数据取值范围的影响，所以<strong>强烈建议在使用之前对数据进行缩放</strong>。例如把输入向量X的每个属性缩放到[0,1]或[-1,+1]内，或者进行标准化使数据的均值为0方差为1。注意在测试向量上也要进行<strong>同样的</strong>缩放，这样才能得到有意义的结果。关于数据缩放和标准化的更多细节，参见<a href="http://scikit-learn.org/stable/modules/preprocessing.html#preprocessing" target="_blank" rel="noopener">处理数据</a>一节</li><li><code>NuSVC</code>/<code>OneClassVM</code>/<code>NuSVR</code>中的参数<code>mu</code>估计了训练误差和支持向量的比率</li><li>在<code>SVC</code>中，如果要分类的数据是不平衡的（如有很多正数据但是很少负数据），应该加选项<code>class_weight=&#39;balanced&#39;</code>然后/或者尝试不同的惩罚项参数<code>C</code>。</li><li><code>LinearSVC</code>的底层实现使用了随机数生成器来在拟合模型时选择特征。因此对同样的输入数据有略微不同的结果不是怪事。如果发生了这样的情况，试一个更小的tol参数</li><li>利用<code>LinearSVC(loss=&#39;l2&#39;, penalty=&#39;l1&#39;, dual=False)</code>来引入L1惩罚项会产生一个稀疏解，即特征权重中只有一少部分不为0，会对决策函数产生贡献。增加<code>C</code>会产生一个更复杂的模型（有更多特征被选择）。可以通过<a href="http://scikit-learn.org/stable/modules/generated/sklearn.svm.l1_min_c.html#sklearn.svm.l1_min_c" target="_blank" rel="noopener"><code>l1_min_c</code></a>来计算产生“空”模型（所有权重都是0）的<code>C</code>值。</li></ul><h2 id="内核函数"><a href="#内核函数" class="headerlink" title="内核函数"></a>内核函数</h2><p>升维的思想简单说来就是：在原来feature的基础上人为的构造一些新的feature，在更高维度的空间里，原来不线性可分的问题就会变成线性可分的问题，就又可以用svm了。</p><blockquote><p><a href="http://www.zhihu.com/question/30371867" target="_blank" rel="noopener">对高维空间里的线性可分</a></p></blockquote><p>升维的思想确实很漂亮，但是现实往往是很骨感的：如果对不同的数据集，每次都要寻找一个合适的函数，来把低维空间中的点x映射到高维空间中去是一件很困难的事情。<br>但是回想一下svm里的最终表达式，其实具体的表达式并不在最终结果里出现，出现的只有内积。如果有办法直接算出高维空间中的新内积，就不需要费力去构造。</p><p>核函数（Kernel method）正是基于这一思想的技巧。我们可以把kernel想象成，然后不去操心f(x)，而是尝试不同的核函数就可以了。</p><p><strong>核函数</strong>可以有以下几种选择：</p><ul><li>线性（linear）核： $\langle x,x^{‘}\rangle$ 。</li><li>多项式（polynomial）核： $\left (\gamma \left \langle x, {x}’  \right \rangle +r  \right )^{d}$ 。其中 $d$ 由选项<code>degree</code>指定，$r$ 由<code>coef0</code>指定</li><li>径向基Gaussian（RBF）函数： $\ exp( -  \ gamma \ | x-x’\ | ^ 2)$ 。其中 $\gamma$ 由选项<code>gamma</code>指定，必须大于0</li><li>sigmoid函数 $\tanh（\gamma \langle x，x’\rangle + r）$ ，其中由选项<code>coef0</code>指定</li></ul><p>在初始化时通过选项<code>kernel</code>指定用什么核</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>linear_svc = svm.SVC(kernel=<span class="string">'linear'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>linear_svc.kernel</span><br><span class="line"><span class="string">'linear'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rbf_svc = svm.SVC(kernel=<span class="string">'rbf'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rbf_svc.kernel</span><br><span class="line"><span class="string">'rbf'</span></span><br></pre></td></tr></table></figure><h3 id="自定义核"><a href="#自定义核" class="headerlink" title="自定义核"></a>自定义核</h3><p>Scikit提供两种方法来自定义核函数：给参数<code>kernel</code>传入一个python函数，或者提前计算好Gram矩阵。使用自定义核的分类器和其它分类器有类似的行为，不过以下两点除外：</p><ul><li><code>support_vectors_</code>域为空，只在<code>support_</code>里面存储支持向量的索引</li><li>会为<code>fit()</code>方法的第一个参数存储一个引用（不是拷贝），来为以后引用之做准备。如果在调用<code>fit()</code>之后，在调用<code>predict()</code>之前修改这个数组，则会产生一些不可预知的结果。</li></ul><h4 id="使用Python函数作为核"><a href="#使用Python函数作为核" class="headerlink" title="使用Python函数作为核"></a>使用Python函数作为核</h4><p>可以在构造函数中向参数<code>kernel</code>传进一个函数，来使用自定义的核。该函数必须接受两个大小分别为<code>(n_samples_1, n_features)</code>, <code>(n_samples_2, n_features)</code>的矩阵作为参数，返回一个大小为<code>(n_samples_1, n_samples_2)</code>的核矩阵。</p><p>如下代码定义了一个线性核，并使用该核创建了一个分类器实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_kernel</span><span class="params">(X, Y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> np.dot(X, Y.T)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clf = svm.SVC(kernel=my_kernel)</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://scikit-learn.org/stable/auto_examples/svm/plot_custom_kernel.html#example-svm-plot-custom-kernel-py" target="_blank" rel="noopener">使用自定义核的SVM</a></p></blockquote><h2 id="数学原理"><a href="#数学原理" class="headerlink" title="数学原理"></a>数学原理</h2><p>支持向量机的原理是在高维甚至无限维空间中构建一个超平面或者若干超平面组成的集合，并藉此用于分类、回归或其它任务。从直觉上来讲，好的分隔面是由使得函数间隔最大的超平面得到（即该超平面到任何类别最近训练数据点的距离都取得最大值），因为总体上来讲，间隔越大，分类器的泛化误差越小。</p><p><img src="http://scikit-learn.org/stable/_images/sphx_glr_plot_separating_hyperplane_0011.png" alt="sphx_glr_plot_separating_hyperplane_0011"></p><h3 id="SVC"><a href="#SVC" class="headerlink" title="SVC"></a>SVC</h3><p>给定可能属于某两种类别的训练向量 $x_i \in \mathbb{R}, \ i=1,2,…,n$ 和向量 $y \in \left\{ 1,-1 \right\}^{n}$ ，SVC解决的首要问题是</p><script type="math/tex; mode=display">\min_{\omega ,b,\zeta} \frac{1}{2}\omega^{T}\omega + C \sum_{i=1}^{n}\zeta_i \\subject \ to \ y_i (\omega^{T}\phi(x_i)+b) \geqslant 1-\zeta_i, \\\zeta_i \geqslant 0,i=1,2,...,n</script><p>其对偶形式为</p><script type="math/tex; mode=display">\min_{\alpha} \frac{1}{2} \alpha^{T}Q\alpha-e^{T}\alpha \\subject\ to\ y^{T}\alpha=0\\0 \leqslant \alpha_i \leqslant C,i=1,2,...,n</script><p>其中 $e$ 是全 $1$ 向量， $C &gt; 0$ 是上界， $Q$ 是一个半正定矩阵，$Q_{ij} \equiv y_i y_j K(x_i,x_j)$ ，其中 $K(x_i,x_j) \equiv \phi(x_i)^{T} \phi(x_j)$ 是核。这里训练向量通过函数被隐式映射到一个高维（甚至无限维）空间 $\phi$ 。</p><p>决策函数是 <strong>注意</strong>：虽然从<a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" target="_blank" rel="noopener"><code>libsvm</code></a>和<a href="http://www.csie.ntu.edu.tw/~cjlin/liblinear/" target="_blank" rel="noopener"><code>liblinear</code></a>导出的SVM模型使用 $C$ 作为正则化参数，但实际上其它更多预测器使用的是<code>alpha</code>。这两个参数之间的关系是</p><script type="math/tex; mode=display">\mathop{\rm sgn}(\sum_{i=1}^n y_i \alpha_i K(x_i,x_j)+\rho)</script><p>这些参数可以通过各个成员变量访问：<code>dual_coef_</code>存放乘积，<code>support_vectors</code>存放支持向量，<code>intercept_</code>存放独立项：</p><blockquote><p>参考文献：</p><ul><li><a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.17.7215" target="_blank" rel="noopener">“Automatic Capacity Tuning of Very Large VC-dimension Classifiers”</a>, I. Guyon, B. Boser, V. Vapnik - Advances in neural information processing 1993.</li><li><a href="http://link.springer.com/article/10.1007%2FBF00994018" target="_blank" rel="noopener">“Support-vector networks”</a>, C. Cortes, V. Vapnik - Machine Learning, 20, 273-297 (1995).</li></ul></blockquote><h3 id="NuSVC"><a href="#NuSVC" class="headerlink" title="NuSVC"></a>NuSVC</h3><p>其提供了一个新的参数，控制支持向量的个数和训练误差。参数 $v \in \left (0,1 \right ]$ 是训练误差的上限和支持向量的下限。</p><p>可以看到<code>v-SVC</code>是<code>C-SVC</code>的一种重参数化形式，因此两者在数学上是等价的。</p><h3 id="SVR"><a href="#SVR" class="headerlink" title="SVR"></a>SVR</h3><p>给定训练向量组 $x_i \in \mathbb{R}^p ,\ i=1,2,…,n$ 和向量 $y \in \mathbb{R}^n ,\ \varepsilon-SVR$ 要解决的主要问题如下所示：</p><script type="math/tex; mode=display">\min_{\omega ,b,\zeta, \zeta^*} \frac{1}{2}\omega^{T}\omega + C \sum_{i=1}^{n}(\zeta_i+\zeta^*) \\subject \ to \ y_i - \omega^T \phi(x_i) - b \leqslant \varepsilon + \zeta_i, \\\omega^T \phi(x_i) + b - y_i \leqslant \varepsilon + \zeta_i^*, \\\zeta_i, \zeta_{i}^* \geqslant 0,i=1,2,...,n</script><p>其对偶为</p><script type="math/tex; mode=display">\min_{\alpha, \alpha^*} \frac{1}{2} (\alpha - \alpha^*)^{T}Q(\alpha - \alpha^*) + \varepsilon e^T (\alpha + \alpha^*) -y^T (\alpha - \alpha^*)\\subject\ to\ e^{T} (\alpha - \alpha^*) =0\\0 \leqslant \alpha_i,\alpha_i^* \leqslant C,i=1,2,...,n</script><p>其中 $e$ 是全 $1$ 向量，$C &gt; 0$ 是上界，$Q$ 是一个半正定矩阵， $Q_{ij} \equiv K(x_i,x_j) = \phi(x_i)^T \phi(x_j)$ 是内核。这里训练向量通过函数被隐式映射到一个高维（甚至无限维）空间 $\phi$ 。</p><p>决策函数为</p><script type="math/tex; mode=display">\sum_{i=1}^n (\alpha - \alpha^*)K(x_i,x) + \rho</script><p>这些参数可以通过各个成员变量访问。其保持的差 $\alpha - \alpha^*$ ，其中变量<code>dual_coef_</code>存储，<code>support_vectors_</code>存储支持向量，<code>intercept_</code>存储独立项 $\rho$ 。</p><blockquote><p>参考文献：</p><ul><li><a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.114.4288" target="_blank" rel="noopener">“A Tutorial on Support Vector Regression”</a>, Alex J. Smola, Bernhard Schölkopf - Statistics and Computing archive Volume 14 Issue 3, August 2004, p. 199-222.</li></ul></blockquote><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>在底层，使用 <a href="http://www.csie.ntu.edu.tw/~cjlin/libsvm/" target="_blank" rel="noopener">libsvm</a> 和 <a href="http://www.csie.ntu.edu.tw/~cjlin/liblinear/" target="_blank" rel="noopener">liblinear</a> 来处理所有计算逻辑。这些库是被C和Cython包装的。</p><blockquote><p><strong>参考文献</strong>：</p><ul><li><a href="http://www.csie.ntu.edu.tw/~cjlin/papers/libsvm.pdf" target="_blank" rel="noopener">LIBSVM: a library for Support Vector Machines</a></li><li><a href="http://www.csie.ntu.edu.tw/~cjlin/liblinear/" target="_blank" rel="noopener">LIBLINEAR – A Library for Large Linear Classification</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;支持向量机（SVM）&lt;/strong&gt;是用于分类，回归和异常值检测的监督学习方法。&lt;/p&gt;
&lt;p&gt;支持向量机的优点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在高维空间中行之有效。&lt;/li&gt;
&lt;li&gt;当维数大于样本数时仍然可用。&lt;/li&gt;
&lt;li&gt;在决策函数中只使用训练点的一个子集（称为支持向量），大大节省了内存开销。&lt;/li&gt;
&lt;li&gt;用途广泛：决策函数中可以使用不同的&lt;a href=&quot;http://scikit-learn.org/stable/modules/svm.html#svm-kernels&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;核函数&lt;/a&gt;。提供了一种通用的核，但是也可以指定自定义的核。&lt;/li&gt;
&lt;li&gt;返回的分割直线满足margin最大的条件，所以是一个robust的解。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SVM对数据点的依赖是稀疏的&lt;/strong&gt;，只有少量支持向量对最终结果有贡献。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而其劣势在于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果特征数量远大于样本数量，则表现会比较差。&lt;/li&gt;
&lt;li&gt;SVM不直接提供概率估计。这个值通过五折交叉验证计算，代价比较高（见下面“跑分与概率”一节）。&lt;/li&gt;
&lt;li&gt;首先SVM的优化问题比较复杂，不仅人难以理解，写起程序来也比较复杂，必须要用到Sequential minimal optimization（SMO）。&lt;/li&gt;
&lt;li&gt;其次，传统的SVM只能处理线性可分的问题，并且对数据中的噪音也很敏感，因此我们必要对算法进行改造。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scikit-learn中的支持向量机同时支持密集样本向量（&lt;code&gt;numpy.ndarray&lt;/code&gt;和可通过&lt;code&gt;numpy.asarray&lt;/code&gt;转化的数据类型）和稀疏样本向量（任何&lt;code&gt;scipy.sparse&lt;/code&gt;对象）。但是如果想用SVM对稀疏数据进行预测，则必须先在这些数据上拟合。为了优化性能，应该使用C阶（C-Ordered）&lt;code&gt;numpy.ndarray&lt;/code&gt;（密集的）或&lt;code&gt;scipy.sparse.csr_matrix&lt;/code&gt;（稀疏的），并指定&lt;code&gt;dtype=float64&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="Machine Learning" scheme="https://marara.xin/tags/Machine-Learning/"/>
    
      <category term="Python" scheme="https://marara.xin/tags/Python/"/>
    
      <category term="SVM" scheme="https://marara.xin/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>数据表查询</title>
    <link href="https://marara.xin/2017/09/19/Query%20database/"/>
    <id>https://marara.xin/2017/09/19/Query database/</id>
    <published>2017-09-19T05:53:24.000Z</published>
    <updated>2017-10-30T03:16:04.028Z</updated>
    
    <content type="html"><![CDATA[<p>数据查询是数据库操作的核心操作。SQL提供了<code>SELECT</code>语句进行数据查询，其一般格式为：</p><p><code>SELECT [ALL | DISTINCT] &lt;目标列表达式&gt; FROM &lt;表名或视图名&gt; (&lt;SELECT 语句&gt;) [AS] &lt;别名&gt; [WHERE&lt;条件表达式&gt;]</code></p><a id="more"></a><p>以下操作，都以下表为模型。</p><h5 id="Student"><a href="#Student" class="headerlink" title="Student"></a>Student</h5><div class="table-container"><table><thead><tr><th style="text-align:center">Sno</th><th style="text-align:center">Sname</th><th style="text-align:center">Ssex</th><th style="text-align:center">Sage</th><th style="text-align:center">Sdept</th></tr></thead><tbody><tr><td style="text-align:center">201215121</td><td style="text-align:center">Yong Li</td><td style="text-align:center">M</td><td style="text-align:center">20</td><td style="text-align:center">CS</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">Chen Liu</td><td style="text-align:center">F</td><td style="text-align:center">19</td><td style="text-align:center">CS</td></tr><tr><td style="text-align:center">201215123</td><td style="text-align:center">Min Wang</td><td style="text-align:center">F</td><td style="text-align:center">18</td><td style="text-align:center">MA</td></tr><tr><td style="text-align:center">201215125</td><td style="text-align:center">Li Zhang</td><td style="text-align:center">M</td><td style="text-align:center">19</td><td style="text-align:center">IS</td></tr></tbody></table></div><h5 id="Course"><a href="#Course" class="headerlink" title="Course"></a>Course</h5><div class="table-container"><table><thead><tr><th style="text-align:center">Cno</th><th style="text-align:center">Cname</th><th style="text-align:center">Cpno</th><th style="text-align:center">Ccredit</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Data base</td><td style="text-align:center">5</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Mathematics</td><td style="text-align:center"></td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Information system</td><td style="text-align:center">1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Operating system</td><td style="text-align:center">6</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">Data structure</td><td style="text-align:center">7</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">Data processing</td><td style="text-align:center"></td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">PASCAL language</td><td style="text-align:center">6</td><td style="text-align:center">4</td></tr></tbody></table></div><h5 id="SC"><a href="#SC" class="headerlink" title="SC"></a>SC</h5><div class="table-container"><table><thead><tr><th style="text-align:center">Sno</th><th style="text-align:center">Cno</th><th style="text-align:center">Grade</th></tr></thead><tbody><tr><td style="text-align:center">201215121</td><td style="text-align:center">1</td><td style="text-align:center">92</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">2</td><td style="text-align:center">85</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">3</td><td style="text-align:center">88</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">2</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">3</td><td style="text-align:center">80</td></tr></tbody></table></div><h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><h3 id="选择表中的若干列"><a href="#选择表中的若干列" class="headerlink" title="选择表中的若干列"></a>选择表中的若干列</h3><p>选择表中的全部或若干列即关系代数的投影运算。</p><h4 id="查询指定列"><a href="#查询指定列" class="headerlink" title="查询指定列"></a>查询指定列</h4><h5 id="查询全体学生的学号和姓名"><a href="#查询全体学生的学号和姓名" class="headerlink" title="查询全体学生的学号和姓名"></a>查询全体学生的学号和姓名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNO, SNAME </span><br><span class="line"><span class="keyword">from</span> Student;</span><br></pre></td></tr></table></figure><blockquote><p>目标表达式中的各列先后顺序可以不同</p></blockquote><h4 id="查询全部列"><a href="#查询全部列" class="headerlink" title="查询全部列"></a>查询全部列</h4><h5 id="查询全体学生的详细记录"><a href="#查询全体学生的详细记录" class="headerlink" title="查询全体学生的详细记录"></a>查询全体学生的详细记录</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> Student;</span><br></pre></td></tr></table></figure><h4 id="查询经过计算的值"><a href="#查询经过计算的值" class="headerlink" title="查询经过计算的值"></a>查询经过计算的值</h4><h5 id="查询全体学生的姓名及出生年份"><a href="#查询全体学生的姓名及出生年份" class="headerlink" title="查询全体学生的姓名及出生年份"></a>查询全体学生的姓名及出生年份</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME, <span class="number">2017</span>-SAGE </span><br><span class="line"><span class="keyword">from</span> Student;</span><br></pre></td></tr></table></figure><blockquote><p>查询结果中第 2 列不是列名，而是一个计算表达式，用当前年份减去学生年龄，所得到的即是学生的出生年份。</p></blockquote><h5 id="查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名"><a href="#查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名" class="headerlink" title="查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名"></a>查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME, <span class="number">2017</span>-SAGE, <span class="keyword">lower</span>(SDEPT) </span><br><span class="line"><span class="keyword">from</span> Student;</span><br></pre></td></tr></table></figure><h5 id="查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名，并分别使用别名标识"><a href="#查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名，并分别使用别名标识" class="headerlink" title="查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名，并分别使用别名标识"></a>查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名，并分别使用别名标识</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME <span class="keyword">as</span> <span class="keyword">NAME</span>, <span class="number">2017</span>-SAGE <span class="keyword">as</span> BIRTHDAY, <span class="keyword">lower</span>(SDEPT) <span class="keyword">as</span> DEPARTMENT </span><br><span class="line"><span class="keyword">from</span> Student;</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>as</code>可以省略</p></blockquote><h3 id="选择表中若干元组"><a href="#选择表中若干元组" class="headerlink" title="选择表中若干元组"></a>选择表中若干元组</h3><h4 id="消除取值重复的行"><a href="#消除取值重复的行" class="headerlink" title="消除取值重复的行"></a>消除取值重复的行</h4><h5 id="查询选修了课程的学生学号"><a href="#查询选修了课程的学生学号" class="headerlink" title="查询选修了课程的学生学号"></a>查询选修了课程的学生学号</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> SNO </span><br><span class="line"><span class="keyword">from</span> SC;</span><br></pre></td></tr></table></figure><blockquote><p>如果没有<code>distinct</code>关键词，则默认为<code>all</code>。</p></blockquote><h4 id="查询满足条件的元组"><a href="#查询满足条件的元组" class="headerlink" title="查询满足条件的元组"></a>查询满足条件的元组</h4><h5 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h5><h6 id="查询所有年龄小于20岁的学生姓名及年龄"><a href="#查询所有年龄小于20岁的学生姓名及年龄" class="headerlink" title="查询所有年龄小于20岁的学生姓名及年龄"></a>查询所有年龄小于20岁的学生姓名及年龄</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME, SAGE </span><br><span class="line"><span class="keyword">from</span> Student </span><br><span class="line"><span class="keyword">where</span> SAGE&lt;<span class="number">20</span>;</span><br></pre></td></tr></table></figure><h5 id="确定范围"><a href="#确定范围" class="headerlink" title="确定范围"></a>确定范围</h5><h6 id="查询年龄在20-23岁之间的学生姓名，系别和年龄。"><a href="#查询年龄在20-23岁之间的学生姓名，系别和年龄。" class="headerlink" title="查询年龄在20~23岁之间的学生姓名，系别和年龄。"></a>查询年龄在20~23岁之间的学生姓名，系别和年龄。</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME, SDEPT, SAGE </span><br><span class="line"><span class="keyword">from</span> Student </span><br><span class="line"><span class="keyword">where</span> SAGE <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure><h6 id="查询年龄不在20-23岁之间的学生姓名，系别和年龄。"><a href="#查询年龄不在20-23岁之间的学生姓名，系别和年龄。" class="headerlink" title="查询年龄不在20~23岁之间的学生姓名，系别和年龄。"></a>查询年龄不在20~23岁之间的学生姓名，系别和年龄。</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME, SDEPT, SAGE </span><br><span class="line"><span class="keyword">from</span> Student </span><br><span class="line"><span class="keyword">where</span> SAGE <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure><h5 id="确定集合"><a href="#确定集合" class="headerlink" title="确定集合"></a>确定集合</h5><h6 id="查询CS，MA，IS学生的姓名和性别"><a href="#查询CS，MA，IS学生的姓名和性别" class="headerlink" title="查询CS，MA，IS学生的姓名和性别"></a>查询CS，MA，IS学生的姓名和性别</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME, SSEX </span><br><span class="line"><span class="keyword">from</span> Student </span><br><span class="line"><span class="keyword">where</span> SDEPT <span class="keyword">in</span> (<span class="string">'CS'</span>, <span class="string">'MA'</span>, <span class="string">'IS'</span>);</span><br></pre></td></tr></table></figure><h6 id="查询不在CS，MA，IS学生的姓名和性别"><a href="#查询不在CS，MA，IS学生的姓名和性别" class="headerlink" title="查询不在CS，MA，IS学生的姓名和性别"></a>查询不在CS，MA，IS学生的姓名和性别</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME, SSEX </span><br><span class="line"><span class="keyword">from</span> Student </span><br><span class="line"><span class="keyword">where</span> SDEPT <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'CS'</span>, <span class="string">'MA'</span>, <span class="string">'IS'</span>);</span><br></pre></td></tr></table></figure><h5 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h5><p>谓词<code>LIKE</code>可以用来进行字符串的匹配。其一般语法格式为：</p><p><code>[NOT] LIKE &#39;&lt;匹配串&gt;&#39; [ESCAPE &#39;&lt;转码字符&gt;&#39;]</code></p><ul><li><code>%</code>代表任意长度（长度可以是0）的字符串。</li><li><code>_</code>代表任意单个字符。</li></ul><blockquote><p>在查询匹配字符串中如果本身含有<code>%</code>或<code>_</code>，这时需要使用<code>ESCAPE &#39;&lt;转码字符&gt;&#39;</code>短语对通配符进行转义。</p></blockquote><h6 id="查询学号为’201215121’的学生的详细情况"><a href="#查询学号为’201215121’的学生的详细情况" class="headerlink" title="查询学号为’201215121’的学生的详细情况"></a>查询学号为’201215121’的学生的详细情况</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> Student </span><br><span class="line"><span class="keyword">where</span> SNO <span class="keyword">like</span> <span class="string">'201215121'</span>;</span><br></pre></td></tr></table></figure><h6 id="查询所有姓’Liu’的学生姓名，学号和性别"><a href="#查询所有姓’Liu’的学生姓名，学号和性别" class="headerlink" title="查询所有姓’Liu’的学生姓名，学号和性别"></a>查询所有姓’Liu’的学生姓名，学号和性别</h6><figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME, SNO, SSEX </span><br><span class="line"><span class="keyword">from</span> Student</span><br><span class="line"><span class="keyword">where</span> SNAME <span class="keyword">like</span> <span class="string">'Liu%'</span>;</span><br></pre></td></tr></table></figure><h6 id="查询DB-Design课程的课程号和学分"><a href="#查询DB-Design课程的课程号和学分" class="headerlink" title="查询DB_Design课程的课程号和学分"></a>查询DB_Design课程的课程号和学分</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> CNO, CCREDIT </span><br><span class="line"><span class="keyword">from</span> Course </span><br><span class="line"><span class="keyword">where</span> CNAME <span class="keyword">like</span> <span class="string">'DB\_Design'</span> escape <span class="string">'\';</span></span><br></pre></td></tr></table></figure><h5 id="涉及空值的查询"><a href="#涉及空值的查询" class="headerlink" title="涉及空值的查询"></a>涉及空值的查询</h5><h6 id="查询所有有成绩的学生的学号和成绩"><a href="#查询所有有成绩的学生的学号和成绩" class="headerlink" title="查询所有有成绩的学生的学号和成绩"></a>查询所有有成绩的学生的学号和成绩</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNO, GRADE </span><br><span class="line"><span class="keyword">from</span> SC </span><br><span class="line"><span class="keyword">where</span> GRADE <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h5 id="多重条件查询"><a href="#多重条件查询" class="headerlink" title="多重条件查询"></a>多重条件查询</h5><h6 id="查新CS系年龄在20岁以下的学生姓名"><a href="#查新CS系年龄在20岁以下的学生姓名" class="headerlink" title="查新CS系年龄在20岁以下的学生姓名"></a>查新CS系年龄在20岁以下的学生姓名</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNAME </span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">where</span> SAGE&lt;<span class="number">20</span> <span class="keyword">and</span> SDEPT=<span class="string">'CS'</span>;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-子句"><a href="#ORDER-BY-子句" class="headerlink" title="ORDER BY 子句"></a>ORDER BY 子句</h3><p>可以用<code>ORDER BY</code>子句对查询结果进行升序（<code>ASC</code>）或降序（<code>DESC</code>）排列。默认为升序。</p><h6 id="查询选修了3号课程的学生的学号和成绩，查询结果按分数降序排列。"><a href="#查询选修了3号课程的学生的学号和成绩，查询结果按分数降序排列。" class="headerlink" title="查询选修了3号课程的学生的学号和成绩，查询结果按分数降序排列。"></a>查询选修了3号课程的学生的学号和成绩，查询结果按分数降序排列。</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNO, Grade </span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">where</span> Cno=<span class="string">'3'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> GRADE <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p>为进一步方便用户，增强检索功能，SQL提供了如下聚集函数：</p><div class="table-container"><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">COUNT(*)</td><td style="text-align:center">统计元组个数</td></tr><tr><td style="text-align:center">COUNT([DISTINCT\ALL] &lt;列名&gt;)</td><td style="text-align:center">统计一列中值得个数</td></tr><tr><td style="text-align:center">SUM([DISTINCT\ALL] &lt;列名&gt;)</td><td style="text-align:center">计算一列值得总和（此列必须是数值类型）</td></tr><tr><td style="text-align:center">AVG([DISTINCT\ALL] &lt;列名&gt;)</td><td style="text-align:center">计算一列值得平均值（此列必须是数值类型）</td></tr><tr><td style="text-align:center">MAX([DISTINCT\ALL] &lt;列名&gt;)</td><td style="text-align:center">求一列值中的最大值</td></tr><tr><td style="text-align:center">MIN([DISTINCT\ALL] &lt;列名&gt;)</td><td style="text-align:center">求一列值中的最小值</td></tr></tbody></table></div><h6 id="查询学生总人数"><a href="#查询学生总人数" class="headerlink" title="查询学生总人数"></a>查询学生总人数</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*)</span><br><span class="line"><span class="keyword">from</span> Student;</span><br></pre></td></tr></table></figure><h6 id="查询选修了课程的学生人数"><a href="#查询选修了课程的学生人数" class="headerlink" title="查询选修了课程的学生人数"></a>查询选修了课程的学生人数</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> SNO)</span><br><span class="line"><span class="keyword">from</span> SC;</span><br></pre></td></tr></table></figure><h6 id="计算选修1号课程的学生平均成绩"><a href="#计算选修1号课程的学生平均成绩" class="headerlink" title="计算选修1号课程的学生平均成绩"></a>计算选修1号课程的学生平均成绩</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(Grade)</span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">where</span> SNO=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><h6 id="查新选修1号课程的学生最高分数"><a href="#查新选修1号课程的学生最高分数" class="headerlink" title="查新选修1号课程的学生最高分数"></a>查新选修1号课程的学生最高分数</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(Grade)</span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">where</span> CNO=<span class="string">'1'</span>;</span><br></pre></td></tr></table></figure><h3 id="GROUP-BY子句"><a href="#GROUP-BY子句" class="headerlink" title="GROUP BY子句"></a>GROUP BY子句</h3><p><code>GROUP BY</code>子句将查询结果按某一列或多列的值分组，值相等为一组。</p><p><strong>分组后聚集函数将作用与每一个组，即每一组都有一个函数值。</strong></p><h6 id="求各个课程号及相应的选课人数"><a href="#求各个课程号及相应的选课人数" class="headerlink" title="求各个课程号及相应的选课人数"></a>求各个课程号及相应的选课人数</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> CNO, <span class="keyword">count</span>(SNO)</span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> CNO;</span><br></pre></td></tr></table></figure><h6 id="查询平均成绩大于等于90分的学生学号和平均成绩"><a href="#查询平均成绩大于等于90分的学生学号和平均成绩" class="headerlink" title="查询平均成绩大于等于90分的学生学号和平均成绩"></a>查询平均成绩大于等于90分的学生学号和平均成绩</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SNO, <span class="keyword">avg</span>(Grade)</span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> SNO</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">avg</span>(Grade)&gt;=<span class="number">90</span></span><br></pre></td></tr></table></figure><blockquote><p><code>WHERE</code>子句中是不能用聚集函数作为条件表达式，应用<code>HAVING</code></p></blockquote><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><h3 id="等值于非等值连接查询"><a href="#等值于非等值连接查询" class="headerlink" title="等值于非等值连接查询"></a>等值于非等值连接查询</h3><p>连接查询的WHERE子句中用来连接两个表的条件称为连接条件或连接谓词，格式为：</p><p><code>[&lt;表名1&gt;.] &lt;列名1&gt;&lt;比较运算符&gt; [&lt;表名2&gt;.] &lt;列名2&gt;</code></p><p><code>[&lt;表名1&gt;.] &lt;列名1&gt;BETWEEN [&lt;表名2&gt;.] &lt;列名2&gt;AND [&lt;表名3&gt;.] &lt;列名3&gt;</code></p><h6 id="查询每个学生及其选修课程情况"><a href="#查询每个学生及其选修课程情况" class="headerlink" title="查询每个学生及其选修课程情况"></a>查询每个学生及其选修课程情况</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Student.*, SC.*</span><br><span class="line"><span class="keyword">from</span> Student, SC</span><br><span class="line"><span class="keyword">where</span> Student.SNO=SC.SNO;</span><br></pre></td></tr></table></figure><h6 id="查询选修2号课程且成绩在90分以上的所有学生的学号和姓名"><a href="#查询选修2号课程且成绩在90分以上的所有学生的学号和姓名" class="headerlink" title="查询选修2号课程且成绩在90分以上的所有学生的学号和姓名"></a>查询选修2号课程且成绩在90分以上的所有学生的学号和姓名</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Student.SNO, Sname</span><br><span class="line"><span class="keyword">from</span> Student, SC</span><br><span class="line"><span class="keyword">where</span> Student.SNO=SC.SNO <span class="keyword">and</span> SC.CNO=<span class="string">'2'</span> <span class="keyword">and</span> SC.Grade&gt;<span class="number">90</span>;</span><br></pre></td></tr></table></figure><h3 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h3><h6 id="查询每一门课的间接先修课"><a href="#查询每一门课的间接先修课" class="headerlink" title="查询每一门课的间接先修课"></a>查询每一门课的间接先修课</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FIRST.CNO, SECOND.CPNO</span><br><span class="line"><span class="keyword">from</span> Course <span class="keyword">FIRST</span>, Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">where</span> FIRST.SPNO=SECOND.CNO;</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h6 id="查询每个学生及其选修课程情况-1"><a href="#查询每个学生及其选修课程情况-1" class="headerlink" title="查询每个学生及其选修课程情况"></a>查询每个学生及其选修课程情况</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Student.SNO, SNAME, SSEX, SAGE, SDEPT, CNO, GRADE</span><br><span class="line"><span class="keyword">from</span> Student <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> SC <span class="keyword">on</span> (Student.SNO=SC.SNO);</span><br></pre></td></tr></table></figure><h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><h6 id="查询每个学生的学号，姓名，选修的课程名称及成绩"><a href="#查询每个学生的学号，姓名，选修的课程名称及成绩" class="headerlink" title="查询每个学生的学号，姓名，选修的课程名称及成绩"></a>查询每个学生的学号，姓名，选修的课程名称及成绩</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Student.SNO, SNAME, CNAME, GRADE</span><br><span class="line"><span class="keyword">from</span> Student, SC, Course</span><br><span class="line"><span class="keyword">where</span> Student.SNO=SC.SNO <span class="keyword">and</span> SC.CNO=Course.CNO;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据查询是数据库操作的核心操作。SQL提供了&lt;code&gt;SELECT&lt;/code&gt;语句进行数据查询，其一般格式为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT [ALL | DISTINCT] &amp;lt;目标列表达式&amp;gt; FROM &amp;lt;表名或视图名&amp;gt; (&amp;lt;SELECT 语句&amp;gt;) [AS] &amp;lt;别名&amp;gt; [WHERE&amp;lt;条件表达式&amp;gt;]&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Note" scheme="https://marara.xin/categories/Note/"/>
    
    
      <category term="MySQL" scheme="https://marara.xin/tags/MySQL/"/>
    
      <category term="DataBase" scheme="https://marara.xin/tags/DataBase/"/>
    
  </entry>
  
  <entry>
    <title>VPS搭载ss实现科学上网</title>
    <link href="https://marara.xin/2017/09/18/The%20Usage%20of%20traffic-proxy%20in%20Shadowsocks%20at%20VPS/"/>
    <id>https://marara.xin/2017/09/18/The Usage of traffic-proxy in Shadowsocks at VPS/</id>
    <published>2017-09-18T13:01:35.000Z</published>
    <updated>2017-09-18T13:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>简而言之，想使用shadowsocks翻墙，需要一个客户端和一个服务端。</p><p>这篇文章主要是如何在VPS上配置shadowsocks，并使用代理实现科学上网。</p><a id="more"></a><h2 id="登录VPS服务器"><a href="#登录VPS服务器" class="headerlink" title="登录VPS服务器"></a>登录VPS服务器</h2><p>在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i [PATH_TO_PRIVATE_KEY] [USERNAME]@[EXTERNAL_IP_ADDRESS]</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>[PATH_TO_PRIVATE_KEY]</code>是私钥路径。</li><li><code>[USERNAME]</code>是连接到VPS的用户的名称。</li><li><code>[EXTERNAL_IP_ADDRESS]</code> 是VPS的外部IP地址。</li></ul></blockquote><h2 id="下载shadowsocks客户端"><a href="#下载shadowsocks客户端" class="headerlink" title="下载shadowsocks客户端"></a>下载shadowsocks客户端</h2><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu:"></a>Debian/Ubuntu:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>有时Ubuntu会遇到第一个命令安装python-pip时找不到包的情况。pip官方给出了一个安装脚本，可以自动安装pip。先下载脚本，然后执行即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure><p>或者使用easy_install安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo easy_install shadowsocks</span><br></pre></td></tr></table></figure><h2 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h2><p>shadowsocks启动时的参数，如服务器端口，代理端口，登录密码等，可以通过启动时的命令行参数来设定，也可以通过json格式的配置文件设定。推荐使用配置文件，方便查看和修改。</p><p>用vi新建一个配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>然后输入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">   <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: <span class="number">443</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:&#123;</span><br><span class="line">        <span class="attr">"port_1"</span>:<span class="string">"password_1"</span>,</span><br><span class="line">        <span class="attr">"port_2"</span>:<span class="string">"pawwword_2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"chacha20"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_v4_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"tls1.2_ticket_auth_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单说明一下各个配置项：</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>你的VPS服务器的IP地址</p><h3 id="server-port"><a href="#server-port" class="headerlink" title="server_port"></a>server_port</h3><p>你的shadowsocks服务端口。一般可以填一个1025到49151之间的数字。不过需要注意的是，这里的是外部端口，使用时应避免和其它端口重复</p><h3 id="local-address"><a href="#local-address" class="headerlink" title="local_address"></a>local_address</h3><p>本地IP地址，作为服务器使用的时候可以不用关注，填127.0.0.1即可。</p><h3 id="local-port"><a href="#local-port" class="headerlink" title="local_port"></a>local_port</h3><p>本地端口，也不用关注。</p><h3 id="port-password"><a href="#port-password" class="headerlink" title="port_password"></a>port_password</h3><p>你的shadowsocks端口和服务密码，客户端连接时需要填写的。如果需要多人共享，则每个之间用 <code>,</code> 隔开。端口使用时应注意是否被防火墙隔离。</p><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p>超时时间，如果当心网络不好可以设置大一点。</p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>加密方式。</p><h3 id="fast-open"><a href="#fast-open" class="headerlink" title="fast_open"></a>fast_open</h3><p>在Ubuntu上建议填True。</p><p>填好以后保存退出。</p><h3 id="启动shadowsocks"><a href="#启动shadowsocks" class="headerlink" title="启动shadowsocks"></a>启动shadowsocks</h3><p>如果已经写好了配置文件，启动shadowsocks服务器的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>后台启动和停止shadowsocks服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure><p>shadowsocks的日志保存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/log/shadowsocks.log</span><br></pre></td></tr></table></figure><h2 id="安装锐速"><a href="#安装锐速" class="headerlink" title="安装锐速"></a>安装锐速</h2><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh</span><br></pre></td></tr></table></figure><h3 id="卸载："><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f</span><br></pre></td></tr></table></figure><h3 id="开启："><a href="#开启：" class="headerlink" title="开启："></a>开启：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service serverSpeeder start</span><br></pre></td></tr></table></figure><h3 id="查看状态："><a href="#查看状态：" class="headerlink" title="查看状态："></a>查看状态：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service serverSpeeder status</span><br></pre></td></tr></table></figure><blockquote><p>需要在<code>root</code>模式下进行</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简而言之，想使用shadowsocks翻墙，需要一个客户端和一个服务端。&lt;/p&gt;
&lt;p&gt;这篇文章主要是如何在VPS上配置shadowsocks，并使用代理实现科学上网。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://marara.xin/categories/Tutorial/"/>
    
    
      <category term="ShadowSocks" scheme="https://marara.xin/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>MySQL修改root用户密码</title>
    <link href="https://marara.xin/2017/09/08/Changes%20the%20root%20user%20password%20for%20MySQL/"/>
    <id>https://marara.xin/2017/09/08/Changes the root user password for MySQL/</id>
    <published>2017-09-08T12:00:20.000Z</published>
    <updated>2017-09-19T05:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>新安装了MySQL，安装之后粗心把密码给搞丢了，进入MySQL时报错：ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO).</p><p>通过以下步骤修改密码。</p><a id="more"></a><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p>关闭MySQL服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/mysql/support-files/mysql.server stop</span><br></pre></td></tr></table></figure><blockquote><p>① 通过DMG安装的MySQL通过’<code>&#39;System Prefrences&#39; &gt; MySQL &gt; &#39;Stop MySQL Server&#39;</code>来结束MySQL服务。</p><p>如果报错：ERROR! MySQL server PID file could not be found! 则直接用 ① 的方法关闭即可。</p><p>同理打开服务为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> sudo /usr/local/mysql/support-files/mysql.server start</span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>使用安全模式启动MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/mysql/bin/mysqld_safe --skip-grant-tables</span><br></pre></td></tr></table></figure><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>在新的Terminal中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure><p>在打开的MySQL命令行窗口依次输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user SET authentication_string=PASSWORD(&apos;YOUR_NEW_PASSWORD&apos;) WHERE User=&apos;root&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">\q</span><br></pre></td></tr></table></figure><blockquote><p>这里注意结尾的 <code>;</code>不能少。</p><p><code>YOUR_NEW_PASSWORD</code> 是你的新密码</p><p>5.7之前的版本，mysql.user表里面的<code>authentication_string</code>字段改成了：<code>password</code></p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>重启MySQL后运行以下命令测试密码是否修改成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新安装了MySQL，安装之后粗心把密码给搞丢了，进入MySQL时报错：ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO).&lt;/p&gt;
&lt;p&gt;通过以下步骤修改密码。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://marara.xin/categories/Tutorial/"/>
    
    
      <category term="MySQL" scheme="https://marara.xin/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Git 快速开始简明教程</title>
    <link href="https://marara.xin/2017/03/19/The%20introductory%20of%20Git/"/>
    <id>https://marara.xin/2017/03/19/The introductory of Git/</id>
    <published>2017-03-19T12:18:00.000Z</published>
    <updated>2017-09-19T06:06:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git 是一个分布式版本管理系统，即每个终端都有一套完整的项目代码（包括历史文件）。为了使用 Git，先要安装 Git。可以在 Command Line 或者 Terminal 中输入<code>git</code>命令检查是否已经安装。</p><a id="more"></a><blockquote><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2></blockquote><h3 id="创建本地工作目录"><a href="#创建本地工作目录" class="headerlink" title="创建本地工作目录"></a>创建本地工作目录</h3><p>先要创建一个文件夹来保存项目代码。例如我使用如下目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/renfei/Sites/project</span><br></pre></td></tr></table></figure><p>命令行中<code>cd</code>到这个目录，然后执行<code>git init</code> 命令来初始化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bogon:~ renfei$ cd /Users/renfei/Sites/project </span><br><span class="line">bogon:project renfei$ git init</span><br><span class="line">Initialized empty Git repository in /Users/renfei/Sites/project/.git/</span><br></pre></td></tr></table></figure><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>使用<code>git remote add</code>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bogon:buaa-weixin renfei$ git remote add proj https://renfeisong@bitbucket.org/developers/proj.git</span><br></pre></td></tr></table></figure><p>上面的 proj 是一个本地别名，可以起得短一些，以便以后使用。后面的地址则是远程仓库得地址。添加之后，可以使用<code>git remote</code>命令查看当前已有的远程仓库。</p><h3 id="从远程仓库得到数据"><a href="#从远程仓库得到数据" class="headerlink" title="从远程仓库得到数据"></a>从远程仓库得到数据</h3><p>使用 <code>git fetch</code> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bogon:project renfei$ git fetch proj</span><br><span class="line">remote: Counting objects: 39, done.</span><br><span class="line">remote: Compressing objects: 100% (34/34), done.</span><br><span class="line">remote: Total 39 (delta 5), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (39/39), done.</span><br><span class="line">From https://bitbucket.org/renfeisong/project</span><br><span class="line"> * [new branch]      develop    -&gt; proj/develop</span><br><span class="line"> * [new branch]      master     -&gt; proj/master</span><br></pre></td></tr></table></figure><p>会看到得到了服务器上的文件，以及两个分支，develop 和 master。这里得到得分支数目取决于远程仓库的内容。虽然得到了这些东西，但是现在这些文件还没有出现在你的工作目录中。</p><p>这是因为，我们需要利用<code>git checkout</code>命令「检出」（实际就是把工作目录切换到某个分支），才可以看到对应分支下的那些文件。</p><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><p>使用 <code>checkout</code> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bogon:project renfei$ git checkout develop</span><br><span class="line">Branch develop set up to track remote branch develop from proj.</span><br><span class="line">Switched to a new branch 'develop'</span><br></pre></td></tr></table></figure><p>例子中我们切换到了 develop 分支，其中对应的文件就都出现了（如果有的话）。</p><h2 id="再说分支"><a href="#再说分支" class="headerlink" title="再说分支"></a>再说分支</h2><p>分支是 Git 的一个很重要的功能，因此有必要解释一下。如果把随着时间的推移，代码的变化想象成前进的路线，那么分支就是从路线上的某一点衍生出来的一条支线，在这条支线上的开发不会对原先路线的代码造成任何影响。例如，现在我们有一个 master 分支和一个 develop 分支，master 分支发布稳定版本的应用，而 develop 分支则进行日常开发。一旦达到某个进度节点，develop 分支上的代码足够稳定可以发布，就把 develop 分支合并（merge）到 master 分支，同时继续 develop 分支的开发。</p><p>再如，develop 分支开发的过程中出现了某个 bug，一个开发人员想解决这个 bug，那么为了不影响其他人的工作，他可以从 develop 分支再创建一个新的分支 hotfix，然后在这个分支下修改，完成后把它合并回 develop 分支，并删除 hotfix 分支（它的历史使命已经完成）。</p><p>可以看出，每个分支都有一套代码。每个开发人员本地都保存了全部分支的全部代码（这些代码连同其他信息被 git 有序地组织在了工作目录下 .git 目录中，这个目录应当是隐藏的），当通过<code>checkout branch_name</code>切换分支时，工作目录下可见的文件也会被切换成当前分支下的文件。而其他分支的文件也并没有丢失，所以非常方便，你可以根据需要切换分支进行不同的工作。</p><blockquote><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2></blockquote><h3 id="添加新文件"><a href="#添加新文件" class="headerlink" title="添加新文件"></a>添加新文件</h3><p>在工作目录中创建的新文件处于 untracked 状态，即没有被 git 跟踪。新文件不会自动被 git 跟踪，因为许多临时文件、日志文件不需要保存到仓库中。如果要往仓库中添加文件，使用 <code>git add</code> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bogon:project renfei$ git add *</span><br></pre></td></tr></table></figure><p>上述做法添加所有文件。如果包含文件夹，则会递归地添加里面的文件。也可以添加单独的文件或者在文件名中使用通配符。</p><p>要查看当前状态（哪些文件 untracked，哪些文件处于其他状态等）可以使用 <code>git status</code> 命令。</p><p>执行 <code>git add</code> 后，新添加的文件状态（可通过<code>git status</code>查看）变为 change to be committed，或者称为 staged，暂存。意思就是，只要把它 commit 上去就可以了。</p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>如果修改了某个已跟踪的文件，那么这个文件会变为 modified，not staged，未暂存。此时必须再次 <code>git add</code> 这个文件使它变成 staged 状态，才能够被 commit 上去。</p><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>当有文件状态为暂存的（staged）时，就可以执行 <code>git commit</code> 命令。这个命令会提交暂存的文件。git 要求为每次提交添加一个说明，因此一般使用一个<code>-m</code>选项来添加说明。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bogon:project renfei$ git commit -m "background admin site (backend) added"</span><br><span class="line">[develop 7d17136] background admin site (backend) added</span><br><span class="line"> 16 files changed, 10372 insertions(+)</span><br><span class="line"> create mode 100644 bootstrap/v2/css/bootstrap-responsive.css</span><br><span class="line"> create mode 100644 bootstrap/v2/css/bootstrap-responsive.min.css</span><br><span class="line"> create mode 100644 bootstrap/v2/css/bootstrap.css</span><br><span class="line"> create mode 100644 bootstrap/v2/css/bootstrap.min.css</span><br><span class="line"> create mode 100644 bootstrap/v2/img/glyphicons-halflings-white.png</span><br><span class="line"> create mode 100644 bootstrap/v2/img/glyphicons-halflings.png</span><br><span class="line"> create mode 100644 bootstrap/v2/js/bootstrap.js</span><br><span class="line"> create mode 100644 bootstrap/v2/js/bootstrap.min.js</span><br><span class="line"> create mode 100644 define.php</span><br><span class="line"> create mode 100644 index.php</span><br><span class="line"> create mode 100644 jquery/jquery-1.10.2.min.js</span><br><span class="line"> create mode 100644 login.php</span><br><span class="line"> create mode 100644 logout.php</span><br><span class="line"> create mode 100644 pref.php</span><br><span class="line"> create mode 100644 signup.php</span><br><span class="line"> create mode 100644 util.php</span><br></pre></td></tr></table></figure><p>这个操作完成后，代码就被提交到了本地仓库。每次进行 commit 后都会对整个项目做一个快照，以后可以随时回滚到某个快照中。</p><p>如果希望省略 add 过程而直接提交所有跟踪的文件，可以给 <code>commit</code> 命令加上<code>-a</code>选项。如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bogon:project renfei$ git commit -a -m "background admin site (backend) added"</span><br></pre></td></tr></table></figure><h3 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h3><p><code>commit</code>仅仅把更改提交到了本地仓库。如果想推送到远程仓库，需要使用 <code>git push</code> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bogon:project renfei$ git push proj develop</span><br><span class="line">Counting objects: 25, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (22/22), done.</span><br><span class="line">Writing objects: 100% (24/24), 122.16 KiB | 0 bytes/s, done.</span><br><span class="line">Total 24 (delta 1), reused 0 (delta 0)</span><br><span class="line">To https://renfeisong@bitbucket.org/renfeisong/project.git</span><br><span class="line">   d4eeb86..7d17136  develop -&gt; develop</span><br></pre></td></tr></table></figure><p>其中 <code>proj</code> 是之前设定的代号，而 <code>develop</code> 表示推送本地仓库的 <code>develop</code> 分支。</p><h3 id="更新本地仓库"><a href="#更新本地仓库" class="headerlink" title="更新本地仓库"></a>更新本地仓库</h3><p>此时，可以随时使用 <code>git pull</code> 命令来从远程仓库拉取更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bogon:project renfei$ git pull</span><br><span class="line">Already up-to-date.</span><br></pre></td></tr></table></figure><p>如果没有更新，就会显示 <code>Already up-to-date</code>.</p><blockquote><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2></blockquote><p>Git 还有很多很多功能，比如从仓库移除文件、重命名、比较等。可以参考 Pro Git 这本书，是基于 CC 协议发布的。地址：<a href="http://git-scm.com/book/zh" target="_blank" rel="noopener">http://git-scm.com/book/zh</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git 是一个分布式版本管理系统，即每个终端都有一套完整的项目代码（包括历史文件）。为了使用 Git，先要安装 Git。可以在 Command Line 或者 Terminal 中输入&lt;code&gt;git&lt;/code&gt;命令检查是否已经安装。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://marara.xin/categories/Tutorial/"/>
    
    
      <category term="Git" scheme="https://marara.xin/tags/Git/"/>
    
      <category term="Terminal" scheme="https://marara.xin/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 配置 Apache, MySQL, PHP 以及 phpMyAdmin 过程记录</title>
    <link href="https://marara.xin/2017/03/17/The%20process%20of%20configures%20Apache,%20MySQL,%20PHP,%20and%20phpMyAdmin%20at%20Ubuntu/"/>
    <id>https://marara.xin/2017/03/17/The process of configures Apache, MySQL, PHP, and phpMyAdmin at Ubuntu/</id>
    <published>2017-03-17T06:14:49.000Z</published>
    <updated>2017-09-08T12:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install apache2</span></span><br></pre></td></tr></table></figure><p>装好后，配置文件应该位于<code>/etc/apache2</code>中，默认情况下无需修改即可使用。默认的网站目录为<code>/var/www/</code>。</p><a id="more"></a><p>启动 Apache 的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/apache2 start</span></span><br></pre></td></tr></table></figure><p>重启 Apache：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/apache2 restart</span></span><br></pre></td></tr></table></figure><p>停止 Apache：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo /etc/init.d/apache2 stop</span></span><br></pre></td></tr></table></figure><p>上述命令也可以写成这种形式（以启动为例）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service apache2 start</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>装好并启动 Apache 服务后，本地服务器应该就可以用了。可以利用<code>curl</code>访问 localhost 来测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl localhost</span></span><br></pre></td></tr></table></figure><p>Apache 的错误日志文件默认为<code>/var/log/apache2/error.log</code>。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>启动的时候可能会出现如下警告：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache2: Could not determine the server's fully qualified domain name, using 127.0.0.1 for ServerName</span><br></pre></td></tr></table></figure><p>说明你没有指定<code>ServerName</code>。如果想去掉这个错误，可以修改<code>/etc/apache2/apache2.conf</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/apache2/apache2.conf</span></span><br></pre></td></tr></table></figure><p>添加如下行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerName localhost</span><br></pre></td></tr></table></figure><blockquote><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2></blockquote><h3 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h3><p>同样使用<code>apt-get</code>命令安装 PHP：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install php5</span></span><br></pre></td></tr></table></figure><p>执行之后，PHP 应该就已经部署完毕了。可以使用<code>phpinfo()</code>函数来测试 PHP 是否已经就绪：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /var/www/phpinfo.php</span></span><br></pre></td></tr></table></figure><p>在文件里输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p>然后<code>curl localhost/phpinfo.php</code>来查看。</p><h3 id="安装其他-PHP-模块"><a href="#安装其他-PHP-模块" class="headerlink" title="安装其他 PHP 模块"></a>安装其他 PHP 模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install mysql-server</span></span><br></pre></td></tr></table></figure><p>安装过程中需要设定 root 账户的密码。至此，LAMP 环境已经配好。</p><blockquote><h2 id="phpMyAdmin"><a href="#phpMyAdmin" class="headerlink" title="phpMyAdmin"></a>phpMyAdmin</h2></blockquote><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>首先执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install phpmyadmin</span></span><br></pre></td></tr></table></figure><p>安装过程比较长，会有几个选项，依次如下：</p><p>（1）选择服务器软件。这里选择刚刚安装的 Apache2。</p><p>（2）选择手动设定。</p><p>（3）输入之前安装 MySQL 时设的 MySQL root 账户的密码。</p><p>（4）设定 phpMyAdmin 的登录密码。</p><p>注意，phpMyAdmin 的配置文件为：<code>/etc/phpmyadmin/config.inc.php</code>。</p><h3 id="包含-pma-的配置文件到-Apache"><a href="#包含-pma-的配置文件到-Apache" class="headerlink" title="包含 pma 的配置文件到 Apache"></a>包含 pma 的配置文件到 Apache</h3><p>安装后，还不能立即使用 phpMyAdmin，因为它不在网站目录下。为了正常使用，只需把 phpMyAdmin 的配置文件包含到 Apache 的配置中。编辑<code>apache2.conf</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/apache2/apache2.conf</span></span><br></pre></td></tr></table></figure><p>在文件中添加如下行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Include /etc/phpmyadmin/apache.conf</span><br></pre></td></tr></table></figure><p>重启服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service apache2 restart</span></span><br></pre></td></tr></table></figure><p>至此，你就可以通过<code>yourdomain/phpmyadmin</code>来访问 phpMyAdmin 了。</p><h3 id="mcrypt-模块丢失的错误"><a href="#mcrypt-模块丢失的错误" class="headerlink" title="mcrypt 模块丢失的错误"></a>mcrypt 模块丢失的错误</h3><p>一个 bug 可能导致访问 phpMyAdmin 时出现 mcrypt 模块丢失的错误。如果遇到，则可以采用下面的办法修复：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo php5enmod mcrypt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo service apache2 restart</span></span><br></pre></td></tr></table></figure><blockquote><h2 id="全局禁用-Index"><a href="#全局禁用-Index" class="headerlink" title="全局禁用 Index"></a>全局禁用 Index</h2></blockquote><p>Index 就是访问一个不存在 index.html、index.php 等文件的目录时服务器列出的文件列表，这样会对用户展示文件结构，如果想禁用，可以修改 Apache 的配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/apache2/apache2.conf</span></span><br></pre></td></tr></table></figure><p>找到并修改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/&gt;</span><br><span class="line">        Options -Indexes</span><br><span class="line">        Options FollowSymLinks</span><br><span class="line">        AllowOverride None</span><br><span class="line">        Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Apache&quot;&gt;&lt;a href=&quot;#Apache&quot; class=&quot;headerlink&quot; title=&quot;Apache&quot;&gt;&lt;/a&gt;Apache&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; sudo apt-get install apache2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;装好后，配置文件应该位于&lt;code&gt;/etc/apache2&lt;/code&gt;中，默认情况下无需修改即可使用。默认的网站目录为&lt;code&gt;/var/www/&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Tutorial" scheme="https://marara.xin/categories/Tutorial/"/>
    
    
      <category term="MySQL" scheme="https://marara.xin/tags/MySQL/"/>
    
      <category term="Ubuntu" scheme="https://marara.xin/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
