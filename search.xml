<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[VPS搭载ss实现科学上网]]></title>
    <url>%2F2017%2F09%2F18%2FVPS%E6%90%AD%E8%BD%BDss%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[简而言之，想使用shadowsocks翻墙，需要一个客户端和一个服务端。 这篇文章主要是如何在VPS上配置shadowsocks，并使用代理实现科学上网。 登录VPS服务器在终端中输入： 1ssh -i [PATH_TO_PRIVATE_KEY] [USERNAME]@[EXTERNAL_IP_ADDRESS] [PATH_TO_PRIVATE_KEY]是私钥路径。 [USERNAME]是连接到VPS的用户的名称。 [EXTERNAL_IP_ADDRESS] 是VPS的外部IP地址。 下载shadowsocks客户端CentOS12yum install python-setuptools &amp;&amp; easy_install pippip install shadowsocks Debian/Ubuntu:12apt-get install python-pippip install shadowsocks 有时Ubuntu会遇到第一个命令安装python-pip时找不到包的情况。pip官方给出了一个安装脚本，可以自动安装pip。先下载脚本，然后执行即可： 12wget https://bootstrap.pypa.io/get-pip.pypython get-pip.py 或者使用easy_install安装： 1sudo easy_install shadowsocks 编写配置文件shadowsocks启动时的参数，如服务器端口，代理端口，登录密码等，可以通过启动时的命令行参数来设定，也可以通过json格式的配置文件设定。推荐使用配置文件，方便查看和修改。 用vi新建一个配置文件： 1vi /etc/shadowsocks.json 然后输入如下内容： 1234567891011121314151617181920212223&#123; "server": "0.0.0.0", "server_ipv6": "::", "server_port": 443, "local_address": "127.0.0.1", "local_port": 1081, "port_password":&#123; "port_1":"password_1", "port_2":"pawwword_2" &#125;, "timeout": 120, "udp_timeout": 60, "method": "chacha20", "protocol": "auth_sha1_v4_compatible", "protocol_param": "", "obfs": "tls1.2_ticket_auth_compatible", "obfs_param": "", "dns_ipv6": false, "connect_verbose_info": 1, "redirect": "", "fast_open": false, "workers": 1&#125; 简单说明一下各个配置项： server你的VPS服务器的IP地址 server_port你的shadowsocks服务端口。一般可以填一个1025到49151之间的数字。不过需要注意的是，这里的是外部端口，使用时应避免和其它端口重复 local_address本地IP地址，作为服务器使用的时候可以不用关注，填127.0.0.1即可。 local_port本地端口，也不用关注。 port_password你的shadowsocks端口和服务密码，客户端连接时需要填写的。如果需要多人共享，则每个之间用 , 隔开。端口使用时应注意是否被防火墙隔离。 timeout超时时间，如果当心网络不好可以设置大一点。 method加密方式。 fast_open在Ubuntu上建议填True。 填好以后保存退出。 启动shadowsocks如果已经写好了配置文件，启动shadowsocks服务器的命令如下： 1ssserver -c /etc/shadowsocks.json 后台启动和停止shadowsocks服务器： 12ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop shadowsocks的日志保存在 1/var/log/shadowsocks.log 安装锐速安装：1wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh 卸载：1chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f 开启：1service serverSpeeder start 查看状态：1service serverSpeeder status 需要在root模式下进行]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>ShadowSocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL修改root用户密码]]></title>
    <url>%2F2017%2F09%2F08%2FMySQL%E4%BF%AE%E6%94%B9root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[新安装了MySQL，安装之后粗心把密码给搞丢了，进入MySQL时报错：ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO). 通过以下步骤修改密码。 Step 1关闭MySQL服务 1sudo /usr/local/mysql/support-files/mysql.server stop ① 通过DMG安装的MySQL通过’’System Prefrences’ &gt; MySQL &gt; ‘Stop MySQL Server’来结束MySQL服务。 如果报错：ERROR! MySQL server PID file could not be found! 则直接用 ① 的方法关闭即可。 同理打开服务为： 12&gt; sudo /usr/local/mysql/support-files/mysql.server start&gt; Step 2使用安全模式启动MySQL 1sudo /usr/local/mysql/bin/mysqld_safe --skip-grant-tables Step 3在新的Terminal中输入： 1mysql -u root 在打开的MySQL命令行窗口依次输入： 123UPDATE mysql.user SET authentication_string=PASSWORD(&apos;YOUR_NEW_PASSWORD&apos;) WHERE User=&apos;root&apos;;FLUSH PRIVILEGES;\q 这里注意结尾的 “;” 少。 ‘YOUR_NEW_PASSWORD’ 是你的新密码 5.7之前的版本，mysql.user表里面的authentication_string字段改成了：password 测试重启MySQL后运行以下命令测试密码是否修改成功 1mysql -u root -p]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 快速开始简明教程]]></title>
    <url>%2F2017%2F03%2F19%2FGit%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Git 是一个分布式版本管理系统，即每个终端都有一套完整的项目代码（包括历史文件）。为了使用 Git，先要安装 Git。可以在 Command Line 或者 Terminal 中输入git命令检查是否已经安装。 开始使用 创建本地工作目录先要创建一个文件夹来保存项目代码。例如我使用如下目录： 1/Users/renfei/Sites/project 命令行中cd到这个目录，然后执行git init 命令来初始化： 123bogon:~ renfei$ cd /Users/renfei/Sites/project bogon:project renfei$ git initInitialized empty Git repository in /Users/renfei/Sites/project/.git/ 添加远程仓库使用git remote add命令： 1bogon:buaa-weixin renfei$ git remote add proj https://renfeisong@bitbucket.org/developers/proj.git 上面的 proj 是一个本地别名，可以起得短一些，以便以后使用。后面的地址则是远程仓库得地址。添加之后，可以使用git remote命令查看当前已有的远程仓库。 从远程仓库得到数据使用 git fetch 命令。 12345678bogon:project renfei$ git fetch projremote: Counting objects: 39, done.remote: Compressing objects: 100% (34/34), done.remote: Total 39 (delta 5), reused 0 (delta 0)Unpacking objects: 100% (39/39), done.From https://bitbucket.org/renfeisong/project * [new branch] develop -&gt; proj/develop * [new branch] master -&gt; proj/master 会看到得到了服务器上的文件，以及两个分支，develop 和 master。这里得到得分支数目取决于远程仓库的内容。虽然得到了这些东西，但是现在这些文件还没有出现在你的工作目录中。 这是因为，我们需要利用git checkout命令「检出」（实际就是把工作目录切换到某个分支），才可以看到对应分支下的那些文件。 切换分支使用 checkout 命令。 123bogon:project renfei$ git checkout developBranch develop set up to track remote branch develop from proj.Switched to a new branch 'develop' 例子中我们切换到了 develop 分支，其中对应的文件就都出现了（如果有的话）。 再说分支分支是 Git 的一个很重要的功能，因此有必要解释一下。如果把随着时间的推移，代码的变化想象成前进的路线，那么分支就是从路线上的某一点衍生出来的一条支线，在这条支线上的开发不会对原先路线的代码造成任何影响。例如，现在我们有一个 master 分支和一个 develop 分支，master 分支发布稳定版本的应用，而 develop 分支则进行日常开发。一旦达到某个进度节点，develop 分支上的代码足够稳定可以发布，就把 develop 分支合并（merge）到 master 分支，同时继续 develop 分支的开发。 再如，develop 分支开发的过程中出现了某个 bug，一个开发人员想解决这个 bug，那么为了不影响其他人的工作，他可以从 develop 分支再创建一个新的分支 hotfix，然后在这个分支下修改，完成后把它合并回 develop 分支，并删除 hotfix 分支（它的历史使命已经完成）。 可以看出，每个分支都有一套代码。每个开发人员本地都保存了全部分支的全部代码（这些代码连同其他信息被 git 有序地组织在了工作目录下 .git 目录中，这个目录应当是隐藏的），当通过checkout branch_name切换分支时，工作目录下可见的文件也会被切换成当前分支下的文件。而其他分支的文件也并没有丢失，所以非常方便，你可以根据需要切换分支进行不同的工作。 文件操作 添加新文件在工作目录中创建的新文件处于 untracked 状态，即没有被 git 跟踪。新文件不会自动被 git 跟踪，因为许多临时文件、日志文件不需要保存到仓库中。如果要往仓库中添加文件，使用 git add 命令。 1bogon:project renfei$ git add * 上述做法添加所有文件。如果包含文件夹，则会递归地添加里面的文件。也可以添加单独的文件或者在文件名中使用通配符。 要查看当前状态（哪些文件 untracked，哪些文件处于其他状态等）可以使用 git status 命令。 执行 git add 后，新添加的文件状态（可通过git status查看）变为 change to be committed，或者称为 staged，暂存。意思就是，只要把它 commit 上去就可以了。 修改文件如果修改了某个已跟踪的文件，那么这个文件会变为 modified，not staged，未暂存。此时必须再次 git add 这个文件使它变成 staged 状态，才能够被 commit 上去。 提交当有文件状态为暂存的（staged）时，就可以执行 git commit 命令。这个命令会提交暂存的文件。git 要求为每次提交添加一个说明，因此一般使用一个-m选项来添加说明。例如： 12345678910111213141516171819bogon:project renfei$ git commit -m "background admin site (backend) added"[develop 7d17136] background admin site (backend) added 16 files changed, 10372 insertions(+) create mode 100644 bootstrap/v2/css/bootstrap-responsive.css create mode 100644 bootstrap/v2/css/bootstrap-responsive.min.css create mode 100644 bootstrap/v2/css/bootstrap.css create mode 100644 bootstrap/v2/css/bootstrap.min.css create mode 100644 bootstrap/v2/img/glyphicons-halflings-white.png create mode 100644 bootstrap/v2/img/glyphicons-halflings.png create mode 100644 bootstrap/v2/js/bootstrap.js create mode 100644 bootstrap/v2/js/bootstrap.min.js create mode 100644 define.php create mode 100644 index.php create mode 100644 jquery/jquery-1.10.2.min.js create mode 100644 login.php create mode 100644 logout.php create mode 100644 pref.php create mode 100644 signup.php create mode 100644 util.php 这个操作完成后，代码就被提交到了本地仓库。每次进行 commit 后都会对整个项目做一个快照，以后可以随时回滚到某个快照中。 如果希望省略 add 过程而直接提交所有跟踪的文件，可以给 commit 命令加上-a选项。如下： 1bogon:project renfei$ git commit -a -m "background admin site (backend) added" 推送到远程仓库commit仅仅把更改提交到了本地仓库。如果想推送到远程仓库，需要使用 git push 命令。 12345678bogon:project renfei$ git push proj developCounting objects: 25, done.Delta compression using up to 8 threads.Compressing objects: 100% (22/22), done.Writing objects: 100% (24/24), 122.16 KiB | 0 bytes/s, done.Total 24 (delta 1), reused 0 (delta 0)To https://renfeisong@bitbucket.org/renfeisong/project.git d4eeb86..7d17136 develop -&gt; develop 其中 proj 是之前设定的代号，而 develop 表示推送本地仓库的 develop 分支。 更新本地仓库此时，可以随时使用 git pull 命令来从远程仓库拉取更新。 12bogon:project renfei$ git pullAlready up-to-date. 如果没有更新，就会显示 Already up-to-date. 补充 Git 还有很多很多功能，比如从仓库移除文件、重命名、比较等。可以参考 Pro Git 这本书，是基于 CC 协议发布的。地址：http://git-scm.com/book/zh]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 配置 Apache, MySQL, PHP 以及 phpMyAdmin 过程记录]]></title>
    <url>%2F2017%2F03%2F17%2FUbuntu%20%E9%85%8D%E7%BD%AE%20Apache%2C%20MySQL%2C%20PHP%20%E4%BB%A5%E5%8F%8A%20phpMyAdmin%20%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Apache安装1$ sudo apt-get install apache2 装好后，配置文件应该位于/etc/apache2中，默认情况下无需修改即可使用。默认的网站目录为/var/www/。 启动 Apache 的方法： 1$ sudo /etc/init.d/apache2 start 重启 Apache： 1$ sudo /etc/init.d/apache2 restart 停止 Apache： 1$ sudo /etc/init.d/apache2 stop 上述命令也可以写成这种形式（以启动为例）： 1$ sudo service apache2 start 测试装好并启动 Apache 服务后，本地服务器应该就可以用了。可以利用curl访问 localhost 来测试： 1$ curl localhost Apache 的错误日志文件默认为/var/log/apache2/error.log。 其他启动的时候可能会出现如下警告： 1apache2: Could not determine the server's fully qualified domain name, using 127.0.0.1 for ServerName 说明你没有指定ServerName。如果想去掉这个错误，可以修改/etc/apache2/apache2.conf文件： 1$ sudo vi /etc/apache2/apache2.conf 添加如下行： 1ServerName localhost PHP 安装 PHP同样使用apt-get命令安装 PHP： 1$ sudo apt-get install php5 执行之后，PHP 应该就已经部署完毕了。可以使用phpinfo()函数来测试 PHP 是否已经就绪： 1$ sudo vi /var/www/phpinfo.php 在文件里输入： 1&lt;?php phpinfo(); ?&gt; 然后curl localhost/phpinfo.php来查看。 安装其他 PHP 模块1$ sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl MySQL 1$ sudo apt-get install mysql-server 安装过程中需要设定 root 账户的密码。至此，LAMP 环境已经配好。 phpMyAdmin 安装首先执行： 1$ sudo apt-get install phpmyadmin 安装过程比较长，会有几个选项，依次如下： （1）选择服务器软件。这里选择刚刚安装的 Apache2。 （2）选择手动设定。 （3）输入之前安装 MySQL 时设的 MySQL root 账户的密码。 （4）设定 phpMyAdmin 的登录密码。 注意，phpMyAdmin 的配置文件为：/etc/phpmyadmin/config.inc.php。 包含 pma 的配置文件到 Apache安装后，还不能立即使用 phpMyAdmin，因为它不在网站目录下。为了正常使用，只需把 phpMyAdmin 的配置文件包含到 Apache 的配置中。编辑apache2.conf： 1$ sudo vi /etc/apache2/apache2.conf 在文件中添加如下行： 1Include /etc/phpmyadmin/apache.conf 重启服务器： 1$ sudo service apache2 restart 至此，你就可以通过yourdomain/phpmyadmin来访问 phpMyAdmin 了。 mcrypt 模块丢失的错误一个 bug 可能导致访问 phpMyAdmin 时出现 mcrypt 模块丢失的错误。如果遇到，则可以采用下面的办法修复： 123$ sudo ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available/$ sudo php5enmod mcrypt$ sudo service apache2 restart 全局禁用 Index Index 就是访问一个不存在 index.html、index.php 等文件的目录时服务器列出的文件列表，这样会对用户展示文件结构，如果想禁用，可以修改 Apache 的配置文件： 1$ sudo vi /etc/apache2/apache2.conf 找到并修改为 123456&lt;Directory /var/www/&gt; Options -Indexes Options FollowSymLinks AllowOverride None Require all granted&lt;/Directory&gt;]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ string 字符串函数详解]]></title>
    <url>%2F2017%2F03%2F17%2FC%2B%2B%20string%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[运算符重载 + 和 +=：连接字符串 =：字符串赋值 >、&gt;=、&lt; 和 &lt;=：字符串比较（例如a &lt; b, aa &lt; ab） ==、!=：比较字符串 &lt;&lt;、&gt;&gt;：输出、输入字符串 12345678#include &lt;iostream&gt;#include &lt;string&gt;int main()&#123; string str = "cat"; cout &lt;&lt; "apple" + "boy" + str; // illegal! return 0;&#125; 查找 123456789101112131415161718192021string str;cin &gt;&gt; str;str.find("ab");//返回字符串 ab 在 str 的位置str.find("ab", 2);//在 str[2]~str[n-1] 范围内查找并返回字符串 ab 在 str 的位置str.rfind("ab", 2);//在 str[0]~str[2] 范围内查找并返回字符串 ab 在 str 的位置//first 系列函数str.find_first_of("apple");//返回 apple 中任何一个字符首次在 str 中出现的位置str.find_first_of("apple", 2);//返回 apple 中任何一个字符首次在 str[2]~str[n-1] 范围中出现的位置str.find_first_not_of("apple");//返回除 apple 以外的任何一个字符在 str 中首次出现的位置str.find_first_not_of("apple", 2);//返回除 apple 以外的任何一个字符在 str[2]~str[n-1] 范围中首次出现的位置//last 系列函数str.find_last_of("apple");//返回 apple 中任何一个字符最后一次在 str 中出现的位置str.find_last_of("apple", 2);//返回 apple 中任何一个字符最后一次在 str[0]~str[2] 范围中出现的位置str.find_last_not_of("apple");//返回除 apple 以外的任何一个字符在 str 中最后一次出现的位置str.find_last_not_of("apple", 2);//返回除 apple 以外的任何一个字符在 str[0]~str[2] 范围中最后一次出现的位置//以上函数如果没有找到，均返回string::nposcout &lt;&lt; string::npos; 子串 12str.substr(3); //返回 [3] 及以后的子串str.substr(2, 4); //返回 str[2]~str[2+(4-1)] 子串(即从[2]开始4个字符组成的字符串) 替换 12str.replace(2, 4, "sz");//返回把 [2]~[2+(4-1)] 的内容替换为 "sz" 后的新字符串str.replace(2, 4, "abcd", 3);//返回把 [2]~[2+(4-1)] 的内容替换为 "abcd" 的前3个字符后的新字符串 插入 123str.insert(2, "sz");//从 [2] 位置开始添加字符串 "sz"，并返回形成的新字符串str.insert(2, "abcd", 3);//从 [2] 位置开始添加字符串 "abcd" 的前 3 个字符，并返回形成的新字符串str.insert(2, "abcd", 1, 3);//从 [2] 位置开始添加字符串 "abcd" 的前 [2]~[2+(3-1)] 个字符，并返回形成的新字符串 追加 除了用重载的 + 操作符，还可以使用函数来完成。 12str.push_back('a');//在 str 末尾添加字符'a'str.append("abc");//在 str 末尾添加字符串"abc" 删除 12str.erase(3);//删除 [3] 及以后的字符，并返回新字符串str.erase(3, 5);//删除从 [3] 开始的 5 个字符，并返回新字符串 交换 1str1.swap(str2);//把 str1 与 str2 交换 其他 12345str.size();//返回字符串长度str.length();//返回字符串长度str.empty();//检查 str 是否为空，为空返回 1，否则返回 0str[n];//存取 str 第 n + 1 个字符str.at(n);//存取 str 第 n + 1 个字符（如果溢出会抛出异常） 实例 查找给定字符串并把相应子串替换为另一给定字符串string 并没有提供这样的函数，所以我们自己来实现。由于给定字符串可能出现多次，所以需要用到 find() 成员函数的第二个参数，每次查找之后，从找到位置往后继续搜索。直接看代码（这个函数返回替换的次数，如果返回值是 0 说明没有替换）： 1234567891011int str_replace(string &amp;str, const string &amp;src, const string &amp;dest)&#123; int counter = 0; string::size_type pos = 0; while ((pos = str.find(src, pos)) != string::npos) &#123; str.replace(pos, src.size(), dest); ++counter; pos += dest.size(); &#125; return counter;&#125; 从给定字符串中删除一给定字串方法和上面相似，内部使用 erase() 完成。代码： 12345678910int str_erase(string &amp;str, const string src)&#123; int counter = 0; string::size_type pos = 0; while ((pos = str.find(src, pos)) != string::npos) &#123; str.erase(pos, src.size()); ++counter; &#125; return counter;&#125; 给定一字符串和一字符集，从字符串剔除字符集中的任意字符12345678910int str_wash(string &amp;str, const string src)&#123; int counter = 0; string::size_type pos = 0; while ((pos = str.find_first_of(src, pos)) != string::npos) &#123; str.erase(pos, 1); ++counter; &#125; return counter;&#125;]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac OS X Terminal 101：终端使用初级教程]]></title>
    <url>%2F2017%2F03%2F17%2FMac%20OS%20X%20Terminal%20101%EF%BC%9A%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最近学习苹果认证的《Mac OS X Support Essentials》教程，看到 Command Line 一节有很多实用的知识，下面选取一部分翻译 + 笔记，整理成此文。 你可以整天驾驶汽车而不用知道如何修理它们，但是如果你希望当一个维护员，你就需要知道事情是如何运作的。同样的事情也发生在了 Mac OS X 上；你可以一直使用 Mac 而不用知道如何修理它，但是如果你想对系统做一些维护或解决一些问题，那么你需要知道如何使用 command-line。 为什么要使用命令行/如何开启命令行？ 许多功能在图形界面不提供，只有通过命令行来实现。 Finder会隐藏许多你不太会需要的文件，然而 command line 会允许你访问所有文件。 通过 command line 可以远程访问你的 Mac（利用 SSH）。 administrators 用户可以通过 sudo 命令获得 root 用户权限。 通过 command-line script 可以使工作更高效。 Terminal（终端）程序可以在“实用工具”里找到。 如果你开启手动输入用户名登陆模式，登陆时在用户名处输入 &gt;console 可以直接进入命令行界面。随后你仍然需要登录到一个账户。 初识Command Line 许多命令会花费一些时间来执行，然而这中间不会给出任何提示或者进度条。一般结束后会出现一个“用户名$”的标记。如果没有出现，那么说明最后一条命令正在执行。 一条命令包括 Command Name、Options、Arguments、Extras 四个部分，但是后三个部分有时是可选的。Options 部分用-作为前导符。其中许多命令的 Options 部分只包含单个字母，这时可以合并。例如，ls -lA和ls -l -A是等效的。Arguments 部分用来细化这个命令或指定这个命令具体的实施对象，Extras 部分则用来进一步实现其他功能。 举例：下列命令包含前三个部分，用于删除 Junk 这个程序。 michelle$ rm -R /Applications/Junk.app 如果你输入了一些错误的命令，系统会返回一些错误信息。但是系统却不会阻止你做傻事（例如删除整个用户文件夹）。 关于 man 命令 虽然有上千条命令，每条命令还有许多可选参数和具体的使用方式，但是你却不需要记住这些命令。你只需要记住一个：man 大多数命令都会包含一个使用指南，会告诉你任何你需要知道的关于这个命令的所有细节，在命令行中输入 man command-name 即可获取。例如，你想知道ls这个命令怎么使用，输入man ls即可进入使用指南页面。 使用指南往往很长，所以你可以使用▲（上箭头）或▼（下箭头）来上下移动，使用 Speace 来翻页，输入/和关键字来按照关键字搜索，按Q来退出使用指南页面。 那么——如果你连命令名称都不知道怎么办呢？输入man -k和关键字来对整个使用指南数据库进行搜索。 命令行，文件和路径如果知道如何使用命令是掌握 command line 的第一步，那么第二步就是学习如何在 command line 中使用文件路径。如果你掌握了文件路径，你将会发现这比使用 Finder 更加快捷。 注意 command line 工具是大小写敏感的，并且对于文件名，必须包括扩展名。例如，你想找iTunes这个程序，输入itunes是无效的，必须输入iTunes.app。 Mac OS传统上喜欢使用“文件夹”（folders）这个名称，但是在 command line 中，主要使用“目录”（directory）这个词。这和 UNIX 是一致的。 两种路径：绝对路径和相对路径 绝对路径：完整描述一个文件的位置，总是以斜杠（/）（forward slash）开头。例如/Users/michelle/Public/Drop Box。 相对路径：只描述一部分位置信息，它和你在 command line 目前的目录有关。当你打开新的 Terminal 程序时，command line 会话的目录应该是你的 home folder。这时上面例子文件夹的相对路径写作Public/Drop Box。显然它从当前目录开始。和html类似，你也可以使用两个点（“..”）来代表父目录，这样你就可以用相对路径表示上级或同级目录了。例如你可以输入cd ..甚至cd ../.. 切换到其他路径和目录如果你想将当前 command line 会话切换到其他目录，需要用到三个命令：pwd，ls和cd。 pwd的含义是“print working directory”，会显示当前目录的绝对路径。 ls的含义是“list directory contents”，它会列出当前目录的内容。这个命令还有其他参数可选。 cd的含义是“change directory”，它会改变当前目录到你指定的目录。如果你不指定，则会返回你的 home folder。 处理特殊字符如果目录中有特殊字符（空格，括号，引号，[]，!，$，&amp;，*，;，|，\），那么直接输入空格会造成系统识别困难，必须使用特殊的语法来表示这些字符。例如上例中，空格前添加反斜杠“\”（back slash）即可：cd Punlic/Drop\ Box/。除了反斜杠，也可以用引号的方法：cd &quot;Public/Drop Box&quot;。 ——如果不想手动输入，也可以把文件从 Finder 拖到 Terminal 窗口来创建绝对路径，这会方便一些，因为上面提到的所有特殊字符在拖动后都会自动变成系统可识别的表示方法。其实，更有效率的解决方案是使用 Tab Complete 功能。 Tab Complete 是 command line 中最能给你节省时间的特性之一，利用它的自动完成文件、目录名称功能还可以防止你输入错误。使用cd进入你的 home folder，使用cd P命令，然后按下tab按键。你可能会听到错误音，因为你的 home folder 内有多个 P 开头的文件夹。再按一次tab，Terminal 将会为你列出 P 开头的两个文件夹：Public 和 Pictures。按U，再按tab，Terminal 则会自动为你补全Public/。Tab complete 同样会处理那些特殊字符。注意，这会在末尾保留/符号，大部分时候这没问题，但如果出错，移除多余的/试一试。 另外，鄂化符~（tilde）在command line 中可以代表当前用户的 home folder。例如~/Public/Drop\ Box/是合法的。 查看隐藏文件为了简化工作，command line 和 Finder 都会隐藏许多文件和文件夹，这些内容通常是系统需要的。不借助第三方工具让 Finder 显示隐藏文件比较困难，但是在 command line 中却非常简单。首先，许多隐藏文件的隐藏是通过隐藏属性在 Finder 中隐藏的，而 command line 会忽略这些属性，所以这些文件会在 command line 中显示。另外，ls命令会隐藏文件名以.开头的文件，但是这些文件却可以被显示出来，方法是利用-a选项。例如： 1michelle$ ls -la 我们还添加了-l选项，目的是控制输出格式。如果你注意输出内容的话，会发现还包括.和..两项，它们分别表示当前文件夹和父文件夹（如图）。如果你不想显示这两项，只需要把-a改成-A即可。 前往其他卷在 command line 中，系统卷（也称为 root volume）是由开始的一个正斜杠表示的。然而也许听起来不可思议，在 command line 中其他卷看起来就在文件系统中一个叫做 Volumes 的文件夹中。下面的命令清晰地显示出这种逻辑关系：我从我的 home folder 出发，最终前往一个叫 Time Machine 的卷，该卷是外接在 Mac 上的。 12345678910bogon:~ renfei$ pwd/Users/renfeibogon:~ renfei$ cd /Volumes/bogon:Volumes renfei$ pwd/Volumesbogon:Volumes renfei$ lsMacintosh SSD &amp;nbsp; &amp;nbsp; &amp;nbsp;Time Machinebogon:Volumes renfei$ cd Time\ Machine/bogon:Time Machine renfei$ pwd/Volumes/Time Machine 用Command-Line管理文件检视文件有许多基础命令用来定位、检视文件和文件夹，包括cat, less, which, file以及find。别忘了，你可以利用man命令来查阅每个命令的使用指南。 catcat是“concatenate”的意思，会按顺序读取文件并输出到 Terminal 窗口，语法为cat后接你需要查看的文件的路径。cat命令也可以用&gt;&gt;来增加文本文件的内容，例如命令cat ../textOne.txt &gt;&gt; textTwo.txt会把 textOne.txt 的内容添加到 textTwo.txt 的结尾。这个&gt;&gt;就属于上一篇提到的“Extras”。 less这个命令更适合用来查看长文本文件，因为它会允许你查找文本。语法为 less后接文件路径，和cat一样。用less命令打开的文件其实和你查看命令使用指南的时候使用的是一个查看器，所以操作是相同的，同样可以使用▲（上箭头）或▼（下箭头）来上下移动文本，使用 空格 来翻页，输入/和关键字来按照关键字搜索，按Q来退出使用指南页面。除此之外，按V键来使用vi文本编辑器。 which这个命令会定位某个命令的文件路径。换言之，它会告诉你你执行某个具体命令的时候，在使用哪个文件。语法为which后接某个命令。如图： file这个命令会尝试根据文件的内容输出文件类型。如果一个文件缺失了扩展名，那么这个命令可能会非常有用。语法为file后接文件路径。如图，此例为一个 PNG 文件，还给出了它的尺寸、颜色数等信息。 find这个命令用来根据搜索关键词定位文件路径。 find命令不使用 Spotlight 搜索服务，但是它允许你设置非常具体的搜索条件，以及通配符（稍后介绍）。语法为find后接搜索的起始路径，后接定义搜索的选项，后接搜索内容（包含在引号里）。例如： 注意 如果你要搜索根目录，也许你想使用-x选项来避免搜索 /Volumes 文件夹。 如果想使用 Soptlight 搜索服务，使用mdfind命令后接搜索关键词即可。 使用通配符（Wildcard Characters）下面是常用的通配符： 星号（＊，Asterisk）——代表任何长度的任何字符。例如*.tiff代表所有格式为tiff的文件。 问号（?，Question mark）——代表任何单个字符。例如b?ok匹配 book 但是不匹配 brook。 方括号（[]，Square brackets）——定义一定范围的字符，例如[Dd]ocument匹配 Document 以及 document；doc[1-9]匹配doc1, doc2, …, doc9。 配合使用上面三种通配符可以大大提高效率。 使用递归命令简单来说，递归命令可以允许命令不执行于一个特定文件，而是指定的路径下的所有文件。大多数命令包含一个-r或者-R选项，来设定你想递归地执行这个命令。例如下面的例子，展示了添加-R后ls命令的执行方式： 编辑文件和文件夹有许多基础的命令用来编辑文件和文件夹，包括mkdir, cp, mv, rm, rmdir以及vi。下面我们来简要地介绍一下这些命令。 mkdir“make diretory”的缩写，用来创建文件夹，语法为mkdir后接新文件夹的目录。可以用-p选项，来一起创建路径中不存在的文件夹（这样你就不用挨层创建了）。 cp“copy”的缩写，用来把文件从一处复制到另一处。语法为cp后接原始路径，后接目标路径。如果你想复制整个文件夹和所有内容，需要添加-R选项。如果指定的目标路径不含文件名，则 cp 命令会按原名复制。如果指定的目标路径包括文件名，则会复制为你指定的文件名。如果仅指定新文件名，则会在原处以新名称创建文件副本。注意，系统会自动替换同名文件而不出现提示。 mv“move”的缩写，用来移动文件。语法为mv后接原路径，后接新路径。mv 的指定路径规则和 cp 是一样的（没错，如果仅指定新文件名，它就成了重命名命令）。 rm“remove”的缩写，会永久删除文件。注意，command-line中没有废纸篓。语法为rm后接文件路径。然而，使用 rm 命令删除的文件有可能可以通过数据恢复工具恢复。如果希望安全删除文件，可以使用srm命令。 rmdir和rm -Rrmdir是“remove directory”的缩写，这个命令会永久删除文件夹。再强调一遍，CLI 中木有废纸篓。语法为rmdir后接希望删除目录的路径。然而，rmdir 命令无法删除含有任何其他文件的文件夹，所以大多数情形下rmdir命令是不适用的。不过，你可以利用rm添加-R选项来删除文件夹及包含的所有文件。 vi代表“visual”（视觉的），然而这个名称相当具有讽刺意味：vi可能是可视化效果最差的文本编辑器了。然而，vi 是 command line 中最常见的文本编辑器。用vi打开文本文件，只需要输入vi后接文件路径即可。Mac OS X 还提供了nano，一个更加现代的文本编辑器。它也更加方便，例如在底部包含了一个作弊小条（=_=），上面有常用的快捷键列表（你就不用背下来它们了）。然而，vi却有时是默认的文本编辑器，所以掌握vi是很有用的。 和less命令类似，vi命令会占用整个 Terminal 空间来显示文件内容。打开后，在“command模式”，vi 会等你输入一些预定义字符来告诉 vi 你想做什么。你也可以使用键盘上的箭头键单纯地浏览文件。你想编辑时，按A开始（会进入编辑模式）。文字会插入到光标处。如果你想保存，需要先退出编辑模式进入 command 模式。方法是按下esc键。回到 command 模式后，按住shift同时按两次Z来保存并退出。如果你不想保存，在 command 模式输入:quit!并按 enter/return 直接退出。 用Command-Line管理系统 使用su来切换用户su命令代表“substitute user identity”，允许你在命令行中轻松切换到另一个用户账户。语法为su后接用户的短名称。然后会要求你输入密码（但是输入的时候不会显示）。执行完毕后，命令的前缀会改变，表示你拥有其他用户的权利。你可以利用who -m命令来验证当前登陆的身份。切换后，你会一直保持该用户身份，直至退出 Terminal 或者输入exit命令。 关于sudo的使用sudo概述更强大的命令就是sudo，代表“substitute user do”，或者，更恰当地，“super user do”。用sudo执行一个命令会使用 root 账户权限。当然，使用之前需要 administrator 账户（管理员账户）的授权（如输入密码）。 默认情况下，任何管理员账户都可以使用sudo来获取 root 权限，甚至当 root 账户在图形界面被禁用的情况下，sudo依然有效。这个命令是很多情况下我们不得不使用 Terminal 的原因，——同样也是给每个用户管理员身份的危险所在。不过，你可以调整sudo的配置文件，来限制它的使用。 12345bogon:~ renfei$ cat secret.txtcat: secret.txt: Permission deniedbogon:~ renfei$ sudo cat secret.txtPassword:This is the contents of the secret.txt text file that the user account renfei does not normally have access permissions to read. However, because he is an administrative user, she can use the sudo command to envoke root user access and read the contents of this file. 提示：如果由于你忘了使用sudo而导致命令行返回一个错误，只需输入sudo !!就可以用sudo来执行上一条指令。 记住，权力越大责任越大。不恰当地使用sudo可以轻易破坏你的系统设置。命令行只会在你第一次执行严重破坏性行为之前提示你，之后，它就会假设你清楚自己正在干什么。如果你只掌握三条使用命令行的准则，那将是：总是仔细检查你的命令；总是使用Tab completion来帮助你避免拼写错误；使用sudo之前，总是仔仔细细检查你的命令。 使用 sudo 切换 Shell如果你是一个管理员用户，你需要执行很多条需要 root 权限的命令，你可以临时切换整个命令行 shell 来取得 root 级别的访问权限。方法就是先输入sudo -s，回车后再键入你的密码。 其他Command-Line技巧提示 输入命令open .可以用 Finder 打开当前的位置。 在 Terminal 的偏好里面可以设定它的外观和风格。 中止一个错误的或者发疯的命令，可以使用组合键control + C。 你可以在执行前编辑命令，只需要使用箭头和键盘上的其他字母。 没有输入任何命令时，你可以用▲和▼来浏览历史命令。同样可以编辑和再次执行。 你也可以使用history命令查看历史记录。 你可以使用组合键control + L清屏。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用纯 CSS 为 HTML checkbox 添加自定义样式及动画效果]]></title>
    <url>%2F2017%2F03%2F17%2F%E7%94%A8%E7%BA%AF%20CSS%20%E4%B8%BA%20HTML%20checkbox%20%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E5%8F%8A%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[一般情况下，`元素（也包括一部分其他input元素）是由操作系统（而非浏览器）进行渲染的。在不同操作系统下，这类特殊元素的样式往往和系统本身的风格一致，和浏览器无关。也正是由于这种机制，开发者无法像一般元素那样使用 CSS 来修饰这类元素。这里介绍一种利用纯 CSS 实现自定义 checkbox 样式的方法。思路很简单：由于控件所对应的label元素是可以点击并切换控件状态的，而label元素的样式又可以自由设定，因此我们可将input元素隐藏，通过label`元素实现交互。 HTML 代码如下： 1234&lt;input type="checkbox" id="checkbox" class="checkbox"/&gt;&lt;div class="checkbox-wrapper"&gt; &lt;label for="checkbox" class="checkbox-label"&gt;&lt;/label&gt;&lt;/div&gt; 样式一：Metro UI 风格 效果： CSS 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.checkbox-wrapper &#123; width: 80px; height: 32px; position: relative; display: inline-block; overflow: hidden;&#125;.checkbox &#123; display: none;&#125;.checkbox-label::before,.checkbox-label::after &#123; font-family: sans-serif; font-size: 13px; color: #ffffff; position: absolute; font-weight: bold; line-height: 32px; height: 32px; width: 40px; text-align: center;&#125;.checkbox-label::before &#123; content: 'ON'; left: -40px; background: #45b6af;&#125;.checkbox-label::after &#123; content: 'OFF'; right: -40px; background: #f3565d;&#125;.checkbox-label &#123; display: block; position: absolute; left: 0; width: 40px; height: 32px; transition: all .4s ease; cursor: pointer; background: #dddddd;&#125;.checkbox:checked + .checkbox-wrapper .checkbox-label &#123; left: 40px;&#125; 样式二：iOS 7 风格 效果： CSS代码如下： 123456789101112131415161718192021222324252627282930313233.checkbox-wrapper &#123; width: 58px; height: 32px; position: relative; display: inline-block; background: #ffffff; border-radius: 16px; transition: all .3s ease-out; box-shadow: 0px 0px 0px 2px #ddd;&#125;.checkbox &#123; display: none;&#125;.checkbox-label &#123; display: block; position: absolute; left: 0px; top: 0px; width: 32px; height: 32px; cursor: pointer; background: #ffffff; border-radius: 16px; box-shadow: 0px 2px 3px rgba(0,0,0,0.2); transition: all .3s ease-out;&#125;.checkbox:checked + .checkbox-wrapper &#123; background: #0bd318; box-shadow: 0px 0px 0px 2px #0bd318;&#125;.checkbox:checked + .checkbox-wrapper .checkbox-label &#123; left: 26px;&#125; 值得一提的是，这个例子虽然比较完美的还原了 iOS 7 中 UISwitch 控件的外观，但是动画曲线却还有些差距。iOS 7 中使用的是一种名为 String Animation 的动画（该 API 在 iOS 8 中已经公开），仔细看的话可以发现开始滑块移动很快，到后面逐渐变慢，并且结束时还有小幅度的「反弹」效果。这里我们为了方便，使用 ease-out 来模拟。 JSFiddle 点击此处查看本教程在 JSFiddle 的示范代码。]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
