<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[逻辑回归与代价函数]]></title>
    <url>%2F2019%2F02%2F13%2FLogistic_regression%2F</url>
    <content type="text"><![CDATA[逻辑回归与线性回归 线性回归：预测连续数值变量（明天上海的地面温度？） 逻辑回归：预测分类 (classification)（今天会不会考试？） 逻辑回归与线性回归有什么联系？ 从一个例子说起：获取数据，判断恶意订房 1. 从酒店订房说起 商家需要判断顾客是否会恶意订房 根据什么来判断？ 利用信用值来判断是否会恶意订房 2. 如何通过信用值等数据来预测恶意订房 输入值：信用值等连续型数字，取值范围为 $\left ( -\infty , +\infty \right )$ 输出值：正常订房的概率 $p$，取值范围为 $\left [ 0 , 1 \right ]$ 当 $p&gt;阈值(0.5)$，判断顾客正常订房 当 $p \leqslant 阈值(0.5)$，判断顾客正常订房 如果直接通过线性回归，发现由于输入输出值得范围不同，导致无法很好的进行映射。于是通过对输出值进行变换 输入值：信用值等连续型数字，取值范围为 $\left ( -\infty , +\infty \right )$ 输出值：正常订房的概率 $p$，取值范围为 $\left [ 0 , 1 \right ]$ 通过 $\frac{p}{1-p}$ ，取值范围为 $\left [ 0 , +\infty \right )$ 进一步取对数 $ln\left (\frac{p}{1-p} \right )$ ，取值范围为 $\left ( -\infty , +\infty \right )$ \begin{align} &ln\left (\frac{p}{1-p} \right ) = wx+a\\ &\Rightarrow \frac{p}{1-p}=e^{wx+a}\\ &\Rightarrow p=e^{wx+a}(1-p)=\frac{e^{wx+a}}{1+e^{wx+a}} \\ \end{align} p=\frac{1}{1+e^{-wx-a}} \qquad \qquad x\in\left ( -\infty , +\infty \right )通过回归，我们得到了如下的数据： 进行拟合，对于这一种：在拐点处无法求导，继而无法得到最值，于是我们选用平滑曲线代替 可问题又来了不同的参数，得到的不同的拟合结果，我们应该选用哪一个来做最优解呢？ 3. 寻找最合理的参数 —— Cost Function我们的目的，是找到一个能让模型拟合结果更好的参数。方法就是设计一个Cost Function，让它来决定什么是好的模型。 以下用 $h_\theta (x)$ 来指代sigmoid function: $\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}$ 一个好的模型，Cost Function要尽量小 真值 $y=1$ ，$h_\theta (x)$ 会尽量大 真值 $y=0$ ，$h_\theta (x)$ 会尽量小 如此得到一个Cost Function： Cost(h_\theta (x), y)=\begin{cases} -ln(h_\theta (x)) & & y=1\\ -ln(1-h_\theta (x)) & & y=0\\ \end{cases}即： Cost(\theta) = -(1-y)ln(1-h_\theta (x))-yln(h_\theta (x))对于 $n$ 个数据，进行求和： J(\theta) = \sum_{i=1}^{n}\left[-(1-y^{i})ln(1-h_\theta(x^{i}))-y^{i}ln(h_\theta (x^{i}))\right] $x^i$ 是第 $i$ 个人的信用值，$y^i$ 是最后订房与否的指示数 $i=1$ 表示预定，$i=0$ 表示未预定 $\theta$ 是参数，作为向量的表示方法，因为参数很可能不止一个 根据这个 Cost Function，寻找能让其最小的 $\theta \in \left \{ \theta_1 , \theta_2 \right \}$，通过使其一阶导数为0，二阶导数为正，从而获取 $min \theta$： \begin{align} \frac{\partial J(\theta)}{\partial \theta_j} &= \frac{\partial }{\partial \theta_j }\sum_{i=1}^{n}\left [-(1-y^{i})ln(1-h_\theta(x^{i}))-y^{i}ln(h_\theta (x^{i}))\right ]\\ &=-\sum_{i=1}^{n}\left [(1-y^{i})\frac{\partial ln(1-h_\theta (x^{i}))}{\partial \theta _j}+y^{i}\frac{\partial ln(h_\theta (x^{i}))}{\partial \theta _j}\right ]\\ &=-\sum_{i=1}^{n}\left [(1-y^{i})\frac{1}{ln(1-h_\theta (x^{i}))} \frac{\partial (1-h_\theta (x^{i}))}{\partial \theta _j}+y^{i}\frac{1}{h_\theta (x^{i})}\frac{\partial (h_\theta (x^{i}))}{\partial \theta _j}\right]\\ &=-\sum_{i=1}^{n}\left [-(1-y^{i})\frac{h_\theta (x^{i})[1-h_\theta (x^{i})]}{1-h_\theta (x^{i})}\frac{\partial (\theta x^{i})}{\partial \theta_j}+y^{i}\frac{h_\theta (x^{i})[1-h_\theta (x^{i})]}{h_\theta (x^{i})}\frac{\partial (\theta x^{i})}{\partial \theta_j}\right]\\ &=-\sum_{i=1}^{n}\left [-(1-y^{i})h_\theta (x^{i})+y^{i}(1-h_\theta (x^{i}))\right]\frac{\partial (\theta x^{i})}{\partial \theta_j}\\ &=-\sum_{i=1}^{n}\left [-h_\theta (x^{i})+y^{i}\right]x_{j}^{i} \end{align} 其中 \begin{align} \frac{\partial \left(h_\theta \left (x^{i}\right)\right)}{\partial \theta _1} &=\frac{\partial }{\partial \theta _1}\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}} \\ &=-\frac{1}{(1+e^{-\theta _1x^{i}-\theta _2})^{2}}\frac{\partial \left(1+e^{-\theta _1x^{i}-\theta _2}\right)}{\partial \theta _1}\\ &=\frac{x^{i}e^{-\theta _1x^{i}-\theta _2}}{\left(1+e^{-\theta _1x^{i}-\theta _2}\right)^{2}}\\ &=x^{i}\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}\left(1-\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}\right) \\ &=x^{i}h_\theta \left (x^{i}\right)\left[1-h_\theta \left(x^{i}\right)\right] \end{align} \begin{align} \frac{\partial \left(h_\theta \left(x^{i}\right)\right)}{\partial \theta _2} &=\frac{\partial }{\partial \theta _2}\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}} \\ &=-\frac{1}{\left(1+e^{-\theta _1x^{i}-\theta _2}\right)^{2}}\frac{\partial \left(1+e^{-\theta _1x^{i}-\theta _2}\right)}{\partial \theta _2}\\ &=\frac{e^{-\theta _1x^{i}-\theta _2}}{\left(1+e^{-\theta _1x^{i}-\theta _2}\right)^{2}}\\ &=\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}\left(1-\frac{1}{1+e^{-\theta _1x^{i}-\theta _2}}\right) \\ &=h_\theta (x^{i})\left[1-h_\theta \left(x^{i}\right)\right] \end{align}对于所有的 $\theta_j$，都需要有： \frac{\partial J(\theta)}{\partial \theta_j}=-\sum_{i=1}^{n}\left[-h_\theta \left(x^{i}\right)+y^{i}\right]x_{j}^{i}\qquad \qquad j=1,2,...理论上，可以通过该方程求解各个 $\theta_j$，但由于 $h_\theta (x^i)$ 的存在，不易求出解析解，需要通过其他方法，计算出 $\theta_j$ 的近似解。 3.1. 使用sklearn自带函数求解逻辑回归参数In[1] 123456789101112131415import numpy as npimport matplotlib.pyplot as pltfrom sklearn.linear_model import LogisticRegression%matplotlib inlinedata = pd.read_csv('Score_Pass.csv')X, y = np.array(data['Score']), np.array(data['Pass/N'])x = X / np.max(X)lr = LogisticRegression(solver='lbfgs') #solver 可选默认，可选'newton-cg'，有区别lr.fit(x.reshape(-1, 1), y)print('slope = %f, interception= %f ' % (lr.coef_, lr.intercept_))pre_y = lr.predict_proba(x.reshape(-1, 1))pre_y_1 = [i[1] for i in pre_y]plt.scatter(x, y)plt.scatter(x, pre_y_1) 1slope = 11.702751, interception= -8.900218 Out[1] In[2] 12345678910111213141516171819202122import numpy as npimport matplotlib.pyplot as plt%matplotlib inline%config InlineBackend.figure_format = 'retina'np.random.seed(12)num_observations = 5000x1 = np.random.multivariate_normal([0, 0], [[1, .75], [.75, 1]], num_observations)x2 = np.random.multivariate_normal([1, 4], [[1, .75], [.75, 1]], num_observations)simulated_separableish_features = np.vstack((x1, x2)).astype(np.float32)simulated_labels = np.hstack((np.zeros(num_observations), np.ones(num_observations)))plt.figure(figsize=(12, 8))plt.scatter( simulated_separableish_features[:, 0], simulated_separableish_features[:, 1], c=simulated_labels, alpha=.4) Out[2] In[3] 123456789from sklearn.linear_model import LogisticRegressionclf = LogisticRegression(fit_intercept=True, C=1e15)clf.fit(simulated_separableish_features, simulated_labels)print( clf.coef_, clf.intercept_,) 1[[-5.02712572 8.23286799]] [-13.99400797] 3.2. 使用梯度下降法求解逻辑回归参数 沿着J(x)的下降方向对 $\theta$ 进行更新 \begin{align} \theta_j &=\theta_j - \frac{\partial J(\theta)}{\partial \theta_j}\\ &=\theta_j + \alpha\frac{1}{m}\sum_{i=1}^m\left[ y^{(i)}-h_\theta\left(x^{(i)}\right)\right]\,x_j^{(i)}\\ h_\theta\left(x^{(i)}\right) &= \frac{1}{1+e^{\sum_{j=1}^{n}-\theta_j x_j^{(i)}}} \end{align}$i$ 是样本点的标号，$j$ 是自变量个数的标号，在我们的案例中，$i$ 取1至10000，$j$ 只取 $1,2,3$（有常量参数） In[4] 12345678910111213141516def sigmoid_eg(x1, x2, theta_1, theta_2, theta_3): z = (theta_1 * x1 + theta_2 * x2 + theta_3).astype("float_") return 1.0 / (1.0 + np.exp(-z))# def Cost(x, y, theta_1, theta_2):# sigmoid_probs = sigmoid(x, theta_1, theta_2)# return -np.mean(y * np.log(sigmoid_probs)# + (1 - y) * np.log(1 - sigmoid_probs))def gradient_eg(x1, x2, y, theta_1, theta_2, theta_3): sigmoid_probs = sigmoid_eg(x1, x2, theta_1, theta_2, theta_3) return 1/len(y)*np.sum((y - sigmoid_probs)*x1),\1/len(y)*np.sum((y - sigmoid_probs)*x2),\1/len(y)*np.sum((y - sigmoid_probs)) In[5] 123456789101112131415161718192021222324252627def GradDe_eg(x1, x2, y, Max_Loop=20, alpha=0.1): #alpha = 0.00000001 #Max_Loop = 200 # Initialize Cost &amp; parameters theta_1 = 0.1 theta_2 = -0.4 theta_3 = 0.56 for l in range(Max_Loop): delta1, delta2, delta3 = gradient_eg(x1, x2, y, theta_1, theta_2, theta_3) #delta1 = alpha * np.sum((y-sigmoid(X, theta_1, theta_2)) * X) #delta2 = alpha * np.sum(y-sigmoid(X, theta_1, theta_2)) # alpha is the step size used for each gradient descent. theta_1 = theta_1 + alpha * delta1 theta_2 = theta_2 + alpha * delta2 theta_3 = theta_3 + alpha * delta3 if l % 1000 == 0: #print('cost = %f'%Cost(x, y, theta_1, theta_2)) print('delta%d =' % (l), [delta1, delta2, delta3]) print('theta%d =' % (l), [theta_1, theta_2, theta_3], '\n') #if l % 1000 == 0: # print(Cost(X, y, theta_1, theta_2), gradient(X,y,theta_1, theta_2),delta1,delta2) return [theta_1, theta_2, theta_3] In[6] 123weights_GD = GradDe_eg(simulated_separableish_features[:,0],\ simulated_separableish_features[:,1],\ simulated_labels,200000,0.9) 1234567891011121314151617delta0 = [0.3961871800720364, 1.5009373411273292, 0.041322520564441766]theta0 = [0.4565684620648328, 0.9508436070145964, 0.5971902685079976] delta1000 = [-0.0007704583774520729, 0.001169577110841499, -0.00204740502940396]theta1000 = [-2.6636329924890543, 4.471657694939081, -7.450004128248804] delta2000 = [-0.00040699408309612366, 0.0006346501021336131, -0.0011069894635109044]theta2000 = [-3.1583938131200133, 5.233346806623855, -8.780787027655295] ... ...... ...delta198000 = [-3.64302204385325e-09, -9.997352543678063e-09, -5.087131606984486e-09]theta198000 = [-5.059009978575051, 8.289579861025118, -14.09229413937621] delta199000 = [-1.8617213591198835e-09, -2.5363573357140016e-09, -1.3400418549025517e-09]theta199000 = [-5.059010268875257, 8.289579870388907, -14.09229451979946] In[7] 1weights_GD Out[7] 1[-5.059010268463914, 8.289579874245822, -14.092294984033252] 3.3. 使用牛顿法求解逻辑回归参数 \begin{align} x_{n+1} &= x_{n} - \frac{f(x_{n})}{f’(x_{n})} \\ x_{n+2} &= x_{n+1} - \frac{f(x_{n+1})}{f’(x_{n+1})} \\ \end{align} 我们要找的是一阶导数为 $0$ 的点，所以 我们的 $f(x)=J’(x)$，我们的牛顿迭代公式为： \begin{align} x_{n+1} &= x_{n} - \frac{J'(x_{n})}{J''(x_{n})} \\ x_{n+2} &= x_{n+1} - \frac{J'(x_{n+1})}{J''(x_{n+1})} \end{align}在多元的情况下，$J’’(x_{n})=H_{\ell(\hat{\theta})}$ 海塞矩阵： H_{\ell(\hat{\theta})} = \begin{bmatrix} \begin{split} \frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{1}}} & \frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{2}}} \\ \frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{1}}} & \frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{2}}} \\ \end{split}\end{bmatrix}三阶海塞矩阵形式为： H_{\ell(\hat{\theta})} = \begin{bmatrix} \begin{split} \frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{1}}} & \frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{2}}} & \frac{\partial^{2}{J}}{\partial{\theta_{1}}\partial{\theta_{3}}} \\ \frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{1}}} & \frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{2}}} & \frac{\partial^{2}{J}}{\partial{\theta_{2}}\partial{\theta_{3}}}\\ \frac{\partial^{2}{J}}{\partial{\theta_{3}}\partial{\theta_{1}}} & \frac{\partial^{2}{J}}{\partial{\theta_{3}}\partial{\theta_{2}}}& \frac{\partial^{2}{J}}{\partial{\theta_{3}}\partial{\theta_{3}}}\\ \end{split}\end{bmatrix} H_{\ell(\hat{\theta})} = \begin{bmatrix}\begin{split} \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,1}x_{i,1},\ & \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,1}x_{i,2},\ & \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,1}\\ \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,2}x_{i,1},\ & \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,2}x_{i,2},\ & \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,2},\\ \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,1},\ & \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,2},\ & \sum_{i=1}^{n}h_{\theta}(x_{i})(1-h_{\theta}(x_{i}))x_{i,3}\\ \end{split}\end{bmatrix} \\ \begin{align} &h_{\theta}(x_i) = \frac{1}{1 + e^{-z}}\\ &z = \theta_{1}x_{i,1} + \theta_{2}x_{i,2}+\theta_3 \end{align}一阶导数 \nabla J = -\begin{pmatrix} \sum_{i=1}^{n}(y_{i} - h_{\theta}(x_{i}))x_{i,1}\\ \sum_{i=1}^{n}(y_{i} - h_{\theta}(x_{i}))x_{i,2}\\ \sum_{i=1}^{n}(y_{i} - h_{\theta}(x_{i}))x_{i,3} \end{pmatrix} \theta_j=\theta_j - H^{-1}\nabla J(\theta)In[8] 123456789def sigmoid_eg(x1, x2, theta_1, theta_2, theta_3): z = (theta_1 * x1 + theta_2 * x2 + theta_3).astype("float_") return 1.0 / (1.0 + np.exp(-z))def Cost(x1, x2, y, theta_1, theta_2, theta_3): sigmoid_probs = sigmoid_eg(x1, x2, theta_1, theta_2, theta_3) return -np.mean(y * np.log(sigmoid_probs) + (1 - y) * np.log(1 - sigmoid_probs)) In[9] 1234567def gradient_nt(x1, x2, y, theta_1, theta_2, theta_3): sigmoid_probs = sigmoid_eg(x1, x2, theta_1, theta_2, theta_3) return np.array([ np.sum((y - sigmoid_probs) * x1), np.sum((y - sigmoid_probs) * x2), np.sum(y - sigmoid_probs) ]) In[10] 12345678910111213def hessian(x1, x2, y, theta_1, theta_2, theta_3): sigmoid_probs = sigmoid_eg(x1, x2, theta_1, theta_2, theta_3) d1 = np.sum((sigmoid_probs * (1 - sigmoid_probs)) * x1 * x1) d2 = np.sum((sigmoid_probs * (1 - sigmoid_probs)) * x1 * x2) d3 = np.sum((sigmoid_probs * (1 - sigmoid_probs)) * x1) d4 = np.sum((sigmoid_probs * (1 - sigmoid_probs)) * x2 * x1) d5 = np.sum((sigmoid_probs * (1 - sigmoid_probs)) * x2 * x2) d6 = np.sum((sigmoid_probs * (1 - sigmoid_probs)) * x2) d7 = np.sum((sigmoid_probs * (1 - sigmoid_probs)) * x1) d8 = np.sum((sigmoid_probs * (1 - sigmoid_probs)) * x2) d9 = np.sum((sigmoid_probs * (1 - sigmoid_probs))) H = np.array([[d1, d2, d3], [d4, d5, d6], [d7, d8, d9]]) return H In[11] 12345678theta_1 = 0.001theta_2 = -0.4theta_3 = 0.6sigmoid_probs = sigmoid_eg(simulated_separableish_features[:,0],\ simulated_separableish_features[:,1],\ theta_1,theta_2,theta_3)sigmoid_probs Out[11] 12array([0.70539901, 0.71740128, 0.75001283, ..., 0.25536395, 0.25133316, 0.20942065]) In[12] 1234567891011121314151617181920212223242526272829303132333435363738def newtons_method(x1, x2, y): # Initialize Cost &amp; parameters theta_1 = 0.001 theta_2 = -0.4 theta_3 = 0.6 delta_l = np.Infinity l = Cost(x1, x2, y, theta_1, theta_2, theta_3) # Convergence Conditions δ = .0000000001 max_iterations = 15 i = 0 while abs(delta_l) &gt; δ and i &lt; max_iterations: i += 1 g = gradient_nt(x1, x2, y, theta_1, theta_2, theta_3) hess = hessian(x1, x2, y, theta_1, theta_2, theta_3) H_inv = np.linalg.inv(hess) # @ is syntactic sugar for np.dot(H_inv, g.T)¹ delta = H_inv @ g.T delta_theta_1 = delta[0] delta_theta_2 = delta[1] delta_theta_3 = delta[2] print(theta_1, theta_2, theta_3, l, g) # Perform our update step theta_1 += delta_theta_1 theta_2 += delta_theta_2 theta_3 += delta_theta_3 # Update the log-likelihood at each iteration l_new = Cost(x1, x2, y, theta_1, theta_2, theta_3) delta_l = l - l_new l = l_new return np.array([theta_1, theta_2, theta_3]) In[13] 123weights_NT = newtons_method(simulated_separableish_features[:,0],\ simulated_separableish_features[:,1],\ simulated_labels) 12345678910111213140.001 -0.4 0.6 1.192232682683846 [ 4203.81624265 15339.64896586 425.24295633]-0.5323055089899444 1.3654730366188175 -2.213077389806385 0.1268005198001985 [ -4.87460157 917.75831422 -229.19748353]-1.1017906890766926 2.1170684289582935 -3.515199454248499 0.06344214919739537 [ 9.11552841 372.53112984 -82.41612615]-1.696350075213766 2.9567826609247536 -4.958577211933369 0.0359808048849091 [ 7.25193544 153.26328814 -30.62002723]-2.3598703977461986 3.9351755787400005 -6.633652721276137 0.023305245309678077 [ 4.99551386 64.01150281 -11.18719616]-3.102101701476835 5.077389660723291 -8.586610622518707 0.017443703519444794 [ 3.20603557 26.54120782 -3.88451216]-3.8866316214728123 6.334661214553187 -10.738329272756982 0.014970682152691529 [ 1.76384655 10.23918884 -1.21513341]-4.578746773357871 7.479180436760244 -12.700646487249276 0.014194607302215922 [ 0.69308352 3.13228017 -0.30245818]-4.96926037381912 8.137065370724404 -13.830223818356856 0.014076397801702743 [ 0.13170341 0.51575348 -0.0430004 ]-5.055692120582939 8.28392101239704 -14.082565688206492 0.014072547126520205 [ 0.00514173 0.01873735 -0.00152877]-5.059007231550736 8.28957481482966 -14.092286111829237 0.014072542010902475 [3.46957973e-05 1.22308017e-04 4.33913704e-05]-5.059012074312396 8.289583319446658 -14.092299639264253 0.014072542383840357 [-1.32332893e-05 -3.33496011e-05 -1.47340364e-05]-5.059012209362201 8.289583262232439 -14.092299836143358 0.014072542049442381 [ 8.05848509e-06 -4.68544268e-06 -5.44347003e-06]-5.059011843642549 8.289583140516363 -14.0922999061835 0.014072542383840357 [-1.32332893e-05 -3.33496011e-05 -1.47340364e-05] In[14] In[14] 123print('Gradient descent: &#123;&#125;'.format(weights_GD))print('Newtons method: &#123;&#125;'.format(weights_NT))print('Sklearn method: &#123;&#125; &#123;&#125;'.format(clf.coef_, clf.intercept_,)) Out[14] 123Gradient descent: [-5.059010268463914, 8.289579874245822, -14.092294984033252]Newtons method: [ -5.05901198 8.28958308 -14.0923001 ]Sklearn method: [[-5.02712572 8.23286799]] [-13.99400797] 通过上面的数据处理，便得到了对于本次回归的最优解： 从逻辑回归到SoftMax对于二分类问题，我们使用逻辑回归 h_\theta (x)=\frac{1}{1+e^{-\left ( \theta_1 x+\theta_2 \right )}} =\frac{e^{ \theta_1 x+\theta_2}}{1+e^{ \theta_1 x+\theta_2}}而对于多分类的问题，就要引入SoftMax Function，其本质上和逻辑回归一致，但需要从多个角度分析 首先定义 Z_i (x)=\theta _{i,1}x_1+\theta _{i,2}x_2 则SoftMax Function为 Softmax = \frac{e^{z_i(x)}}{\sum e^{z_i(x)}} 例如我们定义一个5类的SoftMax Function p_i=\begin{cases} \frac{e^{z_1(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}& & ①\\ \frac{e^{z_2(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}& & ②\\ \frac{e^{z_3(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}& & ③\\ \frac{e^{z_4(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}& & ④\\ \frac{e^{z_5(x)}}{\sum_{i=1}^{5} e^{z_i(x)}}& & ⑤ \end{cases}同逻辑回归一样，SoftMax Function也可以求偏导 \begin{align} \frac{\partial (Softmax_{(i)})}{\partial \theta _j} &=\frac{\partial }{\partial \theta _j}\frac{e^{\theta_{i}x_{i}}}{\sum_{j=1}^{n}e^{\theta_{j}x_{j}}}\\ &\Rightarrow x_j\cdot\left ( 1-Softmax_{(i)} \right )\cdot Softmax_{(i)} & &(i=j)\\ &\Rightarrow -x_j \cdot Softmax_{(i)}\cdot Softmax_{(j)}& &(i\neq j) \end{align}]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Statistics</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最简单最实用：线性回归]]></title>
    <url>%2F2019%2F02%2F11%2FLinear_Regression_Lecture%2F</url>
    <content type="text"><![CDATA[线性回归 在解决连续变量的预测问题里，线性回归最简单 对于很多问题，在一定范围内是有效的 理论和应用也是最完善的 1. 为什么要使用线性回归？ $y=c_0+c_1 x_1+c_2 x_2$ 形式简单 应用广泛：身高与体重，海拔与气压 普通最小二乘法理解容易，计算起来简单 结果也很容易解释 奥卡姆剃刀指南：如果没有足够的证据（理由），就不用更复杂的模型 In my opinion the theory here is the logically simplest relativistic field theory that is at all possible. But this does not mean that Nature might not obey a more complex theory. More complex theories have frequently been proposed. . . In my view, such more complicated systems and their combinations should be considered only if there exist physical-empirical reasons to do so. ​ —Einstein 2. 如何计算线性回归？最小二乘法 世界不是完美的，要接纳不完美 需要通过量化的形式来比较 \begin{align} \hat{y}_{黄} = c_0 + c_1 x \\ \hat{y}_{红} = d_0 + d_1 x \end{align} 每个观测值是$x_i,y_i$ $x_i$是自变量，回归的值是$\hat{y}_i$ 样本的回归是对总体的回归的估计 \begin{align} &\hat{y}_i = \hat{\alpha} + \hat{\beta} x_i \\ &y_i = \alpha + \beta x_i \ \end{align} 单个点的拟合程度用残差来衡量： \begin{align} \epsilon_i = y_i - \hat{y}_i \end{align} 整体的拟合程度，用残差平方和（SSE）来衡量： \begin{align} sum\ of\ square\ error &= \sum_i \epsilon_i^2 \\ &= \sum_i (y_i - \hat{y}_i)^2 \\ &= \sum_i (y_i - \hat{\alpha} - \hat{\beta} x_i )^2\ \end{align} 选出拟合程度最好的直线 残差平方和最小的直线 根据极值条件求 $\alpha,\beta$ \begin{align} &\hat{\beta} = \frac{\sum(x_i-\bar{x})(y_i-\bar{y})}{\sum(x_i-\bar{x})^2}\\ &\hat{\alpha} = \bar{y}-\hat{\beta}\bar{x} \end{align} 3. 由最小二乘法选出的直线有没有用？ 选出一根直线只是万里长征第一步 不管是什么样的数据，都可以计算出一根这样的直线 需要用其他标准来衡量，这跟直线，对解释数据到底有没有用 In[1] 12345678910111213141516import numpy as npimport matplotlib.pyplot as pltimport pandas as pd%matplotlib inline%config InlineBackend.figure_format = 'retina'x = np.linspace(0, 800, 10000)np.random.seed(1)y = 400 + np.random.random(10000) * 400 + x * 0.002plt.figure(figsize=[8, 6])plt.scatter(x, y, s=0.2)plt.xlabel('PM_Nongzhanguan')plt.ylabel('PM_Dongsi') Out[1] Text(0, 0.5, &#39;PM_Dongsi&#39;) In[2] 12345678910111213from sklearn.linear_model import LinearRegressionlr = LinearRegression()lr.fit(x.reshape(-1, 1), y)y_hat = lr.predict(x.reshape(-1, 1))print('intercept = %f, slope = %f' % (lr.intercept_, lr.coef_))plt.figure(figsize=[8, 6])plt.scatter(x, y, s=0.2)plt.plot(x, 600 + x * 0.002, '--', c='blue')plt.plot(x, y_hat, c='red')plt.xlabel('PM_Nongzhonguan')plt.ylabel('PM_Dongsi') intercept = 600.891491, slope = -0.002232 Out[2] Text(0, 0.5, &#39;PM_Dongsi&#39;) In[3] 123456789y_1_random = (y - x * 0.002)y_2 = np.mean( y_1_random) + x * 0.002 + (y_1_random - np.mean(y_1_random)) / 400 * 20plt.figure(figsize=[8, 6])plt.scatter(x, y_2, s=0.2)plt.xlabel('PM_Nongzhanguan')plt.ylabel('PM_Dongsi')plt.ylim([400, 800]) Out[3] (400, 800) In[4] 1234567891011from sklearn.linear_model import LinearRegressionlr2 = LinearRegression()lr2.fit(x.reshape(-1, 1), y_2)y_hat_2 = lr2.predict(x.reshape(-1, 1))plt.figure(figsize=[8, 6])plt.scatter(x, y_2, s=0.2)plt.plot(x, y_hat_2, c='white')plt.xlabel('PM_Nongzhanguan')plt.ylabel('PM_Dongsi')plt.ylim([400, 800])print('intercept = %f, slope = %f' % (lr2.intercept_, lr2.coef_)) intercept = 599.283220, slope = 0.001788 In[5] 12345678910111213141516fig = plt.figure(figsize=(15, 6))fig.subplots_adjust(hspace=0.4, wspace=0.4)plt.subplot(1, 2, 1)plt.scatter(x, y, s=0.2)plt.plot(x, y_hat, c='red')plt.xlabel('PM_Nongzhanguan')plt.ylabel('PM_Dongsi')plt.subplot(1, 2, 2)plt.scatter(x, y_2, s=0.2)plt.plot(x, y_hat_2, c='white')plt.xlabel('PM_Nongzhanguan')plt.ylabel('PM_Dongsi')plt.ylim([400, 800])print('left intercept = %f, slope = %f' % (lr.intercept_, lr.coef_))print('right intercept = %f, slope = %f' % (lr2.intercept_, lr2.coef_)) left intercept = 600.891491, slope = -0.002232 right intercept = 599.283220, slope = 0.001788 In[6] 12345678910111213141516x = np.linspace(0, 800, 10000)np.random.seed(2)y3 = 400 + np.random.random(10000) * 400 + x * 0.002lr3 = LinearRegression()lr3.fit(x.reshape(-1, 1), y3)y_hat_3 = lr3.predict(x.reshape(-1, 1))y_3_random = (y3 - x * 0.002)y_4 = np.mean( y_3_random) + x * 0.002 + (y_3_random - np.mean(y_3_random)) / 400 * 20lr4 = LinearRegression()lr4.fit(x.reshape(-1, 1), y_4)y_hat_4 = lr4.predict(x.reshape(-1, 1))print('left intercept = %f, slope = %f' % (lr3.intercept_, lr3.coef_))print('right intercept = %f, slope = %f' % (lr4.intercept_, lr4.coef_)) left intercept = 597.434210, slope = 0.002158 right intercept = 597.494287, slope = 0.002008 In[7] 12345678910111213141516x = np.linspace(0, 800, 10000)np.random.seed(3)y3 = 400 + np.random.random(10000) * 400 + x * 0.002lr3 = LinearRegression()lr3.fit(x.reshape(-1, 1), y3)y_hat_3 = lr3.predict(x.reshape(-1, 1))y_3_random = (y3 - x * 0.002)y_4 = np.mean( y_3_random) + x * 0.002 + (y_3_random - np.mean(y_3_random)) / 400 * 20lr4 = LinearRegression()lr4.fit(x.reshape(-1, 1), y_4)y_hat_4 = lr4.predict(x.reshape(-1, 1))print('left intercept = %f, slope = %f' % (lr3.intercept_, lr3.coef_))print('right intercept = %f, slope = %f' % (lr4.intercept_, lr4.coef_)) left intercept = 599.686570, slope = -0.000431 right intercept = 598.762664, slope = 0.001878 In[8] 1234567891011121314151617181920212223242526def coeff_lr(i): x = np.linspace(0, 800, 10000) np.random.seed(i) y3 = 400 + np.random.random(10000) * 400 + x * 0.002 lr3 = LinearRegression() lr3.fit(x.reshape(-1, 1), y3) y_hat_3 = lr3.predict(x.reshape(-1, 1)) y_3_random = (y3 - x * 0.002) y_4 = np.mean( y_3_random) + x * 0.002 + (y_3_random - np.mean(y_3_random)) / 400 * 20 lr4 = LinearRegression() lr4.fit(x.reshape(-1, 1), y_4) y_hat_4 = lr4.predict(x.reshape(-1, 1)) #print('left intercept = %f, slope = %f'%(lr3.intercept_,lr3.coef_)) #print('right intercept = %f, slope = %f'%(lr4.intercept_,lr4.coef_)) return pd.DataFrame([[0, lr3.coef_], [1, lr4.coef_]], columns=['cate', 'coef_'])result = coeff_lr(0)for i in range(1, 100): df = coeff_lr(i) result = result.append(df, ignore_index=True) In[9] 123import seaborn as snssns.stripplot( x="cate", y="coef_", data=result, jitter=True) 3.1 要点 每次回归是对某一次抽样的样本进行回归分析 对样本回归计算后的斜率是个变量，随抽样结果不同而不同 3.2 需要进一步使用其他指标来衡量线性回归的效用，达到建模与分析的目的 回归分析的目的是什么？ 去估计总体的x与总体的y之间的关系，是正相关？负相关？还是不相关？（这一层面，在于与‘不相关‘比较） 相关性会不会随不同的抽样情景变化？会不会出现：第一次抽样的回归结果是正相关，第二次抽样的回归结果是负相关？ 确定了相关性，那么线性回归模型能不能很好的解释原有数据的特点？ 4. 线性回归的参数估计分析以斜率为例 斜率的符号与相关性 \begin{align} \hat{\beta} & = \frac{Cov(x,y)}{Var(x)} \\ & = \frac{Cov(x,y)}{\sqrt{Var(x) }\sqrt{Var(x)} }\\ & = \frac{Cov(x,y)}{\sqrt{Var(x) }\sqrt{Var(y)}}\frac{\sqrt{Var(y)}} {\sqrt{Var(x)} }\\ & ={Corr(x,y)}\frac{\sqrt{Var(y)}}{\sqrt{Var(x)}} \end{align} 在假设检验的框架下，衡量回归参数符号的不确定性 $\hat{\beta}$随样本变化而变化，是总体回归参数$\beta$的估计量，具有均值和方差 \begin{align} \hat{\beta} &= \frac{\sum(x_i-\bar{x})(y_i-\bar{y})}{\sum(x_i-\bar{x})^2}\\ &= \frac{\sum(x_i-\bar{x})y_i}{\sum(x_i-\bar{x})^2}\\ \end{align} \begin{align} E(\hat{\beta}) &=\frac{\sum(x_i-\bar{x})E(y_i)}{\sum(x_i-\bar{x})^2}\\ &=\frac{\sum(x_i-\bar{x})(\alpha+\beta x_i)}{\sum(x_i-\bar{x})^2}\\ &=\beta \end{align} \begin{align} Var(\hat{\beta}) &= \sum[\frac{(x_i-\bar{x})}{\sum(x_i-\bar{x})2}]2Var(y_i)\\ &=\frac{\sigma2}{\sum(x_i-\bar{x})2} \end{align} 用t检验来判断，0在回归参数分布的位置，以判断参数正负符号的不确定性 t检验： 原假设， H0: $\beta = 0$ 备择假设,H1: $\beta \neq 0$ $\hat{\beta} \sim N(\beta,\frac{\sigma^2}{\sum(x_i-x)^2}$) 构造统计量 $t = \frac{\hat{\beta}}{\sqrt{\hat{\sigma}^2/\sum(x_i-x)^2}}$ 其中 $\hat{\sigma}^2 = \frac{1}{n-1}\sum e_i^2 = \frac{1}{n-1}\sum(y_i-\hat{y_i})^2$ 计算对应的p值，判断是否拒绝原假设 如何解释显著性？（我的理解应解释为相关性的确定程度） 5. 线性回归对数据的解释 回归分析的目的是什么？ 去估计总体的x与总体的y之间的关系，是正相关？负相关？还是不相关？（这一层面，在于与‘不相关‘比较） 相关性会不会随不同的抽样情景变化？会不会出现：第一次抽样的回归结果是正相关，第二次抽样的回归结果是负相关？ 确定了相关性，那么线性回归模型能不能很好的解释原有数据的特点？ \begin{align} R^2 = \frac{SSR}{SST}=1-\frac{SSE}{SST} \end{align} $R^2$含义：离差平方和中有多少能被回归平方和解释 注意事项： $R^2=0$不代表自变量与因变量没有关系 $R^2$大也不代表自变量和因变量就一定是线性关系 $R^2$大也不代表结果显著（与确定性无关） 6. 线性回归对样本及误差的要求和假设前提 要求： y的均值是x的线性组合 残差$e_i$独立于x 给定x, 残差$e_i$要服从正态分布 对于不同的xi, 残差$e_i$的方差variance应相同 Linear Function Independent Normal Distribution Equal Variance 7. 预测的confidence interval 和 prediction interval 问题1：年级与某成人考试分数，根据抽样样本，估计二年级学生的平均分数 不同次的抽样，回归结果是不一样的 预测二年级的学生平均分数 vs 预测某个学生的考试分数 Confidential Interval Prediction Interval]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Statistics</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从正态分布到置信区间]]></title>
    <url>%2F2018%2F06%2F18%2F%E4%BB%8E%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83%E5%88%B0%E7%BD%AE%E4%BF%A1%E5%8C%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[先从人均收入说起我们通常会统计一个地区的人均收入水平，以此来反应这个地区的经济发展水平。假设现在从一个地区，随机抽取1000人，统计他们的年收入，求和后除以1000，得到一个平均年收入： \overline{X}=\frac{1}{1000}\sum_{i=1}^{1000}X_i \qquad（X_i为第i个人的年收入）但是这里有一个显而易见的问题，由于每次随机抽取的样本不尽相同，导致算出的算术平均值每次都可能不同。例如第一次$\overline{X_1}=6200$，第二次$\overline{X_2}=6000$，第三次$\overline{X_3}=6100$……，这样得到的数据，让人不知道该相信哪个。 从抽样到客观通过以上的例子，我们得出了一个结论：以点估点是靠不住的，更何况在连续型随机变量中，取一个点的概率是测不到的。但是，这并不意味着平均收入值是不存在的。即一定有那么一个客观存在的值，不因抽样的不同而改变，我们不妨记这个数为 $\mu$ 。 我们回到统计中，假设现在有一组灯泡，我们该如何去估计平均寿命呢？我们同样去抽取一组样本，测量它们的平均寿命 $\overline{X}$ ，虽然这个 $\overline{X}$ 不会正好就是 $\mu$ ，但是我们从常理可知，这个值应该与真实存在的 $\mu$ 相去不远。也就是说，在如果一组灯泡的真实平均寿命是1800小时，我们测得的平均值应该在1800左右，而不会出现例如20，100这样明显偏离的值。那么计算我们测得的 $\overline{X}$ 与 $\mu$ 的距离： |\overline{X}-\mu|然后计算这个距离小于某个值得概率： P(|\overline{X}-\mu|]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Statistics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 局域网共享 ShadowSocks]]></title>
    <url>%2F2018%2F02%2F05%2FMac%E5%B1%80%E5%9F%9F%E7%BD%91%E5%85%B1%E4%BA%ABss%2F</url>
    <content type="text"><![CDATA[新买了 NS，却发现下载速度慢，切自身无法连接 ss，于是找到了将 macOS 的全局网络在局域网下分享给其他设备的方法。 安装 ShadowSocks安装ShadowSocks略过，无论是GUI版还是命令行版都可以，可以参考这里。 配置 ShadowSocks地址端口自行配置，这里要记住的两个地方： 12"local_address":"0.0.0.0","local_port":1080, local_address 这里填写 0.0.0.0 表示局域网点的所有机子都可以通过 1080 这个端口代理，也可以就用主机地址 127.0.0.1 local_port 端口号不要重复，如果有 HTTPS 代理时尤为注意，同时这个需要记住，之后用到 PrivoxyWindows 系统可以通过几个命令，甚至是客户端的选项就可以完成代理 可惜的是，macOS 没有提供这样的功能，所以我们需要借助像 Privoxy 这样的工具来实现Sock5共享。 安装这里分享的是使用 Homebrew 安装 1brew install privoxy homebrew 会报错 /usr/local/sbin is not writable，这是因为 /usr/local/ 这个目录不属于当前用户，所以 homebrew 无法访问。解决方法为： 12sudo mkdir /usr/local/sbinsudo chown -R `whoami`:admin /usr/local/sbin 之后运行： 1brew link privoxy 配置1vim /usr/local/etc/privoxy/config 在 vim 中搜索 forward-socks5t / ，去掉注释，将端口改为 local_port 号 forward-socks5t / 127.0.0.1:1080 搜索 listen-address 127.0.0.1:8118 ，去掉注释，把 127.0.0.1 改为 0.0.0.0，端口号默认或选择一个未占用的端口 listen-address 0.0.0.0:6666 修改这两处后，保存并退出即可 运行1sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config &amp; 最后的 &amp; 是为了让 privoxy 在后台运行 参见： http://ju.outofmemory.cn/entry/251730 http://my.oschina.net/u/994235/blog/296702 获取本机 IP1ifconfig | grep 'inet' 其中 inet 后即为本机 IP 将 Privoxy 添加到开机启动中123456# 添加开机启动:ln -sfv /usr/local/opt/privoxy/*.plist ~/Library/LaunchAgents # 启动 Privoxy:launchctl load ~/Library/LaunchAgents/homebrew.mxcl.privoxy.plist # 如果不需要用 launchctl 就直接运行:privoxy /usr/local/etc/privoxy/config 查看状态查看进程123ps aux | grep privoxy# 如果返回如下则说明启动成功root 34090 0.0 0.0 4278700 1196 ?? Ss 5:39PM 0:00.01 /usr/local/sbin/privoxy /usr/local/etc/privoxy/config 查看端口监听123netstat -an | grep 6666# 如果返回如下则说明启动成功tcp4 0 0 *.6666 *.* LISTEN 结束进程先查看进程ID： 123ps aux | grep privoxy# 返回 id 为 34090root 34090 0.0 0.0 4278700 1196 ?? Ss 5:39PM 0:00.01 /usr/local/sbin/privoxy /usr/local/etc/privoxy/config 然后： 1sudo kill 34090 当然，也可以直接根据privoxy进程名来关闭Privoxy： 1sudo killall privoxy 使用快捷短语通过给以上命令别名（alias）来快速操作和查看 1vim ./.bashrc 如果使用的是 zsh，则 1vim ./.zshrc 在底部插入如下命令 12345# privoxyalias privoxy="sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config;"alias privoxy_status="ps aux | grep privoxy;"alias privoxy_port="netstat -an | grep 6666;"alias privoxy_quit="sudo killall privoxy;" 这里为 alias 别名=&quot;命令;&quot; ，别名可以填自己喜欢的，命令需要和之前的一致 之后重启 Terminal 就可以通过别名来快速操作了 在其他设备使用支持手动配置代理的设备，在同一个WiFi下，即可手动配置，以NS为例： Proxy Setting 下，Server 为主机 IP，Port 为 listen-address 的端口号。同理iPhone，PS4等设备也就可以通过这些配置来实现科学上网了。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>ShadowSocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Google Drive作为Blog的图床]]></title>
    <url>%2F2017%2F12%2F10%2F%E4%BD%BF%E7%94%A8Google%20Drive%E4%BD%9C%E4%B8%BABlog%E7%9A%84%E5%9B%BE%E5%BA%8A%2F</url>
    <content type="text"><![CDATA[有时候会碰到需要在blog或者GitHub写一些东西的时候需要用到图片，微博图床总是失效，于是想到可以使用Google Drive作为图床使用。 登陆Google Drive上传图片之后点击获取链接，我们会得到一个如下的URL地址 1https://drive.google.com/open?id=YOUR_FILE_ID&amp;authuser=0 但是这个地址是无法直接作为image的src值的，我们需要稍微做一点修改(你必须设置一下google的共享属性知道此链接的任何人都可以查看) 1https://drive.google.com/uc?export=view&amp;id=YOUR_FILE_ID 如果需要让这个文件直接支持下载的话，请使用如下地址 1https://drive.google.com/uc?export=download&amp;id=YOUR_FILE_ID]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swift UILabel 属性]]></title>
    <url>%2F2017%2F12%2F10%2FSwift-UILabel-%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[Swift 中的 UILabel 属性 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193import UIKitclass ViewController: UIViewController &#123; override func viewDidLoad() &#123; super.viewDidLoad() //设置标签x坐标：10，y坐标：20，长：300，宽：100 let label = UILabel(frame:CGRectMake(10,20, 300, 100)) // 显示文本【需要显示什么就设置这个 text 的属性即可】 label.text=" Welcome to study Swift ！" // label的字体颜色 label.textColor=UIColor.redColor() //红色文字 // label的背景颜色 label.backgroundColor=UIColor.blackColor() //黑色背景 // label的文字对齐方式 /** case Left（左对齐） case Center（居中） case Right（右对齐） */ label.textAlignment=NSTextAlignment.Right //文字右对齐 // label阴影颜色【要设置偏移位置】(字体的阴影颜色) label.shadowColor=UIColor.grayColor() //灰色阴影 // label阴影偏移位置 label.shadowOffset=CGSizeMake(-5,5) //阴影的偏移量 // 多行显示，默认是一行的,0表示的多行显示（与高度有关）Label自适应自动换行 label.numberOfLines=0 //显示两行文字（默认只显示一行，设为0表示没有行数限制） // 自适应（不建议使用） /** 1、没有设置多行显示：宽度自适应 2、设置有多行显示：高度使用 */ // 文本有多大,窗口有多大 // 细节: 不管高度宽度是否足够，都显示相应的高度 // 细节: numberOfLines为1,那么就是单行显示 label.adjustsFontSizeToFitWidth=true //当文字超出标签宽度时，自动调整文字大小，使其不被截断 // 设置label文本高亮 label.highlighted = true // 设置label文本高亮颜色 label.highlightedTextColor = UIColor.greenColor() // label圆角属性 label.layer.masksToBounds = true; // label圆角半径 label.layer.cornerRadius = 10; // label圆角边框颜色 label.layer.borderColor = UIColor.blueColor().CGColor; // label圆角边框宽度 label.layer.borderWidth = 1; // label的字体大小 /** systemFontOfSize(20) -&gt; UIFont (文字大小) boldSystemFontOfSize(20) -&gt; UIFont (加粗类型) italicSystemFontOfSize(20) -&gt; UIFont (斜体类型) */ label.font = UIFont.systemFontOfSize(50) // 设置字体时，同时设置大小 label.font = UIFont(name:"您好！", size:50) // label的特殊属性 /** case ByWordWrapping // Wrap at word boundaries, default case ByCharWrapping // Wrap at character boundaries case ByClipping // Simply clip case ByTruncatingHead // Truncate at head of line: "...wxyz" case ByTruncatingTail // Truncate at tail of line: "abcd..." case ByTruncatingMiddle // Truncate middle of line: "ab...yz" */label.lineBreakMode=NSLineBreakMode.ByTruncatingTail //隐藏尾部并显示省略号 label.lineBreakMode=NSLineBreakMode.ByTruncatingMiddle //隐藏中间部分并显示省略号 label.lineBreakMode=NSLineBreakMode.ByTruncatingHead //隐藏头部并显示省略号 label.lineBreakMode=NSLineBreakMode.ByClipping //截去多余部分也不显示省略号 // 将视图添加到(self.view--&gt;父视图)界面中; self.view.addSubview(label); // 富文本设置 let attributeString = NSMutableAttributedString(string:"Welcome to study Swift ！") // 从文本0开始6个字符字体HelveticaNeue-Bold,16号字体大小 attributeString.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 16)!,range: NSMakeRange(0,6)) // 设置字体颜色 attributeString.addAttribute(NSForegroundColorAttributeName, value: UIColor.blueColor(),range: NSMakeRange(0, 3)) // 设置文字背景颜色 attributeString.addAttribute(NSBackgroundColorAttributeName, value: UIColor.greenColor(),range: NSMakeRange(3,3)) label.attributedText = attributeString &#125; override func didReceiveMemoryWarning() &#123; super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. &#125;&#125;]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全局.gitignore]]></title>
    <url>%2F2017%2F11%2F23%2Fgitignore%20global%2F</url>
    <content type="text"><![CDATA[以.DS_Store文件为例： 创建 ~/.gitignore_global 文件，将需要忽略的文件类型写入文件1touch .gitignore_global 在.gitconfig 中引用打开~/.gitconfig，输入： 12[core] excludesfile = /Users/reon/.gitignore_global 或是通过： 1git config --global core.excludesfile/Users/reon/.gitignore_global 命令来实现。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C# 中的委托和事件]]></title>
    <url>%2F2017%2F11%2F07%2FDelegates%20and%20events%20in%20Csharp%2F</url>
    <content type="text"><![CDATA[引言delegate 和 event在 .Net Framework中的应用非常广泛，然而，较好地理解委托和事件对很多接触C#时间不长的人来说并不容易。本文中，我将通过两个范例由浅入深地讲述什么是委托、为什么要使用委托、事件的由来、.Net Framework中的委托和事件、委托和事件对Observer设计模式的意义，对它们的中间代码也做了讨论。 将方法作为方法的参数我们先不管这个标题如何的绕口，也不管委托究竟是个什么东西，来看下面这两个最简单的方法，它们不过是在屏幕上输出一句问候的话语： 1234567public void GreetPeople(string name) &#123; // 做某些额外的事情，比如初始化之类，此处略 EnglishGreeting(name);&#125;public void EnglishGreeting(string name) &#123; Console.WriteLine(&quot;Morning, &quot; + name);&#125; 暂且不管这两个方法有没有什么实际意义。GreetPeople用于向某人问好，当我们传递代表某人姓名的name参数，比如说“Jimmy”，进去的时候，在这个方法中，将调用EnglishGreeting方法，再次传递name参数，EnglishGreeting则用于向屏幕输出 “Morning, Jimmy”。 现在假设这个程序需要进行全球化，哎呀，不好了，我是中国人，我不明白“Morning”是什么意思，怎么办呢？好吧，我们再加个中文版的问候方法： 123public void ChineseGreeting(string name)&#123; Console.WriteLine(&quot;早上好, &quot; + name);&#125; 这时候，GreetPeople也需要改一改了，不然如何判断到底用哪个版本的Greeting问候方法合适呢？在进行这个之前，我们最好再定义一个枚举作为判断的依据： 1234567891011121314public enum Language&#123; English, Chinese&#125;public void GreetPeople(string name, Language lang)&#123; //做某些额外的事情，比如初始化之类，此处略 swith(lang)&#123; case Language.English: EnglishGreeting(name); break; case Language.Chinese: ChineseGreeting(name); break; &#125;&#125; OK，尽管这样解决了问题，但我不说大家也很容易想到，这个解决方案的可扩展性很差，如果日后我们需要再添加韩文版、日文版，就不得不反复修改枚举和GreetPeople()方法，以适应新的需求。 在考虑新的解决方案之前，我们先看看 GreetPeople的方法签名： 1public void GreetPeople(string name, Language lang) 我们仅看 string name，在这里，string 是参数类型，name 是参数变量，当我们赋给name字符串“jimmy”时，它就代表“jimmy”这个值；当我们赋给它“张子阳”时，它又代表着“张子阳”这个值。然后，我们可以在方法体内对这个name进行其他操作。哎，这简直是废话么，刚学程序就知道了。 如果你再仔细想想，假如GreetPeople()方法可以接受一个参数变量，这个变量可以代表另一个方法，当我们给这个变量赋值 EnglishGreeting的时候，它代表着 EnglsihGreeting() 这个方法；当我们给它赋值ChineseGreeting 的时候，它又代表着 ChineseGreeting()方法。我们将这个参数变量命名为 MakeGreeting，那么不是可以如同给name赋值时一样，在调用 GreetPeople()方法的时候，给这个MakeGreeting 参数也赋上值么(ChineseGreeting或者EnglsihGreeting等)？然后，我们在方法体内，也可以像使用别的参数一样使用MakeGreeting。但是，由于MakeGreeting代表着一个方法，它的使用方式应该和它被赋的方法(比如ChineseGreeting)是一样的，比如： MakeGreeting(name); 好了，有了思路了，我们现在就来改改GreetPeople()方法，那么它应该是这个样子了： 123public void GreetPeople(string name, *** MakeGreeting)&#123; MakeGreeting(name);&#125; 注意到 *** ，这个位置通常放置的应该是参数的类型，但到目前为止，我们仅仅是想到应该有个可以代表方法的参数，并按这个思路去改写GreetPeople方法，现在就出现了一个大问题：***这个代表着方法的MakeGreeting参数应该是什么类型的？ NOTE：这里已不再需要枚举了，因为在给MakeGreeting赋值的时候动态地决定使用哪个方法，是ChineseGreeting还是 EnglishGreeting，而在这个两个方法内部，已经对使用“morning”还是“早上好”作了区分。 聪明的你应该已经想到了，现在是委托该出场的时候了，但讲述委托之前，我们再看看MakeGreeting参数所能代表的 ChineseGreeting()和EnglishGreeting()方法的签名： 12public void EnglishGreeting(string name)public void ChineseGreeting(string name) 如同name可以接受String类型的“true”和“1”，但不能接受bool类型的true和int类型的1一样。MakeGreeting的 参数类型定义 应该能够确定 MakeGreeting可以代表的方法种类，再进一步讲，就是MakeGreeting可以代表的方法的参数类型和返回类型。 于是，委托出现了：它定义了MakeGreeting参数所能代表的方法的种类，也就是MakeGreeting参数的类型。 NOTE：如果上面这句话比较绕口，我把它翻译成这样：string 定义了name参数所能代表的值的种类，也就是name参数的类型。 本例中委托的定义： 1public delegate void GreetingDelegate(string name); 可以与上面EnglishGreeting()方法的签名对比一下，除了加入了delegate关键字以外，其余的是不是完全一样？ 现在，让我们再次改动GreetPeople()方法，如下所示： 123public void GreetPeople(string name, GreetingDelegate MakeGreeting)&#123; MakeGreeting(name);&#125; 如你所见，委托GreetingDelegate出现的位置与 string相同，string是一个类型，那么GreetingDelegate应该也是一个类型，或者叫类(Class)。但是委托的声明方式和类却完全不同，这是怎么一回事？实际上，委托在编译的时候确实会编译成类。因为Delegate是一个类，所以在任何可以声明类的地方都可以声明委托。更多的内容将在下面讲述，现在，请看看这个范例的完整代码： 123456789101112131415161718192021222324using System;using System.Collections.Generic;using System.Text;namespace Delegate &#123; //定义委托，它定义了可以代表的方法的类型 public delegate void GreetingDelegate(string name); class Program &#123; private static void EnglishGreeting(string name) &#123; Console.WriteLine(&quot;Morning, &quot; + name); &#125; private static void ChineseGreeting(string name) &#123; Console.WriteLine(&quot;早上好, &quot; + name); &#125; //注意此方法，它接受一个GreetingDelegate类型的方法作为参数 private static void GreetPeople(string name, GreetingDelegate MakeGreeting) &#123; MakeGreeting(name); &#125; static void Main(string[] args) &#123; GreetPeople(&quot;Jimmy Zhang&quot;, EnglishGreeting); GreetPeople(&quot;张子阳&quot;, ChineseGreeting); Console.ReadKey(); &#125; &#125;&#125; 输出如下： 12Morning, Jimmy Zhang早上好, 张子阳 我们现在对委托做一个总结： 委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量使用If-Else(Switch)语句，同时使得程序具有更好的可扩展性。 将方法绑定到委托看到这里，是不是有那么点如梦初醒的感觉？于是，你是不是在想：在上面的例子中，我不一定要直接在GreetPeople()方法中给 name参数赋值，我可以像这样使用变量： 12345678static void Main(string[] args) &#123; string name1, name2; name1 = &quot;Jimmy Zhang&quot;; name2 = &quot;张子阳&quot;; GreetPeople(name1, EnglishGreeting); GreetPeople(name2, ChineseGreeting); Console.ReadKey();&#125; 而既然委托GreetingDelegate 和 类型 string 的地位一样，都是定义了一种参数类型，那么，我是不是也可以这么使用委托？ 12345678static void Main(string[] args) &#123; GreetingDelegate delegate1, delegate2; delegate1 = EnglishGreeting; delegate2 = ChineseGreeting; GreetPeople(&quot;Jimmy Zhang&quot;, delegate1); GreetPeople(&quot;张子阳&quot;, delegate2); Console.ReadKey();&#125; 如你所料，这样是没有问题的，程序一如预料的那样输出。这里，我想说的是委托不同于string的一个特性：可以将多个方法赋给同一个委托，或者叫将多个方法绑定到同一个委托，当调用这个委托的时候，将依次调用其所绑定的方法。在这个例子中，语法如下： 12345678static void Main(string[] args) &#123; GreetingDelegate delegate1; delegate1 = EnglishGreeting; // 先给委托类型的变量赋值 delegate1 += ChineseGreeting; // 给此委托变量再绑定一个方法 // 将先后调用 EnglishGreeting 与 ChineseGreeting 方法 GreetPeople(&quot;Jimmy Zhang&quot;, delegate1); Console.ReadKey();&#125; 输出为： 12Morning, Jimmy Zhang早上好, Jimmy Zhang 实际上，我们可以也可以绕过GreetPeople方法，通过委托来直接调用EnglishGreeting和ChineseGreeting： 12345678static void Main(string[] args) &#123; GreetingDelegate delegate1; delegate1 = EnglishGreeting; // 先给委托类型的变量赋值 delegate1 += ChineseGreeting; // 给此委托变量再绑定一个方法 // 将先后调用 EnglishGreeting 与 ChineseGreeting 方法 delegate1 (&quot;Jimmy Zhang&quot;); Console.ReadKey();&#125; NOTE：这在本例中是没有问题的，但回头看下上面GreetPeople()的定义，在它之中可以做一些对于EnglshihGreeting和ChineseGreeting来说都需要进行的工作，为了简便我做了省略。 注意这里，第一次用的“=”，是赋值的语法；第二次，用的是“+=”，是绑定的语法。如果第一次就使用“+=”，将出现“使用了未赋值的局部变量”的编译错误。 我们也可以使用下面的代码来这样简化这一过程： 12GreetingDelegate delegate1 = new GreetingDelegate(EnglishGreeting);delegate1 += ChineseGreeting; // 给此委托变量再绑定一个方法 看到这里，应该注意到，这段代码第一条语句与实例化一个类是何其的相似，你不禁想到：上面第一次绑定委托时不可以使用“+=”的编译错误，或许可以用这样的方法来避免： 123GreetingDelegate delegate1 = new GreetingDelegate();delegate1 += EnglishGreeting; // 这次用的是 “+=”，绑定语法。delegate1 += ChineseGreeting; // 给此委托变量再绑定一个方法 但实际上，这样会出现编译错误： “GreetingDelegate”方法没有采用“0”个参数的重载。尽管这样的结果让我们觉得有点沮丧，但是编译的提示：“没有0个参数的重载”再次让我们联想到了类的构造函数。我知道你一定按捺不住想探个究竟，但再此之前，我们需要先把基础知识和应用介绍完。 既然给委托可以绑定一个方法，那么也应该有办法取消对方法的绑定，很容易想到，这个语法是“-=”： 1234567891011static void Main(string[] args) &#123; GreetingDelegate delegate1 = new GreetingDelegate(EnglishGreeting); delegate1 += ChineseGreeting; // 给此委托变量再绑定一个方法 // 将先后调用 EnglishGreeting 与 ChineseGreeting 方法 GreetPeople(&quot;Jimmy Zhang&quot;, delegate1); Console.WriteLine(); delegate1 -= EnglishGreeting; //取消对EnglishGreeting方法的绑定 // 将仅调用 ChineseGreeting GreetPeople(&quot;张子阳&quot;, delegate1); Console.ReadKey();&#125; 输出为： 123Morning, Jimmy Zhang早上好, Jimmy Zhang早上好, 张子阳 让我们再次对委托作个总结： 使用委托可以将多个方法绑定到同一个委托变量，当调用此变量时(这里用“调用”这个词，是因为此变量代表一个方法)，可以依次调用所有绑定的方法。 事件的由来我们继续思考上面的程序：上面的三个方法都定义在Programe类中，这样做是为了理解的方便，实际应用中，通常都是 GreetPeople 在一个类中，ChineseGreeting和 EnglishGreeting 在另外的类中。现在你已经对委托有了初步了解，是时候对上面的例子做个改进了。假设我们将GreetingPeople()放在一个叫GreetingManager的类中，那么新程序应该是这个样子的： 123456789101112131415161718192021namespace Delegate &#123; //定义委托，它定义了可以代表的方法的类型 public delegate void GreetingDelegate(string name); //新建的GreetingManager类 public class GreetingManager&#123; public void GreetPeople(string name, GreetingDelegate MakeGreeting) &#123; MakeGreeting(name); &#125; &#125; class Program &#123; private static void EnglishGreeting(string name) &#123; Console.WriteLine(&quot;Morning, &quot; + name); &#125; private static void ChineseGreeting(string name) &#123; Console.WriteLine(&quot;早上好, &quot; + name); &#125; static void Main(string[] args) &#123; // ... ... &#125; &#125;&#125; 这个时候，如果要实现前面演示的输出效果，Main方法我想应该是这样的： 12345static void Main(string[] args) &#123; GreetingManager gm = new GreetingManager(); gm.GreetPeople(&quot;Jimmy Zhang&quot;, EnglishGreeting); gm.GreetPeople(&quot;张子阳&quot;, ChineseGreeting);&#125; 我们运行这段代码，嗯，没有任何问题。程序一如预料地那样输出了： 12Morning, Jimmy Zhang早上好, 张子阳 现在，假设我们需要使用上一节学到的知识，将多个方法绑定到同一个委托变量，该如何做呢？让我们再次改写代码： 1234567static void Main(string[] args) &#123; GreetingManager gm = new GreetingManager(); GreetingDelegate delegate1; delegate1 = EnglishGreeting; delegate1 += ChineseGreeting; gm.GreetPeople(&quot;Jimmy Zhang&quot;, delegate1);&#125; 输出： 12Morning, Jimmy Zhang早上好, Jimmy Zhang 到了这里，我们不禁想到：面向对象设计，讲究的是对象的封装，既然可以声明委托类型的变量(在上例中是delegate1)，我们何不将这个变量封装到 GreetManager类中？在这个类的客户端中使用不是更方便么？于是，我们改写GreetManager类，像这样： 1234567public class GreetingManager&#123; //在GreetingManager类的内部声明delegate1变量 public GreetingDelegate delegate1; public void GreetPeople(string name, GreetingDelegate MakeGreeting) &#123; MakeGreeting(name); &#125;&#125; 现在，我们可以这样使用这个委托变量： 123456static void Main(string[] args) &#123; GreetingManager gm = new GreetingManager(); gm.delegate1 = EnglishGreeting; gm.delegate1 += ChineseGreeting; gm.GreetPeople(&quot;Jimmy Zhang&quot;, gm.delegate1);&#125; 输出为： 12Morning, Jimmy Zhang早上好, Jimmy Zhang 尽管这样做没有任何问题，但我们发现这条语句很奇怪。在调用gm.GreetPeople方法的时候，再次传递了gm的delegate1字段： gm.GreetPeople(&quot;Jimmy Zhang&quot;, gm.delegate1); 既然如此，我们何不修改 GreetingManager 类成这样： 123456789public class GreetingManager&#123; //在GreetingManager类的内部声明delegate1变量 public GreetingDelegate delegate1; public void GreetPeople(string name) &#123; if(delegate1!=null)&#123; //如果有方法注册委托变量 delegate1(name); //通过委托调用方法 &#125; &#125;&#125; 在客户端，调用看上去更简洁一些： 123456static void Main(string[] args) &#123; GreetingManager gm = new GreetingManager(); gm.delegate1 = EnglishGreeting; gm.delegate1 += ChineseGreeting; gm.GreetPeople(&quot;Jimmy Zhang&quot;); //注意，这次不需要再传递 delegate1变量&#125; 输出为： 12Morning, Jimmy Zhang早上好, Jimmy Zhang 尽管这样达到了我们要的效果，但是还是存在着问题： 在这里，delegate1和我们平时用的string类型的变量没有什么分别，而我们知道，并不是所有的字段都应该声明成public，合适的做法是应该public的时候public，应该private的时候private。 我们先看看如果把 delegate1 声明为 private会怎样？结果就是：这简直就是在搞笑。因为声明委托的目的就是为了把它暴露在类的客户端进行方法的注册，你把它声明为private了，客户端对它根本就不可见，那它还有什么用？ 再看看把delegate1 声明为 public 会怎样？结果就是：在客户端可以对它进行随意的赋值等操作，严重破坏对象的封装性。 最后，第一个方法注册用“=”，是赋值语法，因为要进行实例化，第二个方法注册则用的是“+=”。但是，不管是赋值还是注册，都是将方法绑定到委托上，除了调用时先后顺序不同，再没有任何的分别，这样不是让人觉得很别扭么？ 现在我们想想，如果delegate1不是一个委托类型，而是一个string类型，你会怎么做？答案是使用属性对字段进行封装。 于是，Event出场了，它封装了委托类型的变量，使得：在类的内部，不管你声明它是public还是protected，它总是private的。在类的外部，注册“+=”和注销“-=”的访问限定符与你在声明事件时使用的访问符相同。 我们改写GreetingManager类，它变成了这个样子： 1234567public class GreetingManager&#123; //这一次我们在这里声明一个事件 public event GreetingDelegate MakeGreet; public void GreetPeople(string name) &#123; MakeGreet(name); &#125;&#125; 很容易注意到：MakeGreet 事件的声明与之前委托变量delegate1的声明唯一的区别是多了一个event关键字。看到这里，在结合上面的讲解，你应该明白到：事件其实没什么不好理解的，声明一个事件不过类似于声明一个进行了封装的委托类型的变量而已。 为了证明上面的推论，如果我们像下面这样改写Main方法： 123456static void Main(string[] args) &#123; GreetingManager gm = new GreetingManager(); gm.MakeGreet = EnglishGreeting; // 编译错误1 gm.MakeGreet += ChineseGreeting; gm.GreetPeople(&quot;Jimmy Zhang&quot;);&#125; 会得到编译错误：事件“Delegate.GreetingManager.MakeGreet”只能出现在 += 或 -= 的左边(从类型“Delegate.GreetingManager”中使用时除外)。 事件和委托的编译代码这时候，我们注释掉编译错误的行，然后重新进行编译，再借助Reflactor来对 event的声明语句做一探究，看看为什么会发生这样的错误： public event GreetingDelegate MakeGreet; 可以看到，实际上尽管我们在GreetingManager里将 MakeGreet 声明为public，但是，实际上MakeGreet会被编译成 私有字段，难怪会发生上面的编译错误了，因为它根本就不允许在GreetingManager类的外面以赋值的方式访问，从而验证了我们上面所做的推论。 我们再进一步看下MakeGreet所产生的代码： 123456789private GreetingDelegate MakeGreet; //对事件的声明 实际是 声明一个私有的委托变量[MethodImpl(MethodImplOptions.Synchronized)]public void add_MakeGreet(GreetingDelegate value)&#123; this.MakeGreet = (GreetingDelegate) Delegate.Combine(this.MakeGreet, value);&#125;[MethodImpl(MethodImplOptions.Synchronized)]public void remove_MakeGreet(GreetingDelegate value)&#123; this.MakeGreet = (GreetingDelegate) Delegate.Remove(this.MakeGreet, value);&#125; 现在已经很明确了：MakeGreet事件确实是一个GreetingDelegate类型的委托，只不过不管是不是声明为public，它总是被声明为private。另外，它还有两个方法，分别是add_MakeGreet和remove_MakeGreet，这两个方法分别用于注册委托类型的方法和取消注册。实际上也就是： “+= ”对应 add_MakeGreet，“-=”对应remove_MakeGreet。而这两个方法的访问限制取决于声明事件时的访问限制符。 在add_MakeGreet()方法内部，实际上调用了System.Delegate的Combine()静态方法，这个方法用于将当前的变量添加到委托链表中。我们前面提到过两次，说委托实际上是一个类，在我们定义委托的时候： public delegate void GreetingDelegate(string name); 当编译器遇到这段代码的时候，会生成下面这样一个完整的类： 123456public sealed class GreetingDelegate:System.MulticastDelegate&#123; public GreetingDelegate(object @object, IntPtr method); public virtual IAsyncResult BeginInvoke(string name, AsyncCallback callback, object @object); public virtual void EndInvoke(IAsyncResult result); public virtual void Invoke(string name);&#125; 关于这个类的更深入内容，可以参阅《CLR Via C#》等相关书籍，这里就不再讨论了。 委托、事件与Observer设计模式范例说明上面的例子已不足以再进行下面的讲解了，我们来看一个新的范例，因为之前已经介绍了很多的内容，所以本节的进度会稍微快一些： 假设我们有个高档的热水器，我们给它通上电，当水温超过95度的时候： 扬声器会开始发出语音，告诉你水的温度； 液晶屏也会改变水温的显示，来提示水已经快烧开了。 现在我们需要写个程序来模拟这个烧水的过程，我们将定义一个类来代表热水器，我们管它叫：Heater，它有代表水温的字段，叫做temperature；当然，还有必不可少的给水加热方法BoilWater()，一个发出语音警报的方法MakeAlert()，一个显示水温的方法，ShowMsg()。 1234567891011121314151617181920212223242526272829namespace Delegate &#123; class Heater &#123; private int temperature; // 水温 // 烧水 public void BoilWater() &#123; for (int i = 0; i &lt;= 100; i++) &#123; temperature = i; if (temperature &gt; 95) &#123; MakeAlert(temperature); ShowMsg(temperature); &#125; &#125; &#125; // 发出语音警报 private void MakeAlert(int param) &#123; Console.WriteLine(&quot;Alarm：嘀嘀嘀，水已经 &#123;0&#125; 度了：&quot; , param); &#125; // 显示水温 private void ShowMsg(int param) &#123; Console.WriteLine(&quot;Display：水快开了，当前温度：&#123;0&#125;度。&quot; , param); &#125;&#125; class Program &#123; static void Main() &#123; Heater ht = new Heater(); ht.BoilWater(); &#125; &#125;&#125; Observer设计模式简介上面的例子显然能完成我们之前描述的工作，但是却并不够好。现在假设热水器由三部分组成：热水器、警报器、显示器，它们来自于不同厂商并进行了组装。那么，应该是热水器仅仅负责烧水，它不能发出警报也不能显示水温；在水烧开时由警报器发出警报、显示器显示提示和水温。 这时候，上面的例子就应该变成这个样子： 12345678910111213141516171819202122// 热水器public class Heater &#123; private int temperature; // 烧水 private void BoilWater() &#123; for (int i = 0; i &lt;= 100; i++) &#123; temperature = i; &#125; &#125;&#125;// 警报器public class Alarm&#123; private void MakeAlert(int param) &#123; Console.WriteLine(&quot;Alarm：嘀嘀嘀，水已经 &#123;0&#125; 度了：&quot; , param); &#125;&#125;// 显示器public class Display&#123; private void ShowMsg(int param) &#123; Console.WriteLine(&quot;Display：水已烧开，当前温度：&#123;0&#125;度。&quot; , param); &#125;&#125; 这里就出现了一个问题：如何在水烧开的时候通知报警器和显示器？在继续进行之前，我们先了解一下Observer设计模式，Observer设计模式中主要包括如下两类对象： Subject：监视对象，它往往包含着其他对象所感兴趣的内容。在本范例中，热水器就是一个监视对象，它包含的其他对象所感兴趣的内容，就是temprature字段，当这个字段的值快到100时，会不断把数据发给监视它的对象。 Observer：监视者，它监视Subject，当Subject中的某件事发生的时候，会告知Observer，而Observer则会采取相应的行动。在本范例中，Observer有警报器和显示器，它们采取的行动分别是发出警报和显示水温。 在本例中，事情发生的顺序应该是这样的： 警报器和显示器告诉热水器，它对它的温度比较感兴趣(注册)。 热水器知道后保留对警报器和显示器的引用。 热水器进行烧水这一动作，当水温超过95度时，通过对警报器和显示器的引用，自动调用警报器的MakeAlert()方法、显示器的ShowMsg()方法。 类似这样的例子是很多的，GOF对它进行了抽象，称为Observer设计模式：Observer设计模式是为了定义对象间的一种一对多的依赖关系，以便于当一个对象的状态改变时，其他依赖于它的对象会被自动告知并更新。Observer模式是一种松耦合的设计模式。 实现范例的Observer设计模式我们之前已经对委托和事件介绍很多了，现在写代码应该很容易了，现在在这里直接给出代码，并在注释中加以说明。 1234567891011121314151617181920212223242526272829303132333435363738394041424344using System;using System.Collections.Generic;using System.Text;namespace Delegate &#123; // 热水器 public class Heater &#123; private int temperature; public delegate void BoilHandler(int param); //声明委托 public event BoilHandler BoilEvent; //声明事件 // 烧水 public void BoilWater() &#123; for (int i = 0; i &lt;= 100; i++) &#123; temperature = i; if (temperature &gt; 95) &#123; if (BoilEvent != null) &#123; //如果有对象注册 BoilEvent(temperature); //调用所有注册对象的方法 &#125; &#125; &#125; &#125; &#125; // 警报器 public class Alarm &#123; public void MakeAlert(int param) &#123; Console.WriteLine(&quot;Alarm：嘀嘀嘀，水已经 &#123;0&#125; 度了：&quot;, param); &#125; &#125; // 显示器 public class Display &#123; public static void ShowMsg(int param) &#123; //静态方法 Console.WriteLine(&quot;Display：水快烧开了，当前温度：&#123;0&#125;度。&quot;, param); &#125; &#125; class Program &#123; static void Main() &#123; Heater heater = new Heater(); Alarm alarm = new Alarm(); heater.BoilEvent += alarm.MakeAlert; //注册方法 heater.BoilEvent += (new Alarm()).MakeAlert; //给匿名对象注册方法 heater.BoilEvent += Display.ShowMsg; //注册静态方法 heater.BoilWater(); //烧水，会自动调用注册过对象的方法 &#125; &#125;&#125; 输出为： 1234Alarm：嘀嘀嘀，水已经 96 度了：Alarm：嘀嘀嘀，水已经 96 度了：Display：水快烧开了，当前温度：96度。// 省略... .Net Framework中的委托与事件尽管上面的范例很好地完成了我们想要完成的工作，但是我们不仅疑惑：为什么.Net Framework 中的事件模型和上面的不同？为什么有很多的EventArgs参数？ 在回答上面的问题之前，我们先搞懂 .Net Framework的编码规范： 委托类型的名称都应该以EventHandler结束。 委托的原型定义：有一个void返回值，并接受两个输入参数：一个Object 类型，一个 EventArgs类型(或继承自EventArgs)。 事件的命名为 委托去掉 EventHandler之后剩余的部分。 继承自EventArgs的类型应该以EventArgs结尾。 再做一下说明： 委托声明原型中的Object类型的参数代表了Subject，也就是监视对象，在本例中是 Heater(热水器)。回调函数(比如Alarm的MakeAlert)可以通过它访问触发事件的对象(Heater)。 EventArgs 对象包含了Observer所感兴趣的数据，在本例中是temperature。 上面这些其实不仅仅是为了编码规范而已，这样也使得程序有更大的灵活性。比如说，如果我们不光想获得热水器的温度，还想在Observer端(警报器或者显示器)方法中获得它的生产日期、型号、价格，那么委托和方法的声明都会变得很麻烦，而如果我们将热水器的引用传给警报器的方法，就可以在方法中直接访问热水器了。 现在我们改写之前的范例，让它符合 .Net Framework 的规范： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768using System;using System.Collections.Generic;using System.Text;namespace Delegate &#123; // 热水器 public class Heater &#123; private int temperature; public string type = &quot;RealFire 001&quot;; // 添加型号作为演示 public string area = &quot;China Xian&quot;; // 添加产地作为演示 //声明委托 public delegate void BoiledEventHandler(Object sender, BoiledEventArgs e); public event BoiledEventHandler Boiled; //声明事件 // 定义BoiledEventArgs类，传递给Observer所感兴趣的信息 public class BoiledEventArgs : EventArgs &#123; public readonly int temperature; public BoiledEventArgs(int temperature) &#123; this.temperature = temperature; &#125; &#125; // 可以供继承自 Heater 的类重写，以便继承类拒绝其他对象对它的监视 protected virtual void OnBoiled(BoiledEventArgs e) &#123; if (Boiled != null) &#123; // 如果有对象注册 Boiled(this, e); // 调用所有注册对象的方法 &#125; &#125; // 烧水。 public void BoilWater() &#123; for (int i = 0; i &lt;= 100; i++) &#123; temperature = i; if (temperature &gt; 95) &#123; //建立BoiledEventArgs 对象。 BoiledEventArgs e = new BoiledEventArgs(temperature); OnBoiled(e); // 调用 OnBolied方法 &#125; &#125; &#125; &#125; // 警报器 public class Alarm &#123; public void MakeAlert(Object sender, Heater.BoiledEventArgs e) &#123; Heater heater = (Heater)sender; //这里是不是很熟悉呢？ //访问 sender 中的公共字段 Console.WriteLine(&quot;Alarm：&#123;0&#125; - &#123;1&#125;: &quot;, heater.area, heater.type); Console.WriteLine(&quot;Alarm: 嘀嘀嘀，水已经 &#123;0&#125; 度了：&quot;, e.temperature); Console.WriteLine(); &#125; &#125; // 显示器 public class Display &#123; public static void ShowMsg(Object sender, Heater.BoiledEventArgs e) &#123; //静态方法 Heater heater = (Heater)sender; Console.WriteLine(&quot;Display：&#123;0&#125; - &#123;1&#125;: &quot;, heater.area, heater.type); Console.WriteLine(&quot;Display：水快烧开了，当前温度：&#123;0&#125;度。&quot;, e.temperature); Console.WriteLine(); &#125; &#125; class Program &#123; static void Main() &#123; Heater heater = new Heater(); Alarm alarm = new Alarm(); heater.Boiled += alarm.MakeAlert; //注册方法 heater.Boiled += (new Alarm()).MakeAlert; //给匿名对象注册方法 heater.Boiled += new Heater.BoiledEventHandler(alarm.MakeAlert); //也可以这么注册 heater.Boiled += Display.ShowMsg; //注册静态方法 heater.BoilWater(); //烧水，会自动调用注册过对象的方法 &#125; &#125;&#125; 输出为： 123456789Alarm：China Xian - RealFire 001:Alarm: 嘀嘀嘀，水已经 96 度了：Alarm：China Xian - RealFire 001:Alarm: 嘀嘀嘀，水已经 96 度了：Alarm：China Xian - RealFire 001:Alarm: 嘀嘀嘀，水已经 96 度了：Display：China Xian - RealFire 001:Display：水快烧开了，当前温度：96度。// 省略 ... 总结在本文中我首先通过一个GreetingPeople的小程序向大家介绍了委托的概念、委托用来做什么，随后又引出了事件，接着对委托与事件所产生的中间代码做了粗略的讲述。 在第二个稍微复杂点的热水器的范例中，我向大家简要介绍了 Observer设计模式，并通过实现这个范例完成了该模式，随后讲述了.Net Framework中委托、事件的实现方式。 参考文章转载自张子阳 -《.NET之美》]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令行、终端和 Git 的代理设置]]></title>
    <url>%2F2017%2F10%2F31%2FProxy%20setting%20of%20CMD%3ATerminal%2F</url>
    <content type="text"><![CDATA[本文整理了 Windows 命令行 和 Linux 终端以及 Git 中设置代理的命令。以本地 HTTP/HTTPS 代理 127.0.0.1:8118 和 SOCKS5 代理 127.0.0.1:1080 为例。 Windows 命令行代理设置HTTP 代理设置： 12set http_proxy=http://127.0.0.1:8118set https_proxy=http://127.0.0.1:8118 SOCKS5 代理设置： 12set http_proxy=socks5://127.0.0.1:1080set https_proxy=socks5://127.0.0.1:1080 可以通过 echo %http_proxy% 命令查看是否设置成功。 取消代理设置： 12set http_proxy=set https_proxy= Linux 终端代理设置临时代理设置Linux 终端设置 HTTP 代理（只对当前终端有效）： 12$ export http_proxy=http://127.0.0.1:8118$ export https_proxy=http://127.0.0.1:8118 Linux 中设置 SOCKS5 代理（只对当前终端有效）： 12$ export http_proxy=socks5://127.0.0.1:1080$ export https_proxy=socks5://127.0.0.1:1080 设置终端中的 wget、curl 等都走 SOCKS5 代理（只对当前终端有效）： 1$ export ALL_PROXY=socks5://127.0.0.1:1080 Linux 终端中取消代理设置： 123$ unset http_proxy$ unset https_proxy$ unset ALL_RPOXY 永久代理设置将代理命令写入配置文件 ~/.profile 或 ~/.bashrc 或 ~/.zshrc 中： 123# HTTP 代理设置export http_proxy=http://127.0.0.1:8118export https_proxy=http://127.0.0.1:8118 或 123# SOCKS5 代理设置export http_proxy=socks5://127.0.0.1:1080export https_proxy=socks5://127.0.0.1:1080 或 12# 强制终端中的 wget、curl 等都走 SOCKS5 代理export ALL_PROXY=socks5://127.0.0.1:1080 或简化操作 1alias pc="export ALL_PROXY=socks5://127.0.0.1:1080; echo 'Proxy on';" Git 设置代理代理格式 [protocol://][user[:password]@]proxyhost[:port]参考 https://git-scm.com/docs/git-config 设置 HTTP 代理： 12git config --global http.proxy http://127.0.0.1:8118git config --global https.proxy http://127.0.0.1:8118 设置 SOCKS5 代理： 12git config --global http.proxy socks5://127.0.0.1:1080git config --global https.proxy socks5://127.0.0.1:1080 Git 取消代理设置： 12git config --global --unset http.proxygit config --global --unset https.proxy]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初步了解 Swift 中的可选类型和方法函数]]></title>
    <url>%2F2017%2F10%2F25%2FOptional%20types%20and%20method%20functions%20in%20Swift%2F</url>
    <content type="text"><![CDATA[可选类型和解包Swift中，在数组的方括号内必须写上类型，或者在Array后面的尖括号&lt;&gt;内写上类型。 对于字典而言，你一共需要提供两个类型，一个用于键，而另一个用于值。 Swift要求所有的变量和常量都必须有值。你可以在声明它们的时候给它们指定一个值，也可以通过init方法给它们分配值。 有时，你需要一个变量可以没有值，这种情况，你需要将变量声明为可选型： 1var checklistToEdit: Checklist? 可是你不能直接使用这种类型的变量，你必须在使用它们之前，侦测一下其中是否有值，这个行为就叫做可选型解包： 12345if let checklist = checklistToEdit &#123; // “checklist” now contains the real object&#125; else &#123; // the optional was nil&#125; 下面例子中的变量age就是一个可选型，因为没有任何保证说字典中存在一个名为”Jony Ive”的键，所以age的类型是Int?，而不是Int： 123if let age = dict["Jony Ive"] &#123;// 使用age变量&#125; 如果你100%的确定字典中存在一个叫做”Jony Ive”的键的话，那么你就可以对age变量进行强制解包： 1var age = dict["Jony Ive"]! 你使用感叹号!来通知Swift，“这个可选型不会为nil，我用我的名誉打赌！”，当然，如果你错了的话，这个变量的值为nil，那么app就会挂掉，你也就名誉扫地了，所以你在使用强制解包的时候一定要小心。 另一种稍微安全点的强制解包方式叫做可选型链接。例如，下面的语句会在navigationController为nil时把app挂掉。 1navigationController!.delegate = self 但是像这样做则不会把app挂掉： 1navigationController?.delegate = self 位于问号后面的任何东西，都会在navigationController为nil时把它忽视掉。这个使用问号强制解包的语句等价于下面的语句： 123if navigationController != nil &#123; navigationController!.delegate = self&#125; 在声明可选型的时候，也可以用感叹号来代替问号，这样就是一个隐式解包可选型了： 1var dataModel: DataModel! 这样的变量会带来潜在的危险，因为你可以如同使用常规变量那样直接使用它，并不需要先解包。一旦如果它的值为空，那么app就挂了。而当使用的常规变量为空时，编译器则会提示你该怎么做。 可选型平时被包裹起来，以避免app崩溃，但是使用了感叹号以后，就解除了可选型的安全级别。 然而，有时使用隐式解包可选型比使用可选型要方便一些。当你无法给一个变量初始值，也无法用init方法对其初始化的时候，你就会需要到这种隐式解包可选型。 如果你给了一个变量一个值后，就不应该再使它为nil，如果一个变量可以从有值变为nil，那么你最好还是使用用问号声明的可选型。 方法与函数（Methods and functions）有这样的一种对象，它是所有app的基础组成部分，同时具有数据和功能。实例变量及常量提供数据，方法提供功能。 方法的返回值当你调用一个方法，app就会跳转到方法中，逐条的执行其中的语句，当方法中最后一条语句被执行完毕后，app就会会到之前离开的地方： 12345678let result = performUselessCalculation(314)print(result)...func performUselessCalculation(_ a: Int) -&gt; Int &#123; var b = Int(arc4random_uniform(100)) var c = a / 2 return (a + b) * c&#125; 方法经常会返回一个值给调用者，比如一个计算结果或者从一个集合中找到的一个对象。返回值的类型会写在-&gt;符号的后面。在上面的例子中，返回值的类型是Int。如果不存在-&gt;这个符号，那么就是说这个方法不返回任何值。 方法的调用方法就是属于某一特定对象的函数，Swift中也存在独立的函数，比如print()或者arc4random_uniform()。 函数和方法的工作原理一样，一个可重复使用的功能块，但是函数不属于任何对象。像这种函数也被称为自由函数或者全局函数。 下面是一些关于方法的例子： 123456789101112131415161718192021222324// 这个方法没有返回值及参数的方法override func viewDidLoad()// 这个方法有一个slider参数，但是一样没有返回值// 关键字@IBAction意味着这个方法可以被连接到界面建造器的控件上@IBAction func sliderMoved(_ slider: UISlider)// 这个方法没有参数，但是有一个Int型的返回值func countUncheckedItems() -&gt; Int// 这个方法有两个参数，cell和item，但是没有返回值// 注意一下，第一个参数有一个外部名称for，而第二个参数有一个外部名称withfunc configureCheckmarkFor(for cell: UITableViewCell, with item: ChecklistItem)// 这个方法有两个参数, tableView和section. 并且有一个Int型的返回值。// 第一个参数前的下划线代表这个参数没有外部名称。override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int// 这个方法有两个参数, tableView和indexPath.// 问号代表它返回一个为可选型的IndexPath对象。override func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -&gt; IndexPath? 在一个对象上调用一个方法，语法是object.method(parameters)。例如： 1234// Calling a method on the lists object:lists.append(checklist)// Calling a method with more than one parameter:tableView.insertRows(at: indexPaths, with: .fade) 你可以把调用方法想象为从一个对象向另一个对象传递消息：“嗨 lists，我从checklist对象中向你发送了append的消息。” 你调用消息所属的对象被称为消息的接收者。 从同一个对象中调用方法非常常见，下面的例子中，loadChecklists()调用了sortChecklists()。它们都是DataModel对象中的成员： 123456789class DataModel &#123; func loadChecklists() &#123; ... sortChecklists() &#125; func sortChecklists() &#123; ... &#125;&#125; 有时你会写为下面这个样子： 1234func loadChecklists() &#123; ... self.sortChecklists()&#125; 关键字self清晰的表明了DataModel对象自己是这个消息的接受者。 ⚠️：在我们的课程中，调用方法的时候，我省略了self关键字，因为并不是必须要这样做。Object-C开发者会非常乐意在每个地方都写上self，所以你也许会见到它在Swift中也被大量使用。到底写与不写，这是程序员间可以引发战争的一个话题，但是无论如何，app并不是太关心这点。 在一个方法的内部，你也可以使用self关键字来引用这个对象自己： 123@IBAction func cancel() &#123; delegate?.itemDetailViewControllerDidCancel(self)&#125; 这里cancel()方法将对象自身的引用发送给delegate，所以delegate知道谁发送了这个itemDetailViewControllerDidCancel()消息。 同时注意一下这里的可选型链接。这个delegate属性是个可选型，所以它可以为nil。在调用方法前使用一个问号来确保delegate为nil时，app不会挂掉。 方法的参数方法经常会具有一个或多个参数，所以你可以让它们接收不同数据源上的数据。一个被限定了数据源的方法，就不会非常有价值。例如下面的sumValuesFormArray()方法，它没有参数： 12345678910class MyObject &#123; var numbers = [Int]() func sunValuesFromArray() -&gt; Int &#123; var total = 0 for number in numbers &#123; total += number &#125; return total &#125;&#125; 这里，numbers是一个实例变量。方法sumValuesFromArray()被这个实例变量绑定死了，如果这个变量不存在，那么这个方法就没用了。 假设你在这个app中添加了第二数组，也想要应用上面的计算，方法之一是把这个方法复制一遍，重新命名为一个新的方法来处理这个新的数组。这样做确实可行，但是者看起来不那么聪明。 另一个好一点的选择是，给这个方法一个参数，使得你可以传送任何你想要计算的数组，这样，这个方法就从实例变量中解放出来了： 1234567func sumValues(from array: [Int]) -&gt; Int &#123; var total = 0 for number in array &#123; total += number &#125; return total&#125; 现在你可以用任何整数型的数组作为它的参数了。 这并不是说方法不应该使用实例变量，只是说你想要一个方法的应用更加广泛，那么给它一个参数是个很好的选择。 方法的参数经常会有两个名字，一个外部名称，一个内部名称，例如： 123func downloadImage(for searchResult: SearchResult,withTimeout timeout: TimeInterval,andPlaceOn button: UIButton) &#123; ...&#125; 这个方法有三个参数：searchResult，timeout和button。这些是内部名称，你在方法的内部用这些名称来调用参数。 方法的外部名称是方法名称的一部分。所以这个方法的全名是downloadImage(for,withTimeout,andPlaceOn)，Swift中的方法名称经常会特别的长。 调用这个方法的时候，你需要使用外部名称： 1downloadImage(for:result,withTimeout:10,andPlaceButton) 有时，你会看到一个方法它的第一个参数没有外部名称，取而代之的是一个下划线： 1override func tableView(_ tableView: UITableView,numberOfRowsInSection section: Int)-&gt; Int 这种情况经常出现在委托方法中，它是Object-C的遗留物，第一个参数的内部和外部名称都会被包含在方法名称中，比如在Object-C中downloadImage()方法的全名会是downloadImageForSearchResult。像这样的命名方式，以后会非常少见。 如果是在Object-C中，这个方法的名称会是tableViewTableVIew，非常古怪是吧，而Swift中，以下划线代替外部名称时，方法名称中就可以省略这个参数的外部名称，在Swift中，这个方法的全名是tableView(numberOfRowsInSection)。这样是不是容易明白多了？Swift在对方法命名时更加灵活，但它还是会保留一些旧的惯例。 循环和判断在一个方法的内部，你可以做以下事情： 创建局部变量或者常量 进行基本的数学运算，比如加减乘除 将一个新的值放入变量（局部变量或实例变量） 调用其他方法 使用if或者switch作出判断 用for或者while进行循环处理 返回一个值给调用者 让我们来看看if和for语句的更多细节。 判断if语句if语句的基本结构是这个样子的： 1234567if count == 0 &#123; text = "No Items"&#125; else if count == 1 &#123; text = "1 Item"&#125; else &#123; text = "\(count) Items"&#125; if后面的表达式称之为条件。如果条件为真，那么if后面花括号内的语句会被执行。如果没有一个条件为真，那么最后一个else后面的花括号内的语句会被执行。 通过使用比较运算符来对两个值进行比较： == 等于 != 不等于 &lt; 小于 &lt;= 小于等于 &gt; 大于 &gt;= 大于等于 使用等于操作时，被比较的两个对象仅在相等时返回true，比如： 123let a = "Hello,world"let b = "Hello," + "world"print(a == b) //打印结果为true 这个和Object-C有所不同，在Object-C中，必须两个对象是内存中的同一个实例，才会返回为true。而Swift中的==操作，仅仅是比较对象的值，而不管它在内存中是不是同一个对象，如果在Swift中像做这个操作的话，需要使用运算符 ===，三个等号。 你还可以使用逻辑操作符来连接两个表达式： &amp;&amp; 与操作，a &amp;&amp; b必须在a和b都为true时才返回true || 或操作符，a || b当a，b其中之一为true时，返回`true`` `！ 逻辑非操作符，它的作用是将原本的true转为false，原本的false转为true。 不要和可选型弄混了，逻辑非操作符出现在对象的前面，而可选型的感叹号出现在对象的后面 可以使用括号()来对表达式分组： 123if ((this &amp;&amp; that) || (such &amp;&amp; so)) &amp;&amp; !other &#123;...&#125; 它读作： 123if ((this and that) or (such and so)) and not other &#123;...&#125; 为了看起来更加清晰一些，我们写的有层次一点： 1234567if ( (this and that) or (such and so))and (not other) switch语句当然，你弄的越复杂，越难记清楚自己在做什么！ Swift中还有一种非常强大的结构，可以用来做出判断，那就是switch语句： 123456789switch condition &#123; case value1: //语句 case value2: //语句 case value3: //语句 default: //语句 它的效果和多个if else的效果是一致的，上面的代码等同于： 123456789if condition == value1 &#123; //语句&#125; else if condition == value2 &#123; //语句&#125; else if condition == value3 &#123; //语句&#125; else &#123; //语句&#125; 相较之下，switch在这种情况中更加便利，而且意思清晰。而且Swift版的switch比Object-C版的更加强大。例如，你可以使用区间范围： 123456789switch difference &#123; case 0: title = "Perfect!" case 1..&lt;5: title = "You almost had it!" case 5..&lt;10: title = "Pretty good!" default: title = "Not even close..." 这里的..&lt;是半开区间操作符。它可以创建两个值之间的区间，其中的值都是不重复的，半开区间1..&lt;5等价于闭区间1...4。 有时你会看到下面这个样子的代码： 1234567891011121314func someMethod() &#123; if condition1 &#123; if condition2 &#123; if condition3 &#123; //语句 &#125; else &#123; //语句 &#125; &#125; else &#123; //语句 &#125; else &#123; //语句 &#125;&#125; 这种代码非常难读，我喜欢将它们重构为下面这个样子： 123456789101112131415func someMethod() &#123; if !condition1 &#123; //语句&#125; if !condition2 &#123; //语句&#125; if !condition3 &#123; //语句&#125; //语句&#125; 这两段代码的作用其实是一样的，但是后一种更加容易理解。（注意一下，第二种写法中使用了！逻辑非来转换了表达式的意思） Swift中有一种特殊的语句，guard来帮助你处理这种复杂的情况，用guard重写一下上面的方法就是： 123456789101112func someMethod() &#123; guard condition1 else &#123; //语句 return &#125; guard condition21 else &#123; //语句 return &#125;... 你要自己尝试这些方法，比较看看哪种可读性最好，哪种看起来最好，这样慢慢的你就会很有经验了。 循环for循环 你之前已经见识过了，如何用for in来历遍一个数组： 12345for item in items &#123; if !item.checked &#123; count += 1 &#125;&#125; 也可以写作： 123for item in items where !item.checked &#123; count += 1&#125; for in中的语句会对每个items数组中的对象执行一遍。 注意一下，变量item的仅在for语句中有效，你不能在外面引用它，它的生命期比局部变量还要短。 有些语言，也包括Swift 2，中的for语句是这个样子的： 123for var i = 0; i &lt; 5; ++i &#123; print(i)&#125; 当你运行这个代码，会得到如下结果： 1234501234 然而，在Swift 3种，这种for循环已经被抛弃了，取而代之的是，你可以直接使用区间范围，就像下面这样： 123for i in 0 ... 4 &#123; print(i)&#125; 顺便说一下，也可写作： 123for i in stride(from: 0,to: 5,by: 1) &#123; print(i)&#125; stride函数创建了一个专门的对象来代表从1到5，每次增加1。如果你只想要偶数，你可以把by参数改为2。如果你给by参数一个负数的话，那么stride就可以实现倒着数的功能。 while语句 for语句并不是唯一的执行循环的语句，另一个非常强大的循环结构就是while语句： 123while something is true &#123; //语句&#125; while语句会一直保持循环，知道条件为false为止。还可以使用下面这种形式： 123repeat &#123; //语句&#125; while something is true 在这种情况中，条件是在语句执行后才判断的，所以括号内的语句至少也会被执行一次。 你可以使用while语句重写一下循环Checklists中的对象： 123456789var count = 0var i = 0while i &lt; items.count &#123; let item = items[i] if !item.checked &#123; count += 1 &#125; i += 1&#125; 这些循环结构的作用大致相同，只是看起来有些不一样。每一种都可以使你重复执行一段语句，直到条件不符合为止。 然而，使用while会比for in要看起来复杂一些，所以大多数时候，我们都会使用for in。 使用for in、while、repeat并没有什么不同，只是可读性上有所区别。 ⚠️：上面例子中的item.count和count是两种不同的东西，只是名字一样。item.count中的count是数组items中的属性用于返回数组中元素的个数；后面的一个count是一个局部变量，用于对没有激活对勾符号的item对象计数。 就你可以在方法中使用return退出方法一样，你可以使用break来提前退出循环： 1234567var found = falsefor item in array &#123; if item == searchText &#123; found = true break &#125;&#125; 这个例子中，for语句在数组中循环，直到找到第一个与searchText的值相当的值后，将found设置为true，然后退出循环，不再查看数组中剩下的对象。因为你已经找到了你想要的东西，所以没有必要把整个数组都循环完毕。 还存在一个contiue语句，和break的作用正好相反。它的作用是立即跳到下一个迭代中，当你使用contiue时，你的意思就是“目前这个item已经结束了，我们去看看下一个吧！” 其他语句在函数编程中，循环经常会被map，filter或者reduce替代。它们是一些操作集合的函数，对集合中每一个元素执行一段代码，并且返回一个新的集合作为结果。 例如，在数组上使用filter，会保留符合某些条件的元素。比如要得到未激活对勾符号的ChecklistItem对象，你可以这样写： 1var uncheckedItems = items.filter &#123; item in !item.checked&#125; 这样写比循环看起来要简单多了。函数编程是一个非常大的话题，所以在这里我们不会展开太多。 对象（Objects）将功能和数据结合在一起的可重用单元，都是对象。 数据是由对象中的实例变量和实例常量组成。我们经常以对象的属性形式引用它们。功能由对象的方法提供。 在你的Swift程序中，你使用过已存在的对象，比如String，Array，Date，UITableView，以及你自己创建的对象。 定义一个新的对象，你需要一个新的Swift文件，比如MyObject.swift，并且包含一个类（class）。比如： 12345678910111213class MyObject &#123; var text: String var count = 0 let maximum = 100 init() &#123; text = "Hello World" &#125; func doSomething() &#123; //语句 &#125;&#125; 在class的花括号内，你添加了属性（实例变量和实例常量）和方法。 属性有两种类型： 存储属性，它们通常是实例变量和实例常量。 计算属性，不存储东西，而是执行某些逻辑 下面是一个关于计算属性的例子： 12345678var indexOfSelectedChecklist: Int &#123; get &#123; return UserDefaults.standard().integerForKey("ChecklistIndex") &#125; set &#123; UserDefaults.standard().set(newValue,forKey: "ChecklistIndex") &#125;&#125; indexOfSelectedChecklist属性并不存储一个值，取而代之的是，每次有人使用这个属性时，它执行get或者set内的代码。另一个选择是，分别写一个setIndexOfSelectedChecklist()和getIndexOfSelectedChecklist()方法，但是这样读起来不是很好。 关键字@IBOutlet的意思是，这个属性可以被界面建造器中的用户接口元素引用，比如label和button。这种属性通常都被声明为weak和可选型。类似的，@IBAction关键字被用于和用户交互时被触发的方法。 这里有三种类型的方法： 实例方法 类方法 init方法 你已经知道了方法就是属于某一个对象的函数。调用这种类型的方法你首先需要一个这个对象的实例： 12let myInstance = MyObject() //创建一个对象的实例myInstance.doSomething() //调用方法 你也可以创建一个类方法，这样就可以在没有实例的情况下使用这个方法。事实上，类方法经常被当作“工厂”方法使用，用来创建新的实例： 12345678910class MyObject &#123;... class fun makeObject(text: String)-&gt; MyObject &#123; let m = MyObject() m.text = text return m &#125;&#125;let MyInstance = MyObject.makeObject(text: "Hello world") init方法，或者叫做初始化设置，在创建一个新的对象实例的过程中被使用。你也可以使用init方法来取代上面的那个工厂方法： 123456class MyObject &#123;... init(text: String) &#123; self.text = text &#125;&#125; init方法的主要目的是将对象中的实例变量填满。任何没有值的实例变量和实例常量都必须在init方法中被给予一个值。 Swift不允许变量或者常量没有值（可选型例外），并且init方法是你给变量或者常量赋值的最后一次机会。 对象可以拥有一个以上的init方法；具体使用哪一个要依据具体情况而定。 例如，一个UITableViewController，从故事模版中自动被读取时，使用init?(coder)初始化，手动从nib文件中读取时，使用init(nibName,bundle)初始化，或者没有从故事模版和nib文件中构造时，使用init(style)初始化。有时你会用到这个，而有时你会用到那个。 当对象不再被使用时，你可以提供一个deinit方法。在对象被破坏掉前调用它。 顺便说一下，class并不是Swift中唯一定义对象的方法。还存在其他类型的对象，比如structs和enums。 协议（Protocols）一个协议就是一组方法名称的列表： 1234protocol MyProtocol &#123; func someMethod(value: Int) func anotherMethod()-&gt; String&#125; 协议就类似于工作列表。它列出了你的公司中每个具体职位的工作。 但是列表自己本身并不工作，它仅仅是打印出来给大家看的东西。所以你需要雇佣具体的员工来完成列表上的工作。而这些员工，就是具体的对象。 对象需要被指明自己需要遵守的协议： 123class MyObject: MyProtocol &#123; ...&#125; 这样，这个对象就需要完成协议中列出的所有方法。（否则，就炒了它） 此时，你就可以引用这个对象，同时还有协议： 12var m1: MyObject = MyObject()var m2: MyProtocol = MyObject() 对于代码中任何使用m2变量的部分，它是否是MyObject对象并不重要。m2类型是MyProtocol，不是MyObject。 所有你的代码看到的是，m2是某个遵守MyProtocol协议的对象，但是具体是什么样的对象并不重要。 换而言之，你并不关心你雇用的员工，是不是兼职其他工作，只要他和你需要的东西不冲突，你就可以雇佣他。]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[矩阵，向量求导法则]]></title>
    <url>%2F2017%2F10%2F12%2FThe%20Derivation%20formula%20of%20matrix%20and%20vector%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Statistics</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#中的abstract和virtual]]></title>
    <url>%2F2017%2F10%2F12%2FThe%20abstract%20and%20virtual%20in%20CSharp%2F</url>
    <content type="text"><![CDATA[abstract, new和override 抽象（abstract）方法必须在抽象类中定义，且没有方法的实现。 基类中的抽象（abstract）方法必须在派生类中重写（override）。 抽象类无法创建基实例，只能继承后创建。 派生类中如果重新定义和基类同名的方法，使用new关键字。 派生类中如果要重写基类中同名已经实现的方法，则基类中的方法用virtual关键字，派生类中的同名方法用override关键字重写。 virtual修饰的法法必须要实现。 virtual和abstract修饰的方法必须是pubulic。 virtual方法必须实现，abstract方法不一定要实现。 virtual方法可以被派生类重写，abstract方法必须在派生类中重写。]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scikit-learn的支持向量机（SVM）]]></title>
    <url>%2F2017%2F10%2F05%2FSupport%20vector%20machine%20(SVM)%20for%20scikit-learn%2F</url>
    <content type="text"><![CDATA[支持向量机（SVM）是用于分类，回归和异常值检测的监督学习方法。 支持向量机的优点包括： 在高维空间中行之有效。 当维数大于样本数时仍然可用。 在决策函数中只使用训练点的一个子集（称为支持向量），大大节省了内存开销。 用途广泛：决策函数中可以使用不同的核函数。提供了一种通用的核，但是也可以指定自定义的核。 返回的分割直线满足margin最大的条件，所以是一个robust的解。 SVM对数据点的依赖是稀疏的，只有少量支持向量对最终结果有贡献。 而其劣势在于 如果特征数量远大于样本数量，则表现会比较差。 SVM不直接提供概率估计。这个值通过五折交叉验证计算，代价比较高（见下面“跑分与概率”一节）。 首先SVM的优化问题比较复杂，不仅人难以理解，写起程序来也比较复杂，必须要用到Sequential minimal optimization（SMO）。 其次，传统的SVM只能处理线性可分的问题，并且对数据中的噪音也很敏感，因此我们必要对算法进行改造。 Scikit-learn中的支持向量机同时支持密集样本向量（numpy.ndarray和可通过numpy.asarray转化的数据类型）和稀疏样本向量（任何scipy.sparse对象）。但是如果想用SVM对稀疏数据进行预测，则必须先在这些数据上拟合。为了优化性能，应该使用C阶（C-Ordered）numpy.ndarray（密集的）或scipy.sparse.csr_matrix（稀疏的），并指定dtype=float64。 分类要在数据集上进行多类别分类，可以使用SVC，NuSVC和LinearSVC这三个类。 SVC和NuSVC两种方法类似，但是接受的参数有细微不同，而且底层的数学原理不一样（见“数学原理”一节）。另一方面，LinearSVC是对支持向量分类的另一种实现，使用了线性核。注意LinearSVC不接受关键字kernel，因为核被预设为是线性的。其与SVC和NuSVC相比还缺少了一些成员，如support_。 和其它分类器一样，SVC，NuSVC和LinearSVC接受两个数组：大小为[n_samples, n_features]的数组X，包含训练样本；以及大小为[n_samples]的数组y，包含类别标签（以字符串类型或整型存储）： 123456789&gt;&gt;&gt; from sklearn import svm&gt;&gt;&gt; X = [[0, 0], [1, 1]]&gt;&gt;&gt; y = [0, 1]&gt;&gt;&gt; clf = svm.SVC()&gt;&gt;&gt; clf.fit(X, y) SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape=None, degree=3, gamma='auto', kernel='rbf', max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False) 拟合以后就可以用得到的模型预测新值 12&gt;&gt;&gt; clf.predict([[2., 2.]])array([1]) SVM的决策函数依赖于训练数据的一个子集，称为支持向量。它们的一些属性可以在成员变量support_vectors_，support_和n_support中找到 12345678910&gt;&gt;&gt; # get support vectors&gt;&gt;&gt; clf.support_vectors_array([[ 0., 0.], [ 1., 1.]])&gt;&gt;&gt; # get indices of support vectors&gt;&gt;&gt; clf.support_ array([0, 1]...)&gt;&gt;&gt; # get number of support vectors for each class&gt;&gt;&gt; clf.n_support_ array([1, 1]...) 多类别分类SVC和NuSVC使用“一对多”方法（Knerr et al., 1990）来实现多类别分类。如果n_class是类别的数目，则该实现会构造n_class * (n_class - 1) / 2个分类器，每个分类器针对两个类别对数据进行训练。为了提供一个和其它分类器一致的接口，选项decision_function_shape允许调用者将所有“一对一”分类器的结果聚合进一个(n_samples, n_classes)的决策函数 123456789101112131415&gt;&gt;&gt; X = [[0], [1], [2], [3]]&gt;&gt;&gt; Y = [0, 1, 2, 3]&gt;&gt;&gt; clf = svm.SVC(decision_function_shape='ovo')&gt;&gt;&gt; clf.fit(X, Y) SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0, decision_function_shape='ovo', degree=3, gamma='auto', kernel='rbf', max_iter=-1, probability=False, random_state=None, shrinking=True, tol=0.001, verbose=False)&gt;&gt;&gt; dec = clf.decision_function([[1]])&gt;&gt;&gt; dec.shape[1] # 4 classes: 4*3/2 = 66&gt;&gt;&gt; clf.decision_function_shape = "ovr"&gt;&gt;&gt; dec = clf.decision_function([[1]])&gt;&gt;&gt; dec.shape[1] # 4 classes4 另一方面，LinearSVC实现了“一对多”分类法，因此会训练n_class个模型。如果只有两个类别，那么只会得到一个模型： 123456789&gt;&gt;&gt; lin_clf = svm.LinearSVC()&gt;&gt;&gt; lin_clf.fit(X, Y) LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True, intercept_scaling=1, loss='squared_hinge', max_iter=1000, multi_class='ovr', penalty='l2', random_state=None, tol=0.0001, verbose=0)&gt;&gt;&gt; dec = lin_clf.decision_function([[1]])&gt;&gt;&gt; dec.shape[1]4 决策函数的完整描述可见“数学原理”一节。 需要注意的是，LinearSVC还实现了另一种分类策略，即所谓的多类别SVM（由Crammer和Singer提出）。通过指定multi_class=&#39;crammer_singer&#39;，可以使用该方法。它得到的结果总是一致的，但是一对多分类法并不能保证这一点。然而在实际应用中，还是一对多分类法用的更多，因为通常来讲该方法得到的结果变化不会太大（mostly similar），而且用的时间显著的短。 一对多LinearSVC得到的属性中，coef_是n_class * n_features维矩阵，而intercept_是n_class * 1维的。系数中的每一行都对应于n_class个“一对多”分类器中的一个（截距也是类似），按照每个与其它类别进行比较的类别顺序排序（in the order of the “one” class）。 而在“一对一”SVC中，属性的格式略微有些复杂难懂。在有线性核的情况下，coef_和intercept_的格式与上面所述LinearSVC的类似，只不过coef的大小为[n_class * (n_class - 1) / 2, n_features]（对应于二元分类器的个数）。类别0到n的顺序是“0 vs 1”, “0 vs 2” , … “0 vs n”, “1 vs 2”, “1 vs 3”, “1 vs n”, . . . “n-1 vs n”。 dual_coef的大小是[n_class-1, n_SV]，不过格式有些难以描述。列对应于n_class * (n_class - 1) / 2个“一对一”分类器中出现的支持向量。每个支持向量被用于n_class - 1个分类器中。每一行中n_class - 1个项目对应于这些分类器的对偶系数（dual coefficient）。 得分和概率SVC中的decision_function方法对每个样本都会给出在各个类别上的分数（在二元分类问题中，是对每个样本给出一个分数）。如果构造函数的probability被设为True，则可以得到属于每个类别的概率估计（通过predict_proba和predict_log_proba方法）。在二元分类中，概率使用Platt缩放进行调整：通过在训练机上做额外的交叉检验来拟合一个在SVM分数上的Logistic回归。在多元分类中，这种方法被Wu et al. (2004)扩展了。 显而易见的是，Platt缩放中的交叉检验在大数据集上是一个代价很高的操作。此外，概率估计与实际得分可能会不一致，即使得分取得了最大值，概率并不一定也能取到最大值。（例如在二元分类中，某个样本经由predict方法得到的分类标签，如果使用predict_proba计算可能概率小于1/2。）Platt的方法在理论上也有一些问题。如果需要拿到置信分数，而这些分数又不一定非得是概率，则建议把probability置为False，并且使用decision_function，而不是predict_proba。 参考文献： Wu, Lin and Weng, “Probability estimates for multi-class classification by pairwise coupling”, JMLR 5:975-1005, 2004. Platt “Probabilistic outputs for SVMs and comparisons to regularized likelihood methods” . 不平衡问题在某些情况下，一些指定的类别或某几个样本关键字可能更加重要，这时可以使用class_weight和sample_weight。 SVC（不是NuSVC）在fit方法中实现了关键字class_weight。该关键字是字典类型，形式为{class_label : value}，这里value是一个正浮点数，将类别class_label的参数C设为C * value。 SVC，NuSVC，SVR，NuSVR和OneClassSVM同样在fit方法中通过关键字sample_weight实现了对单独样本赋予特殊权重的功能。与class_weight类似，它们把第i个样本的参数C设为C * sample_weight[i]。 在iris数据集中试验不同的SVM分类器，并作图比较 SVM：最大化间隔分离超平面 SVM：不平衡类别的分离超平面 SVM-Anova：带有单变量特征选择的SVM 非线性SVM SVM：带权重问题的例子 回归支持向量分类这样的方法可以经扩展用在回归问题上，称作支持向量回归。 支持向量分类产生的模型，如上所述，只依赖于训练数据的一个子集。其原因在于，构造模型时用到的代价函数并不关心那些不在边界上的数据点。类似的，支持向量回归所生成的模型也只依赖于训练数据的一个自己，因为构造模型时用到的代价函数用不上那些与预测值很接近的训练数据。 支持向量回归有三种不同实现：SVR, NuSVR和LinearSVR。LinearSVR提供的实现比SVR快，但是只使用线性核。NuSVR则是使用了一个略不同的数学原理。细节见后面“实现细节”部分。 与分类问题类似，fit方法接受向量X和y作为参数，不过这里y应该是浮点型而不是整型： 123456789&gt;&gt;&gt; from sklearn import svm&gt;&gt;&gt; X = [[0, 0], [2, 2]]&gt;&gt;&gt; y = [0.5, 2.5]&gt;&gt;&gt; clf = svm.SVR()&gt;&gt;&gt; clf.fit(X, y) SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto', kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)&gt;&gt;&gt; clf.predict([[1, 1]])array([ 1.5]) 使用线性核和非线性核进行支持向量回归（SVR) 密度估计与新奇值检测（novelty detection）单类别SVM可用于新奇值检测，即给定一组样本，检测出该数据集的软边界，以判断新数据点是否属于该数据集。OneClassSVM类实现该方法。在这种情况下，由于这是一种无监督学习，数据没有类别标签，因此fit方法只接受数组X作为输入。见新奇值与异常值检测检测一节了解更多用法。 使用非线性核（RBF）的单类别SVM 种类分布建模 应用建议 避免数据拷贝：对SVC、SVR、NuSVC和NuSVR，如果传给特定方法的数据不是以C语言所使用的顺序排列，而且是double精度，那么该数据会在调用底层C实现之前被拷贝一份。通过检查flag属性，可以检查给定的numpy数组是否是以C格式的连续存储方式排列的。对LinearSVC和LogisticRegression，任何以numpy数组形式传入的输入都会被拷贝，然后转化为liblinear内部的稀疏数据表示形式（双精度浮点数，对非零元素存储32位整型的索引）。如果你想训练一个大规模的线性分类器，而又不想拷贝一个稠密的numpy C-存储双精度数组，我们建议使用SGDClassifier。可以对它的目标函数进行配置，使其与LinearSVC模型所使用的基本相同。 核缓存大小：对SVC、SVR、NuSVC和NuSVR，核缓存的大小对较大问题求解的运行时间有非常强的影响。如果你有足够内存，建议将cache_size设置为一个高于默认值200（MB）的值，比如500（MB）或1000（MB）。 设置C：默认情况下C设为1，这是一个合理的选择。如果样本中有许多噪音观察点，则应该减小这个值。这意味着对估计结果进行更严格的正则化。 SVM算法会受数据取值范围的影响，所以强烈建议在使用之前对数据进行缩放。例如把输入向量X的每个属性缩放到[0,1]或[-1,+1]内，或者进行标准化使数据的均值为0方差为1。注意在测试向量上也要进行同样的缩放，这样才能得到有意义的结果。关于数据缩放和标准化的更多细节，参见处理数据一节 NuSVC/OneClassVM/NuSVR中的参数mu估计了训练误差和支持向量的比率 在SVC中，如果要分类的数据是不平衡的（如有很多正数据但是很少负数据），应该加选项class_weight=&#39;balanced&#39;然后/或者尝试不同的惩罚项参数C。 LinearSVC的底层实现使用了随机数生成器来在拟合模型时选择特征。因此对同样的输入数据有略微不同的结果不是怪事。如果发生了这样的情况，试一个更小的tol参数 利用LinearSVC(loss=&#39;l2&#39;, penalty=&#39;l1&#39;, dual=False)来引入L1惩罚项会产生一个稀疏解，即特征权重中只有一少部分不为0，会对决策函数产生贡献。增加C会产生一个更复杂的模型（有更多特征被选择）。可以通过l1_min_c来计算产生“空”模型（所有权重都是0）的C值。 内核函数升维的思想简单说来就是：在原来feature的基础上人为的构造一些新的feature，在更高维度的空间里，原来不线性可分的问题就会变成线性可分的问题，就又可以用svm了。 对高维空间里的线性可分 升维的思想确实很漂亮，但是现实往往是很骨感的：如果对不同的数据集，每次都要寻找一个合适的函数，来把低维空间中的点x映射到高维空间中去是一件很困难的事情。但是回想一下svm里的最终表达式，其实具体的表达式并不在最终结果里出现，出现的只有内积。如果有办法直接算出高维空间中的新内积，就不需要费力去构造。 核函数（Kernel method）正是基于这一思想的技巧。我们可以把kernel想象成，然后不去操心f(x)，而是尝试不同的核函数就可以了。 核函数可以有以下几种选择： 线性（linear）核： $\langle x,x^{‘}\rangle$ 。 多项式（polynomial）核： $\left (\gamma \left \langle x, {x}’ \right \rangle +r \right )^{d}$ 。其中 $d$ 由选项degree指定，$r$ 由coef0指定 径向基Gaussian（RBF）函数： $ exp( - gamma | x-x’ | ^ 2)$ 。其中 $\gamma$ 由选项gamma指定，必须大于0 sigmoid函数 $\tanh（\gamma \langle x，x’\rangle + r）$ ，其中由选项coef0指定 在初始化时通过选项kernel指定用什么核 123456&gt;&gt;&gt; linear_svc = svm.SVC(kernel='linear')&gt;&gt;&gt; linear_svc.kernel'linear'&gt;&gt;&gt; rbf_svc = svm.SVC(kernel='rbf')&gt;&gt;&gt; rbf_svc.kernel'rbf' 自定义核Scikit提供两种方法来自定义核函数：给参数kernel传入一个python函数，或者提前计算好Gram矩阵。使用自定义核的分类器和其它分类器有类似的行为，不过以下两点除外： support_vectors_域为空，只在support_里面存储支持向量的索引 会为fit()方法的第一个参数存储一个引用（不是拷贝），来为以后引用之做准备。如果在调用fit()之后，在调用predict()之前修改这个数组，则会产生一些不可预知的结果。 使用Python函数作为核可以在构造函数中向参数kernel传进一个函数，来使用自定义的核。该函数必须接受两个大小分别为(n_samples_1, n_features), (n_samples_2, n_features)的矩阵作为参数，返回一个大小为(n_samples_1, n_samples_2)的核矩阵。 如下代码定义了一个线性核，并使用该核创建了一个分类器实例 123456&gt;&gt;&gt; import numpy as np&gt;&gt;&gt; from sklearn import svm&gt;&gt;&gt; def my_kernel(X, Y):... return np.dot(X, Y.T)...&gt;&gt;&gt; clf = svm.SVC(kernel=my_kernel) 使用自定义核的SVM 数学原理支持向量机的原理是在高维甚至无限维空间中构建一个超平面或者若干超平面组成的集合，并藉此用于分类、回归或其它任务。从直觉上来讲，好的分隔面是由使得函数间隔最大的超平面得到（即该超平面到任何类别最近训练数据点的距离都取得最大值），因为总体上来讲，间隔越大，分类器的泛化误差越小。 SVC给定可能属于某两种类别的训练向量 $x_i \in \mathbb{R}, i=1,2,…,n$ 和向量 $y \in \left\{ 1,-1 \right\}^{n}$ ，SVC解决的首要问题是 \min_{\omega ,b,\zeta} \frac{1}{2}\omega^{T}\omega + C \sum_{i=1}^{n}\zeta_i \\ subject \ to \ y_i (\omega^{T}\phi(x_i)+b) \geqslant 1-\zeta_i, \\ \zeta_i \geqslant 0,i=1,2,...,n其对偶形式为 \min_{\alpha} \frac{1}{2} \alpha^{T}Q\alpha-e^{T}\alpha \\ subject\ to\ y^{T}\alpha=0\\ 0 \leqslant \alpha_i \leqslant C,i=1,2,...,n其中 $e$ 是全 $1$ 向量， $C &gt; 0$ 是上界， $Q$ 是一个半正定矩阵，$Q_{ij} \equiv y_i y_j K(x_i,x_j)$ ，其中 $K(x_i,x_j) \equiv \phi(x_i)^{T} \phi(x_j)$ 是核。这里训练向量通过函数被隐式映射到一个高维（甚至无限维）空间 $\phi$ 。 决策函数是 注意：虽然从libsvm和liblinear导出的SVM模型使用 $C$ 作为正则化参数，但实际上其它更多预测器使用的是alpha。这两个参数之间的关系是 \mathop{\rm sgn}(\sum_{i=1}^n y_i \alpha_i K(x_i,x_j)+\rho)这些参数可以通过各个成员变量访问：dual_coef_存放乘积，support_vectors存放支持向量，intercept_存放独立项： 参考文献： “Automatic Capacity Tuning of Very Large VC-dimension Classifiers”, I. Guyon, B. Boser, V. Vapnik - Advances in neural information processing 1993. “Support-vector networks”, C. Cortes, V. Vapnik - Machine Learning, 20, 273-297 (1995). NuSVC其提供了一个新的参数，控制支持向量的个数和训练误差。参数 $v \in \left (0,1 \right ]$ 是训练误差的上限和支持向量的下限。 可以看到v-SVC是C-SVC的一种重参数化形式，因此两者在数学上是等价的。 SVR给定训练向量组 $x_i \in \mathbb{R}^p , i=1,2,…,n$ 和向量 $y \in \mathbb{R}^n , \varepsilon-SVR$ 要解决的主要问题如下所示： \min_{\omega ,b,\zeta, \zeta^*} \frac{1}{2}\omega^{T}\omega + C \sum_{i=1}^{n}(\zeta_i+\zeta^*) \\ subject \ to \ y_i - \omega^T \phi(x_i) - b \leqslant \varepsilon + \zeta_i, \\ \omega^T \phi(x_i) + b - y_i \leqslant \varepsilon + \zeta_i^*, \\ \zeta_i, \zeta_{i}^* \geqslant 0,i=1,2,...,n其对偶为 \min_{\alpha, \alpha^*} \frac{1}{2} (\alpha - \alpha^*)^{T}Q(\alpha - \alpha^*) + \varepsilon e^T (\alpha + \alpha^*) -y^T (\alpha - \alpha^*)\\ subject\ to\ e^{T} (\alpha - \alpha^*) =0\\ 0 \leqslant \alpha_i,\alpha_i^* \leqslant C,i=1,2,...,n其中 $e$ 是全 $1$ 向量，$C &gt; 0$ 是上界，$Q$ 是一个半正定矩阵， $Q_{ij} \equiv K(x_i,x_j) = \phi(x_i)^T \phi(x_j)$ 是内核。这里训练向量通过函数被隐式映射到一个高维（甚至无限维）空间 $\phi$ 。 决策函数为 \sum_{i=1}^n (\alpha - \alpha^*)K(x_i,x) + \rho这些参数可以通过各个成员变量访问。其保持的差 $\alpha - \alpha^*$ ，其中变量dual_coef_存储，support_vectors_存储支持向量，intercept_存储独立项 $\rho$ 。 参考文献： “A Tutorial on Support Vector Regression”, Alex J. Smola, Bernhard Schölkopf - Statistics and Computing archive Volume 14 Issue 3, August 2004, p. 199-222. 底层实现在底层，使用 libsvm 和 liblinear 来处理所有计算逻辑。这些库是被C和Cython包装的。 参考文献： LIBSVM: a library for Support Vector Machines LIBLINEAR – A Library for Large Linear Classification]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Python</tag>
        <tag>SVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据表查询]]></title>
    <url>%2F2017%2F09%2F19%2FQuery%20database%2F</url>
    <content type="text"><![CDATA[数据查询是数据库操作的核心操作。SQL提供了SELECT语句进行数据查询，其一般格式为： SELECT [ALL | DISTINCT] &lt;目标列表达式&gt; FROM &lt;表名或视图名&gt; (&lt;SELECT 语句&gt;) [AS] &lt;别名&gt; [WHERE&lt;条件表达式&gt;] 以下操作，都以下表为模型。 Student Sno Sname Ssex Sage Sdept 201215121 Yong Li M 20 CS 201215122 Chen Liu F 19 CS 201215123 Min Wang F 18 MA 201215125 Li Zhang M 19 IS Course Cno Cname Cpno Ccredit 1 Data base 5 4 2 Mathematics 2 3 Information system 1 4 4 Operating system 6 3 5 Data structure 7 4 6 Data processing 2 7 PASCAL language 6 4 SC Sno Cno Grade 201215121 1 92 201215121 2 85 201215121 3 88 201215122 2 90 201215122 3 80 单表查询选择表中的若干列选择表中的全部或若干列即关系代数的投影运算。 查询指定列查询全体学生的学号和姓名12select SNO, SNAME from Student; 目标表达式中的各列先后顺序可以不同 查询全部列查询全体学生的详细记录12select * from Student; 查询经过计算的值查询全体学生的姓名及出生年份12select SNAME, 2017-SAGE from Student; 查询结果中第 2 列不是列名，而是一个计算表达式，用当前年份减去学生年龄，所得到的即是学生的出生年份。 查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名12select SNAME, 2017-SAGE, lower(SDEPT) from Student; 查询所有学生姓名、出生年份和所在院系，要求用小写字母表示系名，并分别使用别名标识12select SNAME as NAME, 2017-SAGE as BIRTHDAY, lower(SDEPT) as DEPARTMENT from Student; 其中as可以省略 选择表中若干元组消除取值重复的行查询选修了课程的学生学号12select distinct SNO from SC; 如果没有distinct关键词，则默认为all。 查询满足条件的元组比较大小查询所有年龄小于20岁的学生姓名及年龄123select SNAME, SAGE from Student where SAGE&lt;20; 确定范围查询年龄在20~23岁之间的学生姓名，系别和年龄。123select SNAME, SDEPT, SAGE from Student where SAGE between 20 and 23; 查询年龄不在20~23岁之间的学生姓名，系别和年龄。123select SNAME, SDEPT, SAGE from Student where SAGE not between 20 and 23; 确定集合查询CS，MA，IS学生的姓名和性别123select SNAME, SSEX from Student where SDEPT in ('CS', 'MA', 'IS'); 查询不在CS，MA，IS学生的姓名和性别123select SNAME, SSEX from Student where SDEPT not in ('CS', 'MA', 'IS'); 字符匹配谓词LIKE可以用来进行字符串的匹配。其一般语法格式为： [NOT] LIKE &#39;&lt;匹配串&gt;&#39; [ESCAPE &#39;&lt;转码字符&gt;&#39;] %代表任意长度（长度可以是0）的字符串。 _代表任意单个字符。 在查询匹配字符串中如果本身含有%或_，这时需要使用ESCAPE &#39;&lt;转码字符&gt;&#39;短语对通配符进行转义。 查询学号为’201215121’的学生的详细情况123select * from Student where SNO like '201215121'; 查询所有姓’Liu’的学生姓名，学号和性别lite123select SNAME, SNO, SSEX from Studentwhere SNAME like 'Liu%'; 查询DB_Design课程的课程号和学分123select CNO, CCREDIT from Course where CNAME like 'DB\_Design' escape '\'; 涉及空值的查询查询所有有成绩的学生的学号和成绩123select SNO, GRADE from SC where GRADE is not null; 多重条件查询查新CS系年龄在20岁以下的学生姓名123select SNAME from SCwhere SAGE&lt;20 and SDEPT='CS'; ORDER BY 子句可以用ORDER BY子句对查询结果进行升序（ASC）或降序（DESC）排列。默认为升序。 查询选修了3号课程的学生的学号和成绩，查询结果按分数降序排列。1234select SNO, Grade from SCwhere Cno='3'order by GRADE desc; 聚集函数为进一步方便用户，增强检索功能，SQL提供了如下聚集函数： 函数名 功能 COUNT(*) 统计元组个数 COUNT([DISTINCT\ALL] &lt;列名&gt;) 统计一列中值得个数 SUM([DISTINCT\ALL] &lt;列名&gt;) 计算一列值得总和（此列必须是数值类型） AVG([DISTINCT\ALL] &lt;列名&gt;) 计算一列值得平均值（此列必须是数值类型） MAX([DISTINCT\ALL] &lt;列名&gt;) 求一列值中的最大值 MIN([DISTINCT\ALL] &lt;列名&gt;) 求一列值中的最小值 查询学生总人数12select count(*)from Student; 查询选修了课程的学生人数12select count(distinct SNO)from SC; 计算选修1号课程的学生平均成绩123select avg(Grade)from SCwhere SNO='1'; 查新选修1号课程的学生最高分数123select max(Grade)from SCwhere CNO='1'; GROUP BY子句GROUP BY子句将查询结果按某一列或多列的值分组，值相等为一组。 分组后聚集函数将作用与每一个组，即每一组都有一个函数值。 求各个课程号及相应的选课人数123select CNO, count(SNO)from SCgroup by CNO; 查询平均成绩大于等于90分的学生学号和平均成绩1234select SNO, avg(Grade)from SCgroup by SNOhaving avg(Grade)&gt;=90 WHERE子句中是不能用聚集函数作为条件表达式，应用HAVING 连接查询等值于非等值连接查询连接查询的WHERE子句中用来连接两个表的条件称为连接条件或连接谓词，格式为： [&lt;表名1&gt;.] &lt;列名1&gt;&lt;比较运算符&gt; [&lt;表名2&gt;.] &lt;列名2&gt; [&lt;表名1&gt;.] &lt;列名1&gt;BETWEEN [&lt;表名2&gt;.] &lt;列名2&gt;AND [&lt;表名3&gt;.] &lt;列名3&gt; 查询每个学生及其选修课程情况123select Student.*, SC.*from Student, SCwhere Student.SNO=SC.SNO; 查询选修2号课程且成绩在90分以上的所有学生的学号和姓名123select Student.SNO, Snamefrom Student, SCwhere Student.SNO=SC.SNO and SC.CNO='2' and SC.Grade&gt;90; 自身连接查询每一门课的间接先修课123select FIRST.CNO, SECOND.CPNOfrom Course FIRST, Course SECONDwhere FIRST.SPNO=SECOND.CNO; 外连接查询每个学生及其选修课程情况12select Student.SNO, SNAME, SSEX, SAGE, SDEPT, CNO, GRADEfrom Student left outer join SC on (Student.SNO=SC.SNO); 多表连接查询每个学生的学号，姓名，选修的课程名称及成绩123select Student.SNO, SNAME, CNAME, GRADEfrom Student, SC, Coursewhere Student.SNO=SC.SNO and SC.CNO=Course.CNO;]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VPS搭载ss实现科学上网]]></title>
    <url>%2F2017%2F09%2F18%2FThe%20Usage%20of%20traffic-proxy%20in%20Shadowsocks%20at%20VPS%2F</url>
    <content type="text"><![CDATA[简而言之，想使用shadowsocks翻墙，需要一个客户端和一个服务端。 这篇文章主要是如何在VPS上配置shadowsocks，并使用代理实现科学上网。 登录VPS服务器在终端中输入： 1ssh -i [PATH_TO_PRIVATE_KEY] [USERNAME]@[EXTERNAL_IP_ADDRESS] [PATH_TO_PRIVATE_KEY]是私钥路径。 [USERNAME]是连接到VPS的用户的名称。 [EXTERNAL_IP_ADDRESS] 是VPS的外部IP地址。 下载shadowsocks客户端CentOS12yum install python-setuptools &amp;&amp; easy_install pippip install shadowsocks Debian/Ubuntu:12apt-get install python-pippip install shadowsocks 有时Ubuntu会遇到第一个命令安装python-pip时找不到包的情况。pip官方给出了一个安装脚本，可以自动安装pip。先下载脚本，然后执行即可： 12wget https://bootstrap.pypa.io/get-pip.pypython get-pip.py 或者使用easy_install安装： 1sudo easy_install shadowsocks 编写配置文件shadowsocks启动时的参数，如服务器端口，代理端口，登录密码等，可以通过启动时的命令行参数来设定，也可以通过json格式的配置文件设定。推荐使用配置文件，方便查看和修改。 用vi新建一个配置文件： 1vi /etc/shadowsocks.json 然后输入如下内容： 1234567891011121314151617181920212223&#123; "server": "0.0.0.0", "server_ipv6": "::", "server_port": 443, "local_address": "127.0.0.1", "local_port": 1081, "port_password":&#123; "port_1":"password_1", "port_2":"pawwword_2" &#125;, "timeout": 120, "udp_timeout": 60, "method": "chacha20", "protocol": "auth_sha1_v4_compatible", "protocol_param": "", "obfs": "tls1.2_ticket_auth_compatible", "obfs_param": "", "dns_ipv6": false, "connect_verbose_info": 1, "redirect": "", "fast_open": false, "workers": 1&#125; 简单说明一下各个配置项： server你的VPS服务器的IP地址 server_port你的shadowsocks服务端口。一般可以填一个1025到49151之间的数字。不过需要注意的是，这里的是外部端口，使用时应避免和其它端口重复 local_address本地IP地址，作为服务器使用的时候可以不用关注，填127.0.0.1即可。 local_port本地端口，也不用关注。 port_password你的shadowsocks端口和服务密码，客户端连接时需要填写的。如果需要多人共享，则每个之间用 , 隔开。端口使用时应注意是否被防火墙隔离。 timeout超时时间，如果当心网络不好可以设置大一点。 method加密方式。 fast_open在Ubuntu上建议填True。 填好以后保存退出。 启动shadowsocks如果已经写好了配置文件，启动shadowsocks服务器的命令如下： 1ssserver -c /etc/shadowsocks.json 后台启动和停止shadowsocks服务器： 12ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop shadowsocks的日志保存在 1/var/log/shadowsocks.log 安装锐速安装：1wget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh &amp;&amp; bash serverspeeder-all.sh 卸载：1chattr -i /serverspeeder/etc/apx* &amp;&amp; /serverspeeder/bin/serverSpeeder.sh uninstall -f 开启：1service serverSpeeder start 查看状态：1service serverSpeeder status 需要在root模式下进行]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>ShadowSocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL修改root用户密码]]></title>
    <url>%2F2017%2F09%2F08%2FChanges%20the%20root%20user%20password%20for%20MySQL%2F</url>
    <content type="text"><![CDATA[新安装了MySQL，安装之后粗心把密码给搞丢了，进入MySQL时报错：ERROR 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: NO). 通过以下步骤修改密码。 Step 1关闭MySQL服务 1sudo /usr/local/mysql/support-files/mysql.server stop ① 通过DMG安装的MySQL通过’&#39;System Prefrences&#39; &gt; MySQL &gt; &#39;Stop MySQL Server&#39;来结束MySQL服务。 如果报错：ERROR! MySQL server PID file could not be found! 则直接用 ① 的方法关闭即可。 同理打开服务为： 12&gt; sudo /usr/local/mysql/support-files/mysql.server start&gt; Step 2使用安全模式启动MySQL 1sudo /usr/local/mysql/bin/mysqld_safe --skip-grant-tables Step 3在新的Terminal中输入： 1mysql -u root 在打开的MySQL命令行窗口依次输入： 123UPDATE mysql.user SET authentication_string=PASSWORD(&apos;YOUR_NEW_PASSWORD&apos;) WHERE User=&apos;root&apos;;FLUSH PRIVILEGES;\q 这里注意结尾的 ;不能少。 YOUR_NEW_PASSWORD 是你的新密码 5.7之前的版本，mysql.user表里面的authentication_string字段改成了：password 测试重启MySQL后运行以下命令测试密码是否修改成功 1mysql -u root -p]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 快速开始简明教程]]></title>
    <url>%2F2017%2F03%2F19%2FThe%20introductory%20of%20Git%2F</url>
    <content type="text"><![CDATA[Git 是一个分布式版本管理系统，即每个终端都有一套完整的项目代码（包括历史文件）。为了使用 Git，先要安装 Git。可以在 Command Line 或者 Terminal 中输入git命令检查是否已经安装。 开始使用 创建本地工作目录先要创建一个文件夹来保存项目代码。例如我使用如下目录： 1/Users/renfei/Sites/project 命令行中cd到这个目录，然后执行git init 命令来初始化： 123bogon:~ renfei$ cd /Users/renfei/Sites/project bogon:project renfei$ git initInitialized empty Git repository in /Users/renfei/Sites/project/.git/ 添加远程仓库使用git remote add命令： 1bogon:buaa-weixin renfei$ git remote add proj https://renfeisong@bitbucket.org/developers/proj.git 上面的 proj 是一个本地别名，可以起得短一些，以便以后使用。后面的地址则是远程仓库得地址。添加之后，可以使用git remote命令查看当前已有的远程仓库。 从远程仓库得到数据使用 git fetch 命令。 12345678bogon:project renfei$ git fetch projremote: Counting objects: 39, done.remote: Compressing objects: 100% (34/34), done.remote: Total 39 (delta 5), reused 0 (delta 0)Unpacking objects: 100% (39/39), done.From https://bitbucket.org/renfeisong/project * [new branch] develop -&gt; proj/develop * [new branch] master -&gt; proj/master 会看到得到了服务器上的文件，以及两个分支，develop 和 master。这里得到得分支数目取决于远程仓库的内容。虽然得到了这些东西，但是现在这些文件还没有出现在你的工作目录中。 这是因为，我们需要利用git checkout命令「检出」（实际就是把工作目录切换到某个分支），才可以看到对应分支下的那些文件。 切换分支使用 checkout 命令。 123bogon:project renfei$ git checkout developBranch develop set up to track remote branch develop from proj.Switched to a new branch 'develop' 例子中我们切换到了 develop 分支，其中对应的文件就都出现了（如果有的话）。 再说分支分支是 Git 的一个很重要的功能，因此有必要解释一下。如果把随着时间的推移，代码的变化想象成前进的路线，那么分支就是从路线上的某一点衍生出来的一条支线，在这条支线上的开发不会对原先路线的代码造成任何影响。例如，现在我们有一个 master 分支和一个 develop 分支，master 分支发布稳定版本的应用，而 develop 分支则进行日常开发。一旦达到某个进度节点，develop 分支上的代码足够稳定可以发布，就把 develop 分支合并（merge）到 master 分支，同时继续 develop 分支的开发。 再如，develop 分支开发的过程中出现了某个 bug，一个开发人员想解决这个 bug，那么为了不影响其他人的工作，他可以从 develop 分支再创建一个新的分支 hotfix，然后在这个分支下修改，完成后把它合并回 develop 分支，并删除 hotfix 分支（它的历史使命已经完成）。 可以看出，每个分支都有一套代码。每个开发人员本地都保存了全部分支的全部代码（这些代码连同其他信息被 git 有序地组织在了工作目录下 .git 目录中，这个目录应当是隐藏的），当通过checkout branch_name切换分支时，工作目录下可见的文件也会被切换成当前分支下的文件。而其他分支的文件也并没有丢失，所以非常方便，你可以根据需要切换分支进行不同的工作。 文件操作 添加新文件在工作目录中创建的新文件处于 untracked 状态，即没有被 git 跟踪。新文件不会自动被 git 跟踪，因为许多临时文件、日志文件不需要保存到仓库中。如果要往仓库中添加文件，使用 git add 命令。 1bogon:project renfei$ git add * 上述做法添加所有文件。如果包含文件夹，则会递归地添加里面的文件。也可以添加单独的文件或者在文件名中使用通配符。 要查看当前状态（哪些文件 untracked，哪些文件处于其他状态等）可以使用 git status 命令。 执行 git add 后，新添加的文件状态（可通过git status查看）变为 change to be committed，或者称为 staged，暂存。意思就是，只要把它 commit 上去就可以了。 修改文件如果修改了某个已跟踪的文件，那么这个文件会变为 modified，not staged，未暂存。此时必须再次 git add 这个文件使它变成 staged 状态，才能够被 commit 上去。 提交当有文件状态为暂存的（staged）时，就可以执行 git commit 命令。这个命令会提交暂存的文件。git 要求为每次提交添加一个说明，因此一般使用一个-m选项来添加说明。例如： 12345678910111213141516171819bogon:project renfei$ git commit -m "background admin site (backend) added"[develop 7d17136] background admin site (backend) added 16 files changed, 10372 insertions(+) create mode 100644 bootstrap/v2/css/bootstrap-responsive.css create mode 100644 bootstrap/v2/css/bootstrap-responsive.min.css create mode 100644 bootstrap/v2/css/bootstrap.css create mode 100644 bootstrap/v2/css/bootstrap.min.css create mode 100644 bootstrap/v2/img/glyphicons-halflings-white.png create mode 100644 bootstrap/v2/img/glyphicons-halflings.png create mode 100644 bootstrap/v2/js/bootstrap.js create mode 100644 bootstrap/v2/js/bootstrap.min.js create mode 100644 define.php create mode 100644 index.php create mode 100644 jquery/jquery-1.10.2.min.js create mode 100644 login.php create mode 100644 logout.php create mode 100644 pref.php create mode 100644 signup.php create mode 100644 util.php 这个操作完成后，代码就被提交到了本地仓库。每次进行 commit 后都会对整个项目做一个快照，以后可以随时回滚到某个快照中。 如果希望省略 add 过程而直接提交所有跟踪的文件，可以给 commit 命令加上-a选项。如下： 1bogon:project renfei$ git commit -a -m "background admin site (backend) added" 推送到远程仓库commit仅仅把更改提交到了本地仓库。如果想推送到远程仓库，需要使用 git push 命令。 12345678bogon:project renfei$ git push proj developCounting objects: 25, done.Delta compression using up to 8 threads.Compressing objects: 100% (22/22), done.Writing objects: 100% (24/24), 122.16 KiB | 0 bytes/s, done.Total 24 (delta 1), reused 0 (delta 0)To https://renfeisong@bitbucket.org/renfeisong/project.git d4eeb86..7d17136 develop -&gt; develop 其中 proj 是之前设定的代号，而 develop 表示推送本地仓库的 develop 分支。 更新本地仓库此时，可以随时使用 git pull 命令来从远程仓库拉取更新。 12bogon:project renfei$ git pullAlready up-to-date. 如果没有更新，就会显示 Already up-to-date. 补充 Git 还有很多很多功能，比如从仓库移除文件、重命名、比较等。可以参考 Pro Git 这本书，是基于 CC 协议发布的。地址：http://git-scm.com/book/zh]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 配置 Apache, MySQL, PHP 以及 phpMyAdmin 过程记录]]></title>
    <url>%2F2017%2F03%2F17%2FThe%20process%20of%20configures%20Apache%2C%20MySQL%2C%20PHP%2C%20and%20phpMyAdmin%20at%20Ubuntu%2F</url>
    <content type="text"><![CDATA[Apache安装1$ sudo apt-get install apache2 装好后，配置文件应该位于/etc/apache2中，默认情况下无需修改即可使用。默认的网站目录为/var/www/。 启动 Apache 的方法： 1$ sudo /etc/init.d/apache2 start 重启 Apache： 1$ sudo /etc/init.d/apache2 restart 停止 Apache： 1$ sudo /etc/init.d/apache2 stop 上述命令也可以写成这种形式（以启动为例）： 1$ sudo service apache2 start 测试装好并启动 Apache 服务后，本地服务器应该就可以用了。可以利用curl访问 localhost 来测试： 1$ curl localhost Apache 的错误日志文件默认为/var/log/apache2/error.log。 其他启动的时候可能会出现如下警告： 1apache2: Could not determine the server's fully qualified domain name, using 127.0.0.1 for ServerName 说明你没有指定ServerName。如果想去掉这个错误，可以修改/etc/apache2/apache2.conf文件： 1$ sudo vi /etc/apache2/apache2.conf 添加如下行： 1ServerName localhost PHP 安装 PHP同样使用apt-get命令安装 PHP： 1$ sudo apt-get install php5 执行之后，PHP 应该就已经部署完毕了。可以使用phpinfo()函数来测试 PHP 是否已经就绪： 1$ sudo vi /var/www/phpinfo.php 在文件里输入： 1&lt;?php phpinfo(); ?&gt; 然后curl localhost/phpinfo.php来查看。 安装其他 PHP 模块1$ sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl MySQL 1$ sudo apt-get install mysql-server 安装过程中需要设定 root 账户的密码。至此，LAMP 环境已经配好。 phpMyAdmin 安装首先执行： 1$ sudo apt-get install phpmyadmin 安装过程比较长，会有几个选项，依次如下： （1）选择服务器软件。这里选择刚刚安装的 Apache2。 （2）选择手动设定。 （3）输入之前安装 MySQL 时设的 MySQL root 账户的密码。 （4）设定 phpMyAdmin 的登录密码。 注意，phpMyAdmin 的配置文件为：/etc/phpmyadmin/config.inc.php。 包含 pma 的配置文件到 Apache安装后，还不能立即使用 phpMyAdmin，因为它不在网站目录下。为了正常使用，只需把 phpMyAdmin 的配置文件包含到 Apache 的配置中。编辑apache2.conf： 1$ sudo vi /etc/apache2/apache2.conf 在文件中添加如下行： 1Include /etc/phpmyadmin/apache.conf 重启服务器： 1$ sudo service apache2 restart 至此，你就可以通过yourdomain/phpmyadmin来访问 phpMyAdmin 了。 mcrypt 模块丢失的错误一个 bug 可能导致访问 phpMyAdmin 时出现 mcrypt 模块丢失的错误。如果遇到，则可以采用下面的办法修复： 123$ sudo ln -s /etc/php5/conf.d/mcrypt.ini /etc/php5/mods-available/$ sudo php5enmod mcrypt$ sudo service apache2 restart 全局禁用 Index Index 就是访问一个不存在 index.html、index.php 等文件的目录时服务器列出的文件列表，这样会对用户展示文件结构，如果想禁用，可以修改 Apache 的配置文件： 1$ sudo vi /etc/apache2/apache2.conf 找到并修改为 123456&lt;Directory /var/www/&gt; Options -Indexes Options FollowSymLinks AllowOverride None Require all granted&lt;/Directory&gt;]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac OS X Terminal 101：终端使用初级教程]]></title>
    <url>%2F2017%2F03%2F17%2FThe%20introductory%20of%20macOS%20Terminal%2F</url>
    <content type="text"><![CDATA[最近学习苹果认证的《Mac OS X Support Essentials》教程，看到 Command Line 一节有很多实用的知识，下面选取一部分翻译 + 笔记，整理成此文。 你可以整天驾驶汽车而不用知道如何修理它们，但是如果你希望当一个维护员，你就需要知道事情是如何运作的。同样的事情也发生在了 Mac OS X 上；你可以一直使用 Mac 而不用知道如何修理它，但是如果你想对系统做一些维护或解决一些问题，那么你需要知道如何使用 command-line。 为什么要使用命令行/如何开启命令行？ 许多功能在图形界面不提供，只有通过命令行来实现。 Finder会隐藏许多你不太会需要的文件，然而 command line 会允许你访问所有文件。 通过 command line 可以远程访问你的 Mac（利用 SSH）。 administrators 用户可以通过 sudo 命令获得 root 用户权限。 通过 command-line script 可以使工作更高效。 Terminal（终端）程序可以在“实用工具”里找到。 如果你开启手动输入用户名登陆模式，登陆时在用户名处输入 &gt;console 可以直接进入命令行界面。随后你仍然需要登录到一个账户。 初识Command Line 许多命令会花费一些时间来执行，然而这中间不会给出任何提示或者进度条。一般结束后会出现一个“用户名$”的标记。如果没有出现，那么说明最后一条命令正在执行。 一条命令包括 Command Name、Options、Arguments、Extras 四个部分，但是后三个部分有时是可选的。Options 部分用-作为前导符。其中许多命令的 Options 部分只包含单个字母，这时可以合并。例如，ls -lA和ls -l -A是等效的。Arguments 部分用来细化这个命令或指定这个命令具体的实施对象，Extras 部分则用来进一步实现其他功能。 举例：下列命令包含前三个部分，用于删除 Junk 这个程序。 michelle$ rm -R /Applications/Junk.app 如果你输入了一些错误的命令，系统会返回一些错误信息。但是系统却不会阻止你做傻事（例如删除整个用户文件夹）。 关于 man 命令 虽然有上千条命令，每条命令还有许多可选参数和具体的使用方式，但是你却不需要记住这些命令。你只需要记住一个：man 大多数命令都会包含一个使用指南，会告诉你任何你需要知道的关于这个命令的所有细节，在命令行中输入 man command-name 即可获取。例如，你想知道ls这个命令怎么使用，输入man ls即可进入使用指南页面。 使用指南往往很长，所以你可以使用▲（上箭头）或▼（下箭头）来上下移动，使用 Speace 来翻页，输入/和关键字来按照关键字搜索，按Q来退出使用指南页面。 那么——如果你连命令名称都不知道怎么办呢？输入man -k和关键字来对整个使用指南数据库进行搜索。 命令行，文件和路径如果知道如何使用命令是掌握 command line 的第一步，那么第二步就是学习如何在 command line 中使用文件路径。如果你掌握了文件路径，你将会发现这比使用 Finder 更加快捷。 注意 command line 工具是大小写敏感的，并且对于文件名，必须包括扩展名。例如，你想找iTunes这个程序，输入itunes是无效的，必须输入iTunes.app。 Mac OS传统上喜欢使用“文件夹”（folders）这个名称，但是在 command line 中，主要使用“目录”（directory）这个词。这和 UNIX 是一致的。 两种路径：绝对路径和相对路径 绝对路径：完整描述一个文件的位置，总是以斜杠（/）（forward slash）开头。例如/Users/michelle/Public/Drop Box。 相对路径：只描述一部分位置信息，它和你在 command line 目前的目录有关。当你打开新的 Terminal 程序时，command line 会话的目录应该是你的 home folder。这时上面例子文件夹的相对路径写作Public/Drop Box。显然它从当前目录开始。和html类似，你也可以使用两个点（“..”）来代表父目录，这样你就可以用相对路径表示上级或同级目录了。例如你可以输入cd ..甚至cd ../.. 切换到其他路径和目录如果你想将当前 command line 会话切换到其他目录，需要用到三个命令：pwd，ls和cd。 pwd的含义是“print working directory”，会显示当前目录的绝对路径。 ls的含义是“list directory contents”，它会列出当前目录的内容。这个命令还有其他参数可选。 cd的含义是“change directory”，它会改变当前目录到你指定的目录。如果你不指定，则会返回你的 home folder。 处理特殊字符如果目录中有特殊字符（空格，括号，引号，[]，!，$，&amp;，*，;，|，\），那么直接输入空格会造成系统识别困难，必须使用特殊的语法来表示这些字符。例如上例中，空格前添加反斜杠“\”（back slash）即可：cd Punlic/Drop\ Box/。除了反斜杠，也可以用引号的方法：cd &quot;Public/Drop Box&quot;。 ——如果不想手动输入，也可以把文件从 Finder 拖到 Terminal 窗口来创建绝对路径，这会方便一些，因为上面提到的所有特殊字符在拖动后都会自动变成系统可识别的表示方法。其实，更有效率的解决方案是使用 Tab Complete 功能。 Tab Complete 是 command line 中最能给你节省时间的特性之一，利用它的自动完成文件、目录名称功能还可以防止你输入错误。使用cd进入你的 home folder，使用cd P命令，然后按下tab按键。你可能会听到错误音，因为你的 home folder 内有多个 P 开头的文件夹。再按一次tab，Terminal 将会为你列出 P 开头的两个文件夹：Public 和 Pictures。按U，再按tab，Terminal 则会自动为你补全Public/。Tab complete 同样会处理那些特殊字符。注意，这会在末尾保留/符号，大部分时候这没问题，但如果出错，移除多余的/试一试。 另外，鄂化符~（tilde）在command line 中可以代表当前用户的 home folder。例如~/Public/Drop\ Box/是合法的。 查看隐藏文件为了简化工作，command line 和 Finder 都会隐藏许多文件和文件夹，这些内容通常是系统需要的。不借助第三方工具让 Finder 显示隐藏文件比较困难，但是在 command line 中却非常简单。首先，许多隐藏文件的隐藏是通过隐藏属性在 Finder 中隐藏的，而 command line 会忽略这些属性，所以这些文件会在 command line 中显示。另外，ls命令会隐藏文件名以.开头的文件，但是这些文件却可以被显示出来，方法是利用-a选项。例如： 1michelle$ ls -la 我们还添加了-l选项，目的是控制输出格式。如果你注意输出内容的话，会发现还包括.和..两项，它们分别表示当前文件夹和父文件夹（如图）。如果你不想显示这两项，只需要把-a改成-A即可。 前往其他卷在 command line 中，系统卷（也称为 root volume）是由开始的一个正斜杠表示的。然而也许听起来不可思议，在 command line 中其他卷看起来就在文件系统中一个叫做 Volumes 的文件夹中。下面的命令清晰地显示出这种逻辑关系：我从我的 home folder 出发，最终前往一个叫 Time Machine 的卷，该卷是外接在 Mac 上的。 12345678910bogon:~ renfei$ pwd/Users/renfeibogon:~ renfei$ cd /Volumes/bogon:Volumes renfei$ pwd/Volumesbogon:Volumes renfei$ lsMacintosh SSD &amp;nbsp; &amp;nbsp; &amp;nbsp;Time Machinebogon:Volumes renfei$ cd Time\ Machine/bogon:Time Machine renfei$ pwd/Volumes/Time Machine 用Command-Line管理文件检视文件有许多基础命令用来定位、检视文件和文件夹，包括cat, less, which, file以及find。别忘了，你可以利用man命令来查阅每个命令的使用指南。 catcat是“concatenate”的意思，会按顺序读取文件并输出到 Terminal 窗口，语法为cat后接你需要查看的文件的路径。cat命令也可以用&gt;&gt;来增加文本文件的内容，例如命令cat ../textOne.txt &gt;&gt; textTwo.txt会把 textOne.txt 的内容添加到 textTwo.txt 的结尾。这个&gt;&gt;就属于上一篇提到的“Extras”。 less这个命令更适合用来查看长文本文件，因为它会允许你查找文本。语法为 less后接文件路径，和cat一样。用less命令打开的文件其实和你查看命令使用指南的时候使用的是一个查看器，所以操作是相同的，同样可以使用▲（上箭头）或▼（下箭头）来上下移动文本，使用 空格 来翻页，输入/和关键字来按照关键字搜索，按Q来退出使用指南页面。除此之外，按V键来使用vi文本编辑器。 which这个命令会定位某个命令的文件路径。换言之，它会告诉你你执行某个具体命令的时候，在使用哪个文件。语法为which后接某个命令。如图： file这个命令会尝试根据文件的内容输出文件类型。如果一个文件缺失了扩展名，那么这个命令可能会非常有用。语法为file后接文件路径。如图，此例为一个 PNG 文件，还给出了它的尺寸、颜色数等信息。 find这个命令用来根据搜索关键词定位文件路径。 find命令不使用 Spotlight 搜索服务，但是它允许你设置非常具体的搜索条件，以及通配符（稍后介绍）。语法为find后接搜索的起始路径，后接定义搜索的选项，后接搜索内容（包含在引号里）。例如： 注意 如果你要搜索根目录，也许你想使用-x选项来避免搜索 /Volumes 文件夹。 如果想使用 Soptlight 搜索服务，使用mdfind命令后接搜索关键词即可。 使用通配符（Wildcard Characters）下面是常用的通配符： 星号（＊，Asterisk）——代表任何长度的任何字符。例如*.tiff代表所有格式为tiff的文件。 问号（?，Question mark）——代表任何单个字符。例如b?ok匹配 book 但是不匹配 brook。 方括号（[]，Square brackets）——定义一定范围的字符，例如[Dd]ocument匹配 Document 以及 document；doc[1-9]匹配doc1, doc2, …, doc9。 配合使用上面三种通配符可以大大提高效率。 使用递归命令简单来说，递归命令可以允许命令不执行于一个特定文件，而是指定的路径下的所有文件。大多数命令包含一个-r或者-R选项，来设定你想递归地执行这个命令。例如下面的例子，展示了添加-R后ls命令的执行方式： 编辑文件和文件夹有许多基础的命令用来编辑文件和文件夹，包括mkdir, cp, mv, rm, rmdir以及vi。下面我们来简要地介绍一下这些命令。 mkdir“make diretory”的缩写，用来创建文件夹，语法为mkdir后接新文件夹的目录。可以用-p选项，来一起创建路径中不存在的文件夹（这样你就不用挨层创建了）。 cp“copy”的缩写，用来把文件从一处复制到另一处。语法为cp后接原始路径，后接目标路径。如果你想复制整个文件夹和所有内容，需要添加-R选项。如果指定的目标路径不含文件名，则 cp 命令会按原名复制。如果指定的目标路径包括文件名，则会复制为你指定的文件名。如果仅指定新文件名，则会在原处以新名称创建文件副本。注意，系统会自动替换同名文件而不出现提示。 mv“move”的缩写，用来移动文件。语法为mv后接原路径，后接新路径。mv 的指定路径规则和 cp 是一样的（没错，如果仅指定新文件名，它就成了重命名命令）。 rm“remove”的缩写，会永久删除文件。注意，command-line中没有废纸篓。语法为rm后接文件路径。然而，使用 rm 命令删除的文件有可能可以通过数据恢复工具恢复。如果希望安全删除文件，可以使用srm命令。 rmdir和rm -Rrmdir是“remove directory”的缩写，这个命令会永久删除文件夹。再强调一遍，CLI 中木有废纸篓。语法为rmdir后接希望删除目录的路径。然而，rmdir 命令无法删除含有任何其他文件的文件夹，所以大多数情形下rmdir命令是不适用的。不过，你可以利用rm添加-R选项来删除文件夹及包含的所有文件。 vi代表“visual”（视觉的），然而这个名称相当具有讽刺意味：vi可能是可视化效果最差的文本编辑器了。然而，vi 是 command line 中最常见的文本编辑器。用vi打开文本文件，只需要输入vi后接文件路径即可。Mac OS X 还提供了nano，一个更加现代的文本编辑器。它也更加方便，例如在底部包含了一个作弊小条（=_=），上面有常用的快捷键列表（你就不用背下来它们了）。然而，vi却有时是默认的文本编辑器，所以掌握vi是很有用的。 和less命令类似，vi命令会占用整个 Terminal 空间来显示文件内容。打开后，在“command模式”，vi 会等你输入一些预定义字符来告诉 vi 你想做什么。你也可以使用键盘上的箭头键单纯地浏览文件。你想编辑时，按A开始（会进入编辑模式）。文字会插入到光标处。如果你想保存，需要先退出编辑模式进入 command 模式。方法是按下esc键。回到 command 模式后，按住shift同时按两次Z来保存并退出。如果你不想保存，在 command 模式输入:quit!并按 enter/return 直接退出。 用Command-Line管理系统 使用su来切换用户su命令代表“substitute user identity”，允许你在命令行中轻松切换到另一个用户账户。语法为su后接用户的短名称。然后会要求你输入密码（但是输入的时候不会显示）。执行完毕后，命令的前缀会改变，表示你拥有其他用户的权利。你可以利用who -m命令来验证当前登陆的身份。切换后，你会一直保持该用户身份，直至退出 Terminal 或者输入exit命令。 关于sudo的使用sudo概述更强大的命令就是sudo，代表“substitute user do”，或者，更恰当地，“super user do”。用sudo执行一个命令会使用 root 账户权限。当然，使用之前需要 administrator 账户（管理员账户）的授权（如输入密码）。 默认情况下，任何管理员账户都可以使用sudo来获取 root 权限，甚至当 root 账户在图形界面被禁用的情况下，sudo依然有效。这个命令是很多情况下我们不得不使用 Terminal 的原因，——同样也是给每个用户管理员身份的危险所在。不过，你可以调整sudo的配置文件，来限制它的使用。 12345bogon:~ renfei$ cat secret.txtcat: secret.txt: Permission deniedbogon:~ renfei$ sudo cat secret.txtPassword:This is the contents of the secret.txt text file that the user account renfei does not normally have access permissions to read. However, because he is an administrative user, she can use the sudo command to envoke root user access and read the contents of this file. 提示：如果由于你忘了使用sudo而导致命令行返回一个错误，只需输入sudo !!就可以用sudo来执行上一条指令。 记住，权力越大责任越大。不恰当地使用sudo可以轻易破坏你的系统设置。命令行只会在你第一次执行严重破坏性行为之前提示你，之后，它就会假设你清楚自己正在干什么。如果你只掌握三条使用命令行的准则，那将是：总是仔细检查你的命令；总是使用Tab completion来帮助你避免拼写错误；使用sudo之前，总是仔仔细细检查你的命令。 使用 sudo 切换 Shell如果你是一个管理员用户，你需要执行很多条需要 root 权限的命令，你可以临时切换整个命令行 shell 来取得 root 级别的访问权限。方法就是先输入sudo -s，回车后再键入你的密码。 其他Command-Line技巧提示 输入命令open .可以用 Finder 打开当前的位置。 在 Terminal 的偏好里面可以设定它的外观和风格。 中止一个错误的或者发疯的命令，可以使用组合键control + C。 你可以在执行前编辑命令，只需要使用箭头和键盘上的其他字母。 没有输入任何命令时，你可以用▲和▼来浏览历史命令。同样可以编辑和再次执行。 你也可以使用history命令查看历史记录。 你可以使用组合键control + L清屏。]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ string 字符串函数详解]]></title>
    <url>%2F2017%2F03%2F17%2FThe%20details%20of%20string%20function%20of%20Cpp%2F</url>
    <content type="text"><![CDATA[运算符重载 + 和 +=：连接字符串 =：字符串赋值 >、&gt;=、&lt; 和 &lt;=：字符串比较（例如a &lt; b, aa &lt; ab） ==、!=：比较字符串 &lt;&lt;、&gt;&gt;：输出、输入字符串 12345678#include &lt;iostream&gt;#include &lt;string&gt;int main()&#123; string str = "cat"; cout &lt;&lt; "apple" + "boy" + str; // illegal! return 0;&#125; 查找 123456789101112131415161718192021string str;cin &gt;&gt; str;str.find("ab");//返回字符串 ab 在 str 的位置str.find("ab", 2);//在 str[2]~str[n-1] 范围内查找并返回字符串 ab 在 str 的位置str.rfind("ab", 2);//在 str[0]~str[2] 范围内查找并返回字符串 ab 在 str 的位置//first 系列函数str.find_first_of("apple");//返回 apple 中任何一个字符首次在 str 中出现的位置str.find_first_of("apple", 2);//返回 apple 中任何一个字符首次在 str[2]~str[n-1] 范围中出现的位置str.find_first_not_of("apple");//返回除 apple 以外的任何一个字符在 str 中首次出现的位置str.find_first_not_of("apple", 2);//返回除 apple 以外的任何一个字符在 str[2]~str[n-1] 范围中首次出现的位置//last 系列函数str.find_last_of("apple");//返回 apple 中任何一个字符最后一次在 str 中出现的位置str.find_last_of("apple", 2);//返回 apple 中任何一个字符最后一次在 str[0]~str[2] 范围中出现的位置str.find_last_not_of("apple");//返回除 apple 以外的任何一个字符在 str 中最后一次出现的位置str.find_last_not_of("apple", 2);//返回除 apple 以外的任何一个字符在 str[0]~str[2] 范围中最后一次出现的位置//以上函数如果没有找到，均返回string::nposcout &lt;&lt; string::npos; 子串 12str.substr(3); //返回 [3] 及以后的子串str.substr(2, 4); //返回 str[2]~str[2+(4-1)] 子串(即从[2]开始4个字符组成的字符串) 替换 12str.replace(2, 4, "sz");//返回把 [2]~[2+(4-1)] 的内容替换为 "sz" 后的新字符串str.replace(2, 4, "abcd", 3);//返回把 [2]~[2+(4-1)] 的内容替换为 "abcd" 的前3个字符后的新字符串 插入 123str.insert(2, "sz");//从 [2] 位置开始添加字符串 "sz"，并返回形成的新字符串str.insert(2, "abcd", 3);//从 [2] 位置开始添加字符串 "abcd" 的前 3 个字符，并返回形成的新字符串str.insert(2, "abcd", 1, 3);//从 [2] 位置开始添加字符串 "abcd" 的前 [2]~[2+(3-1)] 个字符，并返回形成的新字符串 追加 除了用重载的 + 操作符，还可以使用函数来完成。 12str.push_back('a');//在 str 末尾添加字符'a'str.append("abc");//在 str 末尾添加字符串"abc" 删除 12str.erase(3);//删除 [3] 及以后的字符，并返回新字符串str.erase(3, 5);//删除从 [3] 开始的 5 个字符，并返回新字符串 交换 1str1.swap(str2);//把 str1 与 str2 交换 其他 12345str.size();//返回字符串长度str.length();//返回字符串长度str.empty();//检查 str 是否为空，为空返回 1，否则返回 0str[n];//存取 str 第 n + 1 个字符str.at(n);//存取 str 第 n + 1 个字符（如果溢出会抛出异常） 实例 查找给定字符串并把相应子串替换为另一给定字符串string 并没有提供这样的函数，所以我们自己来实现。由于给定字符串可能出现多次，所以需要用到 find() 成员函数的第二个参数，每次查找之后，从找到位置往后继续搜索。直接看代码（这个函数返回替换的次数，如果返回值是 0 说明没有替换）： 1234567891011int str_replace(string &amp;str, const string &amp;src, const string &amp;dest)&#123; int counter = 0; string::size_type pos = 0; while ((pos = str.find(src, pos)) != string::npos) &#123; str.replace(pos, src.size(), dest); ++counter; pos += dest.size(); &#125; return counter;&#125; 从给定字符串中删除一给定字串方法和上面相似，内部使用 erase() 完成。代码： 12345678910int str_erase(string &amp;str, const string src)&#123; int counter = 0; string::size_type pos = 0; while ((pos = str.find(src, pos)) != string::npos) &#123; str.erase(pos, src.size()); ++counter; &#125; return counter;&#125; 给定一字符串和一字符集，从字符串剔除字符集中的任意字符12345678910int str_wash(string &amp;str, const string src)&#123; int counter = 0; string::size_type pos = 0; while ((pos = str.find_first_of(src, pos)) != string::npos) &#123; str.erase(pos, 1); ++counter; &#125; return counter;&#125;]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用纯 CSS 为 HTML checkbox 添加自定义样式及动画效果]]></title>
    <url>%2F2017%2F03%2F17%2FAdd%20custom%20style%20and%20animation%20effects%20to%20HTML%20checkbox%20with%20CSS%2F</url>
    <content type="text"><![CDATA[一般情况下，`元素（也包括一部分其他input元素）是由操作系统（而非浏览器）进行渲染的。在不同操作系统下，这类特殊元素的样式往往和系统本身的风格一致，和浏览器无关。也正是由于这种机制，开发者无法像一般元素那样使用 CSS 来修饰这类元素。这里介绍一种利用纯 CSS 实现自定义 checkbox 样式的方法。思路很简单：由于控件所对应的label元素是可以点击并切换控件状态的，而label元素的样式又可以自由设定，因此我们可将input元素隐藏，通过label`元素实现交互。 HTML 代码如下： 1234&lt;input type="checkbox" id="checkbox" class="checkbox"/&gt;&lt;div class="checkbox-wrapper"&gt; &lt;label for="checkbox" class="checkbox-label"&gt;&lt;/label&gt;&lt;/div&gt; 样式一：Metro UI 风格 效果： CSS 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445.checkbox-wrapper &#123; width: 80px; height: 32px; position: relative; display: inline-block; overflow: hidden;&#125;.checkbox &#123; display: none;&#125;.checkbox-label::before,.checkbox-label::after &#123; font-family: sans-serif; font-size: 13px; color: #ffffff; position: absolute; font-weight: bold; line-height: 32px; height: 32px; width: 40px; text-align: center;&#125;.checkbox-label::before &#123; content: 'ON'; left: -40px; background: #45b6af;&#125;.checkbox-label::after &#123; content: 'OFF'; right: -40px; background: #f3565d;&#125;.checkbox-label &#123; display: block; position: absolute; left: 0; width: 40px; height: 32px; transition: all .4s ease; cursor: pointer; background: #dddddd;&#125;.checkbox:checked + .checkbox-wrapper .checkbox-label &#123; left: 40px;&#125; 样式二：iOS 7 风格 效果： CSS代码如下： 123456789101112131415161718192021222324252627282930313233.checkbox-wrapper &#123; width: 58px; height: 32px; position: relative; display: inline-block; background: #ffffff; border-radius: 16px; transition: all .3s ease-out; box-shadow: 0px 0px 0px 2px #ddd;&#125;.checkbox &#123; display: none;&#125;.checkbox-label &#123; display: block; position: absolute; left: 0px; top: 0px; width: 32px; height: 32px; cursor: pointer; background: #ffffff; border-radius: 16px; box-shadow: 0px 2px 3px rgba(0,0,0,0.2); transition: all .3s ease-out;&#125;.checkbox:checked + .checkbox-wrapper &#123; background: #0bd318; box-shadow: 0px 0px 0px 2px #0bd318;&#125;.checkbox:checked + .checkbox-wrapper .checkbox-label &#123; left: 26px;&#125; 值得一提的是，这个例子虽然比较完美的还原了 iOS 7 中 UISwitch 控件的外观，但是动画曲线却还有些差距。iOS 7 中使用的是一种名为 String Animation 的动画（该 API 在 iOS 8 中已经公开），仔细看的话可以发现开始滑块移动很快，到后面逐渐变慢，并且结束时还有小幅度的「反弹」效果。这里我们为了方便，使用 ease-out 来模拟。 JSFiddle 点击此处查看本教程在 JSFiddle 的示范代码。]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
